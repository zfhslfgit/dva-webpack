'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var path__default = _interopDefault(path);
var fs = require('fs');
var fs__default = _interopDefault(fs);
var pxtorem = _interopDefault(require('@dndc/dealer-admin-pxtorem'));
var ExtractTextPlugin = _interopDefault(require('extract-text-webpack-plugin'));
var postcss = _interopDefault(require('postcss'));
var chalk = _interopDefault(require('chalk'));
var spanner = _interopDefault(require('@dndc/project-spanner'));
var webpack = _interopDefault(require('webpack'));
var HtmlWebpackPlugin = _interopDefault(require('html-webpack-plugin'));
var ProgressBarPlugin = _interopDefault(require('progress-bar-webpack-plugin'));

/**
 * 模块规则（js、html、esj、图片规则）
 *
 * @since 0.0.1
 * @category core 
 * @method firstRules 
 * @param {object} [options={ paths: { appNodeModules:'node_modules' },babelOptions: { presets:['env','react','stage-0'],plugins:['transform-runtime'] }}]
 * appNodeModules：'node模块'，babelOptions：babel配置
 * @return {object} 公共模块匹配规则
 * @example
 *
 * import { firstRules } from '@dndc/webpack-dndc'
 *
 * const paths = getPaths(process.cwd());
 * const babelOptions = {
 *   presets: [
 *    "env",
 *    "react",
 *    "stage-0",
 *   ]
 *   plugins:[
 *     "transform-runtime"
 *   ]
 * }
 * firstRules({ paths, babelOptions })
 * 
 */

function firstRules(_ref) {
  var paths = _ref.paths,
      babelOptions = _ref.babelOptions;

  return [{
    test: /\.(js|jsx)$/,
    exclude: paths.appNodeModules,
    use: [{
      loader: 'babel',
      options: babelOptions
    }]
  }, {
    test: /\.html?$/,
    use: {
      loader: 'html'
    }
  }, {
    test: /\.ejs?$/,
    use: {
      loader: 'ejs'
    }
  }, {
    test: /\.(png|jpg|jpeg|gif|eot|ttf|woff|woff2|svg|svgz)(\?.+)?$/,
    use: [{
      loader: 'file',
      options: {
        context: 'src',
        name: '[path][name].[ext]'
      }
    }]
  }];
}

/**
 * 获取路径
 *
 * @since 0.0.1
 * @category core 
 * @method getPaths 
 * @param {object} [options={ cwd:process.cwd() }]
 * appNodeModules：'node模块'，babelOptions：babel配置
 * @return {object} 路径
 * @example
 *
 * import { getPaths } from '@dndc/webpack-dndc'
 *
 * const paths = getPaths(process.cwd());
 * 
 */

function getPaths() {
  var cwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : process.cwd();

  var appDirectory = fs.realpathSync(cwd);

  function resolveApp(relativePath) {
    return path.resolve(appDirectory, relativePath);
  }

  return {
    appBuild: resolveApp('dest'),
    appBuildDist: resolveApp('dist'),
    appSrc: resolveApp('src'),
    appNodeModules: resolveApp('node_modules'),
    resolveApp: resolveApp,
    appDirectory: appDirectory
  };
}

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
}

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var versions = {
	"2.0": "61",
	"1.8": "59",
	"1.7": "58",
	"1.6": "56",
	"1.5": "54",
	"1.4": "53",
	"1.3": "52",
	"1.2": "51",
	"1.1": "50",
	"1.0": "49",
	"0.37": "49",
	"0.36": "47",
	"0.35": "45",
	"0.34": "45",
	"0.33": "45",
	"0.32": "45",
	"0.31": "44",
	"0.30": "44",
	"0.29": "43",
	"0.28": "43",
	"0.27": "42",
	"0.26": "42",
	"0.25": "42",
	"0.24": "41",
	"0.23": "41",
	"0.22": "41",
	"0.21": "40",
	"0.20": "39"
};

var browsers$1={A:"ie",B:"edge",C:"firefox",D:"chrome",E:"safari",F:"opera",G:"ios_saf",H:"op_mini",I:"android",J:"bb",K:"op_mob",L:"and_chr",M:"and_ff",N:"ie_mob",O:"and_uc",P:"samsung",Q:"and_qq",R:"baidu"};

var browsers_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var browsers = exports.browsers = browsers$1;
});

unwrapExports(browsers_1);

var browserVersions$1={"0":"53","1":"54","2":"4.2-4.3","3":"56","4":"12.1","5":"58","6":"59","7":"60","8":"61","9":"11.5",A:"10",B:"11",C:"7",D:"12",E:"9",F:"4",G:"8",H:"17",I:"15",J:"5",K:"6",L:"37",M:"16",N:"18",O:"19",P:"20",Q:"21",R:"22",S:"23",T:"24",U:"25",V:"26",W:"27",X:"28",Y:"29",Z:"14",a:"31",b:"32",c:"33",d:"34",e:"35",f:"36",g:"11.1",h:"38",i:"39",j:"40",k:"41",l:"42",m:"43",n:"44",o:"45",p:"46",q:"47",r:"48",s:"49",t:"50",u:"51",v:"52",w:"13",x:"57",y:"30",z:"55",AB:"3",BB:"62",CB:"3.2",DB:"64",EB:"5.0-5.1",FB:"65",GB:"67",HB:"3.1",IB:"63",JB:"5.1",KB:"6.1",LB:"7.1",MB:"9.1",NB:"10.1",OB:"3.6",PB:"TP",QB:"9.5-9.6",RB:"10.0-10.1",SB:"10.5",TB:"10.6",UB:"3.5",VB:"11.6",WB:"2",XB:"4.0-4.1",YB:"5.5",ZB:"66",aB:"6.0-6.1",bB:"7.0-7.1",cB:"8.1-8.4",dB:"9.0-9.2",eB:"9.3",fB:"10.0-10.2",gB:"10.3",hB:"11.0-11.2",iB:"11.3",jB:"all",kB:"2.1",lB:"2.2",mB:"2.3",nB:"4.1",oB:"4.4",pB:"4.4.3-4.4.4",qB:"11.8",rB:"6.2",sB:"1.2",tB:"7.12"};

var browserVersions_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var browserVersions = exports.browserVersions = browserVersions$1;
});

unwrapExports(browserVersions_1);

var agents$2={A:{A:{K:0.0135053,C:0.0135053,G:0.211583,E:0.121548,A:0.130551,B:2.78209,YB:0.009298},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","YB","K","C","G","E","A","B","","",""],E:"IE",F:{YB:962323200,K:998870400,C:1161129600,G:1237420800,E:1300060800,A:1346716800,B:1381968000}},B:{A:{D:0.026358,w:0.04393,Z:0.171327,I:0.404156,M:1.16854,H:0.013179},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","D","w","Z","I","M","H","",""],E:"Edge",F:{D:1438128000,w:1447286400,Z:1470096000,I:1491868800,M:1508198400,H:null}},C:{A:{"0":0.030751,"1":0.04393,"3":0.153755,"5":0.448086,"6":0.021965,"7":0,"8":0,WB:0.004393,AB:0.008786,F:0.008786,J:0.004879,K:0.020136,C:0.005725,G:0.004393,E:0.00533,A:0.004283,B:0.004393,D:0.004393,w:0.004486,Z:0.00453,I:0.004393,M:0.004393,H:0.004349,N:0.004393,O:0.004443,P:0.004283,Q:0.008786,R:0.004393,S:0.004393,T:0.008786,U:0.008786,V:0.004393,W:0.004393,X:0.004393,Y:0.004393,y:0.004393,a:0.008786,b:0.008786,c:0.008786,d:0.008786,e:0.008786,f:0.008786,L:0.008786,h:0.030751,i:0.008786,j:0.013179,k:0.017572,l:0.013179,m:0.035144,n:0.030751,o:0.039537,p:0.013179,q:0.052716,r:0.13179,s:0.030751,t:0.04393,u:0.065895,v:0.417335,z:0.048323,x:3.22446,UB:0.008786,OB:0.030751},B:"moz",C:["","","WB","AB","UB","OB","F","J","K","C","G","E","A","B","D","w","Z","I","M","H","N","O","P","Q","R","S","T","U","V","W","X","Y","y","a","b","c","d","e","f","L","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","0","1","z","3","x","5","6","7","8"],E:"Firefox",F:{"0":1492560000,"1":1497312000,"3":1506556800,"5":1516665600,"6":null,"7":null,"8":null,WB:1161648000,AB:1213660800,UB:1246320000,OB:1264032000,F:1300752000,J:1308614400,K:1313452800,C:1317081600,G:1317081600,E:1320710400,A:1324339200,B:1327968000,D:1331596800,w:1335225600,Z:1338854400,I:1342483200,M:1346112000,H:1349740800,N:1353628800,O:1357603200,P:1361232000,Q:1364860800,R:1368489600,S:1372118400,T:1375747200,U:1379376000,V:1386633600,W:1391472000,X:1395100800,Y:1398729600,y:1402358400,a:1405987200,b:1409616000,c:1413244800,d:1417392000,e:1421107200,f:1424736000,L:1428278400,h:1431475200,i:1435881600,j:1439251200,k:1442880000,l:1446508800,m:1450137600,n:1453852800,o:1457395200,p:1461628800,q:1465257600,r:1470096000,s:1474329600,t:1479168000,u:1485216000,v:1488844800,z:1502150400,x:1510617600}},D:{A:{"0":0.035144,"1":0.079074,"3":0.127397,"5":0.215257,"6":0.193292,"7":0.246008,"8":0.386584,F:0.004706,J:0.004879,K:0.004879,C:0.005591,G:0.005591,E:0.005591,A:0.004534,B:0.013179,D:0.004283,w:0.004879,Z:0.004706,I:0.009154,M:0.004393,H:0.004393,N:0.008786,O:0.008786,P:0.004393,Q:0.008786,R:0.026358,S:0.008786,T:0.013179,U:0.008786,V:0.013179,W:0.008786,X:0.008786,Y:0.114218,y:0.008786,a:0.026358,b:0.008786,c:0.017572,d:0.026358,e:0.013179,f:0.013179,L:0.013179,h:0.035144,i:0.021965,j:0.021965,k:0.017572,l:0.026358,m:0.074681,n:0.017572,o:0.026358,p:0.021965,q:0.048323,r:0.057109,s:0.948888,t:0.030751,u:0.057109,v:0.039537,z:0.347047,x:0.140576,BB:0.61502,IB:23.2302,DB:0.57109,FB:0.04393,ZB:0,GB:0},B:"webkit",C:["F","J","K","C","G","E","A","B","D","w","Z","I","M","H","N","O","P","Q","R","S","T","U","V","W","X","Y","y","a","b","c","d","e","f","L","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","0","1","z","3","x","5","6","7","8","BB","IB","DB","FB","ZB","GB"],E:"Chrome",F:{"0":1472601600,"1":1476230400,"3":1485302400,"5":1492560000,"6":1496707200,"7":1500940800,"8":1504569600,F:1264377600,J:1274745600,K:1283385600,C:1287619200,G:1291248000,E:1296777600,A:1299542400,B:1303862400,D:1307404800,w:1312243200,Z:1316131200,I:1316131200,M:1319500800,H:1323734400,N:1328659200,O:1332892800,P:1337040000,Q:1340668800,R:1343692800,S:1348531200,T:1352246400,U:1357862400,V:1361404800,W:1364428800,X:1369094400,Y:1374105600,y:1376956800,a:1384214400,b:1389657600,c:1392940800,d:1397001600,e:1400544000,f:1405468800,L:1409011200,h:1412640000,i:1416268800,j:1421798400,k:1425513600,l:1429401600,m:1432080000,n:1437523200,o:1441152000,p:1444780800,q:1449014400,r:1453248000,s:1456963200,t:1460592000,u:1464134400,v:1469059200,z:1480550400,x:1489017600,BB:1508198400,IB:1512518400,DB:1516752000,FB:null,ZB:null,GB:null}},E:{A:{F:0.008786,J:0.021965,K:0.004349,C:0.008786,G:0.039537,E:0.057109,A:0.158148,B:1.48923,HB:0,CB:0.008692,JB:0.08786,KB:0.013179,LB:0.004283,MB:0.237222,NB:0.421728,g:0,PB:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","HB","CB","F","J","JB","K","KB","C","LB","G","E","MB","A","NB","B","g","PB",""],E:"Safari",F:{HB:1205798400,CB:1226534400,F:1244419200,J:1275868800,JB:1311120000,K:1343174400,KB:1382400000,C:1382400000,LB:1410998400,G:1413417600,E:1443657600,MB:1458518400,A:1474329600,NB:1490572800,B:1505779200,g:null,PB:null}},F:{A:{"4":0.061502,"9":0.004879,E:0.0082,B:0.016581,D:0.008786,I:0.00685,M:0.00685,H:0.00685,N:0.005014,O:0.006015,P:0.004879,Q:0.006597,R:0.006597,S:0.013434,T:0.006702,U:0.006015,V:0.005595,W:0.004393,X:0.008698,Y:0.004879,y:0.004879,a:0.004393,b:0.005152,c:0.005014,d:0.009758,e:0.004879,f:0.039537,L:0.004283,h:0.004367,i:0.004534,j:0.004367,k:0.004227,l:0.004577,m:0.008668,n:0.004227,o:0.004393,p:0.004393,q:0.008786,r:0.013179,s:0.360226,t:0.421728,u:0.004393,v:0,QB:0.00685,RB:0,SB:0.008392,TB:0.004706,g:0.006229,VB:0.008786},B:"webkit",C:["","","","","","","","","","","","","","","E","QB","RB","SB","TB","B","g","9","VB","D","4","I","M","H","N","O","P","Q","R","S","T","U","V","W","X","Y","y","a","b","c","d","e","f","L","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v",""],E:"Opera",F:{"4":1352073600,"9":1309219200,E:1150761600,QB:1223424000,RB:1251763200,SB:1267488000,TB:1277942400,B:1292457600,g:1302566400,VB:1323129600,D:1323129600,I:1372723200,M:1377561600,H:1381104000,N:1386288000,O:1390867200,P:1393891200,Q:1399334400,R:1401753600,S:1405987200,T:1409616000,U:1413331200,V:1417132800,W:1422316800,X:1425945600,Y:1430179200,y:1433808000,a:1438646400,b:1442448000,c:1445904000,d:1449100800,e:1454371200,f:1457308800,L:1462320000,h:1465344000,i:1470096000,j:1474329600,k:1477267200,l:1481587200,m:1486425600,n:1490054400,o:1494374400,p:1498003200,q:1502236800,r:1506470400,s:1510099200,t:1515024000,u:null,v:null},D:{"4":"o","9":"o",E:"o",B:"o",D:"o",QB:"o",RB:"o",SB:"o",TB:"o",g:"o",VB:"o"}},G:{A:{"2":0.0284732,G:0.0142366,CB:0.0020338,XB:0,EB:0.0183042,aB:0.00915211,bB:0.0549126,cB:0.0915211,dB:0.092538,eB:0.429132,fB:0.536924,gB:1.16435,hB:7.70709,iB:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","CB","XB","2","EB","aB","bB","G","cB","dB","eB","fB","gB","hB","iB","",""],E:"iOS Safari",F:{"2":1299628800,CB:1270252800,XB:1283904000,EB:1331078400,aB:1359331200,bB:1394409600,G:1410912000,cB:1413763200,dB:1442361600,eB:1458518400,fB:1473724800,gB:1490572800,hB:1505779200,iB:null}},H:{A:{jB:2.95675},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","jB","","",""],E:"Opera Mini",F:{jB:1426464000}},I:{A:{"2":0.220332,AB:0,F:0,BB:0,kB:0,lB:0,mB:0,nB:0.0734441,oB:0.64714,pB:0.39355},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kB","lB","mB","AB","F","nB","2","oB","pB","BB","","",""],E:"Android Browser",F:{"2":1374624000,kB:1256515200,lB:1274313600,mB:1291593600,AB:1298332800,F:1318896000,nB:1341792000,oB:1386547200,pB:1401667200,BB:1485907200}},J:{A:{C:0.0145782,A:0.0583128},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","C","A","","",""],E:"Blackberry Browser",F:{C:1325376000,A:1359504000}},K:{A:{"4":0,"9":0,A:0,B:0,D:0,L:0.0111391,g:0},B:"o",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","g","9","D","4","L","","",""],E:"Opera Mobile",F:{"4":1349740800,"9":1318291200,A:1287100800,B:1300752000,g:1314835200,D:1330300800,L:1474588800},D:{L:"webkit"}},L:{A:{DB:29.306},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DB","","",""],E:"Chrome for Android",F:{DB:1516665600}},M:{A:{x:0.459774},B:"moz",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","x","","",""],E:"Firefox for Android",F:{x:1510617600}},N:{A:{A:0.033642,B:0.201852},B:"ms",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A","B","","",""],E:"IE Mobile",F:{A:1340150400,B:1353456000}},O:{A:{qB:8.50582},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","qB","","",""],E:"UC Browser for Android",F:{qB:1471392000},D:{qB:"webkit"}},P:{A:{F:1.07282,J:0.29164,rB:1.70818},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","F","J","rB","","",""],E:"Samsung Internet",F:{F:1461024000,J:1481846400,rB:1509408000}},Q:{A:{sB:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","sB","","",""],E:"QQ Browser",F:{sB:1483228800}},R:{A:{tB:0},B:"webkit",C:["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","tB","","",""],E:"Baidu Browser",F:{tB:1491004800}}};

var agents_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.agents = undefined;







function unpackBrowserVersions(versionsData) {
    return Object.keys(versionsData).reduce(function (usage, version) {
        usage[browserVersions_1.browserVersions[version]] = versionsData[version];
        return usage;
    }, {});
}

var agents = exports.agents = Object.keys(agents$2).reduce(function (map, key) {
    var versionsData = agents$2[key];
    map[browsers_1.browsers[key]] = Object.keys(versionsData).reduce(function (data, entry) {
        if (entry === 'A') {
            data.usage_global = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === 'C') {
            data.versions = versionsData[entry].reduce(function (list, version) {
                if (version === '') {
                    list.push(null);
                } else {
                    list.push(browserVersions_1.browserVersions[version]);
                }
                return list;
            }, []);
        } else if (entry === 'D') {
            data.prefix_exceptions = unpackBrowserVersions(versionsData[entry]);
        } else if (entry === 'E') {
            data.browser = versionsData[entry];
        } else if (entry === 'F') {
            data.release_date = Object.keys(versionsData[entry]).reduce(function (map, key) {
                map[browserVersions_1.browserVersions[key]] = versionsData[entry][key];
                return map;
            }, {});
        } else {
            // entry is B
            data.prefix = versionsData[entry];
        }
        return data;
    }, {});
    return map;
}, {});
});

unwrapExports(agents_1);

var region$1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = unpackRegion;



function unpackRegion(packed) {
    return Object.keys(packed).reduce(function (list, browser) {
        var data = packed[browser];
        list[browsers_1.browsers[browser]] = Object.keys(data).reduce(function (memo, key) {
            var stats = data[key];
            if (key === '_') {
                stats.split(' ').forEach(function (version) {
                    return memo[version] = null;
                });
            } else {
                memo[key] = stats;
            }
            return memo;
        }, {});
        return list;
    }, {});
}
});

unwrapExports(region$1);

function BrowserslistError (message) {
  this.name = 'BrowserslistError';
  this.message = message || '';
  this.browserslist = true;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, BrowserslistError);
  }
}

BrowserslistError.prototype = Error.prototype;

var error = BrowserslistError;

var node = createCommonjsModule(function (module) {
var IS_SECTION = /^\s*\[(.+)\]\s*$/;
var CONFIG_PATTERN = /^browserslist-config-/;
var SCOPED_CONFIG__PATTERN = /@[^./]+\/browserslist-config(-|$)/;

var filenessCache = { };
var configCache = { };

function checkExtend (name) {
  var use = ' Use `dangerousExtend` option to disable.';
  if (!CONFIG_PATTERN.test(name) && !SCOPED_CONFIG__PATTERN.test(name)) {
    throw new error(
      'Browserslist config needs `browserslist-config-` prefix. ' + use)
  }
  if (name.indexOf('.') !== -1) {
    throw new error(
      '`.` not allowed in Browserslist config name. ' + use)
  }
  if (name.indexOf('node_modules') !== -1) {
    throw new error(
      '`node_modules` not allowed in Browserslist config.' + use)
  }
}

function isFile (file) {
  if (file in filenessCache) {
    return filenessCache[file]
  }
  var result = fs__default.existsSync(file) && fs__default.statSync(file).isFile();
  if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
    filenessCache[file] = result;
  }
  return result
}

function eachParent (file, callback) {
  var loc = path__default.resolve(file);
  do {
    var result = callback(loc);
    if (typeof result !== 'undefined') return result
  } while (loc !== (loc = path__default.dirname(loc)))
  return undefined
}

function pickEnv (config, opts) {
  if (typeof config !== 'object') return config

  var name;
  if (typeof opts.env === 'string') {
    name = opts.env;
  } else if (process.env.BROWSERSLIST_ENV) {
    name = process.env.BROWSERSLIST_ENV;
  } else if (process.env.NODE_ENV) {
    name = process.env.NODE_ENV;
  } else {
    name = 'development';
  }

  return config[name] || config.defaults
}

function parsePackage (file) {
  var config = JSON.parse(fs__default.readFileSync(file));
  if (config.browserlist && !config.browserslist) {
    throw new error(
      '`browserlist` key instead of `browserslist` in ' + file)
  }
  var list = config.browserslist;
  if (typeof list === 'object' && list.length) {
    list = { defaults: list };
  }
  return list
}

module.exports = {
  loadQueries: function loadQueries (context, name) {
    if (!context.dangerousExtend) checkExtend(name);
    // eslint-disable-next-line security/detect-non-literal-require
    var queries = commonjsRequire(name);
    if (!Array.isArray(queries)) {
      throw new error(
        '`' + name + '` config exports not an array of queries')
    }
    return queries
  },

  getStat: function getStat (opts) {
    var stats;
    if (opts.stats) {
      stats = opts.stats;
    } else if (process.env.BROWSERSLIST_STATS) {
      stats = process.env.BROWSERSLIST_STATS;
    } else if (opts.path && path__default.resolve && fs__default.existsSync) {
      stats = eachParent(opts.path, function (dir) {
        var file = path__default.join(dir, 'browserslist-stats.json');
        return isFile(file) ? file : undefined
      });
    }

    if (typeof stats === 'string') {
      try {
        stats = JSON.parse(fs__default.readFileSync(stats));
      } catch (e) {
        throw new error('Can\'t read ' + stats)
      }
    }

    return stats
  },

  loadConfig: function loadConfig (opts) {
    if (process.env.BROWSERSLIST) {
      return process.env.BROWSERSLIST
    } else if (opts.config || process.env.BROWSERSLIST_CONFIG) {
      var file = opts.config || process.env.BROWSERSLIST_CONFIG;
      if (path__default.basename(file) === 'package.json') {
        return pickEnv(parsePackage(file), opts)
      } else {
        return pickEnv(module.exports.readConfig(file), opts)
      }
    } else if (opts.path) {
      return pickEnv(module.exports.findConfig(opts.path), opts)
    } else {
      return undefined
    }
  },

  parseConfig: function parseConfig (string) {
    var result = { defaults: [] };
    var section = 'defaults';

    string.toString()
      .replace(/#[^\n]*/g, '')
      .split(/\n/)
      .map(function (line) {
        return line.trim()
      })
      .filter(function (line) {
        return line !== ''
      })
      .forEach(function (line) {
        if (IS_SECTION.test(line)) {
          section = line.match(IS_SECTION)[1].trim();
          result[section] = result[section] || [];
        } else {
          result[section].push(line);
        }
      });

    return result
  },

  readConfig: function readConfig (file) {
    if (!isFile(file)) {
      throw new error('Can\'t read ' + file + ' config')
    }
    return module.exports.parseConfig(fs__default.readFileSync(file))
  },

  findConfig: function findConfig (from) {
    from = path__default.resolve(from);

    var cacheKey = isFile(from) ? path__default.dirname(from) : from;
    if (cacheKey in configCache) {
      return configCache[cacheKey]
    }

    var resolved = eachParent(from, function (dir) {
      var config = path__default.join(dir, 'browserslist');
      var pkg = path__default.join(dir, 'package.json');
      var rc = path__default.join(dir, '.browserslistrc');

      var pkgBrowserslist;
      if (isFile(pkg)) {
        try {
          pkgBrowserslist = parsePackage(pkg);
        } catch (e) {
          if (e.name === 'BrowserslistError') throw e
          console.warn(
            '[Browserslist] Could not parse ' + pkg + '. Ignoring it.');
        }
      }

      if (isFile(config) && pkgBrowserslist) {
        throw new error(
          dir + ' contains both browserslist and package.json with browsers')
      } else if (isFile(rc) && pkgBrowserslist) {
        throw new error(
          dir + ' contains both .browserslistrc and package.json with browsers')
      } else if (isFile(config) && isFile(rc)) {
        throw new error(
          dir + ' contains both .browserslistrc and browserslist')
      } else if (isFile(config)) {
        return module.exports.readConfig(config)
      } else if (isFile(rc)) {
        return module.exports.readConfig(rc)
      } else {
        return pkgBrowserslist
      }
    });
    if (!process.env.BROWSERSLIST_DISABLE_CACHE) {
      configCache[cacheKey] = resolved;
    }
    return resolved
  },

  clearCaches: function clearCaches () {
    filenessCache = { };
    configCache = { };
  }
};
});

var agents = agents_1.agents;
var region = region$1.default;


 // Will load browser.js in webpack

var FLOAT_RANGE = /^\d+(\.\d+)?(-\d+(\.\d+)?)*$/;

function normalize (versions$$1) {
  return versions$$1.filter(function (version) {
    return typeof version === 'string'
  })
}

function nameMapper (name) {
  return function mapName (version) {
    return name + ' ' + version
  }
}

function getMajor (version) {
  return parseInt(version.split('.')[0])
}

function getMajorVersions (released, number) {
  if (released.length === 0) return []
  var minimum = getMajor(released[released.length - 1]) - parseInt(number) + 1;
  var selected = [];
  for (var i = released.length - 1; i >= 0; i--) {
    if (minimum > getMajor(released[i])) break
    selected.unshift(released[i]);
  }
  return selected
}

function uniq (array) {
  var filtered = [];
  for (var i = 0; i < array.length; i++) {
    if (filtered.indexOf(array[i]) === -1) filtered.push(array[i]);
  }
  return filtered
}

// Helpers

function fillUsage (result, name, data) {
  for (var i in data) {
    result[name + ' ' + i] = data[i];
  }
}

function generateFilter (sign, version) {
  version = parseFloat(version);
  if (sign === '>') {
    return function (v) {
      return parseFloat(v) > version
    }
  } else if (sign === '>=') {
    return function (v) {
      return parseFloat(v) >= version
    }
  } else if (sign === '<') {
    return function (v) {
      return parseFloat(v) < version
    }
  } else {
    return function (v) {
      return parseFloat(v) <= version
    }
  }
}

function compareStrings (a, b) {
  if (a < b) return -1
  if (a > b) return +1
  return 0
}

function normalizeVersion (data, version) {
  if (data.versions.indexOf(version) !== -1) {
    return version
  } else if (browserslist.versionAliases[data.name][version]) {
    return browserslist.versionAliases[data.name][version]
  } else if (data.versions.length === 1) {
    return data.versions[0]
  } else {
    return false
  }
}

function loadCountryStatistics (country) {
  country = country.replace(/[^\w-]/g, '');
  if (!browserslist.usage[country]) {
    var usage = { };
    // eslint-disable-next-line security/detect-non-literal-require
    var compressed = commonjsRequire('caniuse-lite/data/regions/' + country + '.js');
    var data = region(compressed);
    for (var i in data) {
      fillUsage(usage, i, data[i]);
    }
    browserslist.usage[country] = usage;
  }
}

function filterByYear (since) {
  return Object.keys(agents).reduce(function (selected, name) {
    var data = byName(name);
    if (!data) return selected
    var versions$$1 = Object.keys(data.releaseDate).filter(function (v) {
      return data.releaseDate[v] >= since
    });
    return selected.concat(versions$$1.map(nameMapper(data.name)))
  }, [])
}

function byName (name) {
  name = name.toLowerCase();
  name = browserslist.aliases[name] || name;
  return browserslist.data[name]
}

function checkName (name) {
  var data = byName(name);
  if (!data) throw new error('Unknown browser ' + name)
  return data
}

function resolve$1 (queries, context) {
  return queries.reduce(function (result, selection, index) {
    selection = selection.trim();
    if (selection === '') return result

    var isExclude = selection.indexOf('not ') === 0;
    if (isExclude) {
      if (index === 0) {
        throw new error(
          'Write any browsers query (for instance, `defaults`) ' +
          'before `' + selection + '`')
      }
      selection = selection.slice(4);
    }

    for (var i = 0; i < QUERIES.length; i++) {
      var type = QUERIES[i];
      var match = selection.match(type.regexp);
      if (match) {
        var args = [context].concat(match.slice(1));
        var array = type.select.apply(browserslist, args);
        if (isExclude) {
          array = array.concat(array.map(function (j) {
            return j.replace(/\s\d+/, ' 0')
          }));
          return result.filter(function (j) {
            return array.indexOf(j) === -1
          })
        }
        return result.concat(array)
      }
    }

    throw new error('Unknown browser query `' + selection + '`')
  }, [])
}

/**
 * Return array of browsers by selection queries.
 *
 * @param {(string|string[])} [queries=browserslist.defaults] Browser queries.
 * @param {object} opts Options.
 * @param {string} [opts.path="."] Path to processed file.
 *                                 It will be used to find config files.
 * @param {string} [opts.env="development"] Processing environment.
 *                                          It will be used to take right
 *                                          queries from config file.
 * @param {string} [opts.config] Path to config file with queries.
 * @param {object} [opts.stats] Custom browser usage statistics
 *                              for "> 1% in my stats" query.
 * @return {string[]} Array with browser names in Can I Use.
 *
 * @example
 * browserslist('IE >= 10, IE 8') //=> ['ie 11', 'ie 10', 'ie 8']
 */
function browserslist (queries, opts) {
  if (typeof opts === 'undefined') opts = { };

  if (!opts.hasOwnProperty('path')) {
    opts.path = path__default.resolve ? path__default.resolve('.') : '.';
  }

  if (typeof queries === 'undefined' || queries === null) {
    var config = node.loadConfig(opts);
    if (config) {
      queries = config;
    } else {
      queries = browserslist.defaults;
    }
  }

  if (typeof queries === 'string') {
    queries = queries.split(/,\s*/);
  }

  if (!Array.isArray(queries)) {
    throw new error(
      'Browser queries must be an array. Got ' + typeof queries + '.')
  }

  var context = { dangerousExtend: opts.dangerousExtend };

  var stats = node.getStat(opts);
  if (stats) {
    if ('dataByBrowser' in stats) {
      stats = stats.dataByBrowser;
    }
    context.customUsage = { };
    for (var browser in stats) {
      fillUsage(context.customUsage, browser, stats[browser]);
    }
  }

  var result = resolve$1(queries, context).map(function (i) {
    var parts = i.split(' ');
    var name = parts[0];
    var version = parts[1];
    if (version === '0') {
      return name + ' ' + byName(name).versions[0]
    } else {
      return i
    }
  }).sort(function (name1, name2) {
    name1 = name1.split(' ');
    name2 = name2.split(' ');
    if (name1[0] === name2[0]) {
      if (FLOAT_RANGE.test(name1[1]) && FLOAT_RANGE.test(name2[1])) {
        return parseFloat(name2[1]) - parseFloat(name1[1])
      } else {
        return compareStrings(name2[1], name1[1])
      }
    } else {
      return compareStrings(name1[0], name2[0])
    }
  });

  return uniq(result)
}

// Will be filled by Can I Use data below
browserslist.data = { };
browserslist.usage = {
  global: { },
  custom: null
};

// Default browsers query
browserslist.defaults = [
  '> 1%',
  'last 2 versions',
  'Firefox ESR'
];

// Browser names aliases
browserslist.aliases = {
  fx: 'firefox',
  ff: 'firefox',
  ios: 'ios_saf',
  explorer: 'ie',
  blackberry: 'bb',
  explorermobile: 'ie_mob',
  operamini: 'op_mini',
  operamobile: 'op_mob',
  chromeandroid: 'and_chr',
  firefoxandroid: 'and_ff',
  ucandroid: 'and_uc',
  qqandroid: 'and_qq'
};

// Aliases to work with joined versions like `ios_saf 7.0-7.1`
browserslist.versionAliases = { };

browserslist.clearCaches = node.clearCaches;
browserslist.parseConfig = node.parseConfig;
browserslist.readConfig = node.readConfig;
browserslist.findConfig = node.findConfig;

/**
 * Return browsers market coverage.
 *
 * @param {string[]} browsers Browsers names in Can I Use.
 * @param {string} [country="global"] Which country statistics should be used.
 *
 * @return {number} Total market coverage for all selected browsers.
 *
 * @example
 * browserslist.coverage(browserslist('> 1% in US'), 'US') //=> 83.1
 */
browserslist.coverage = function (browsers, country) {
  if (country && country !== 'global') {
    if (country.length > 2) {
      country = country.toLowerCase();
    } else {
      country = country.toUpperCase();
    }
    loadCountryStatistics(country);
  } else {
    country = 'global';
  }

  return browsers.reduce(function (all, i) {
    var usage = browserslist.usage[country][i];
    if (usage === undefined) {
      usage = browserslist.usage[country][i.replace(/ [\d.]+$/, ' 0')];
    }
    return all + (usage || 0)
  }, 0)
};

var QUERIES = [
  {
    regexp: /^last\s+(\d+)\s+major versions?$/i,
    select: function (context, versions$$1) {
      return Object.keys(agents).reduce(function (selected, name) {
        var data = byName(name);
        if (!data) return selected
        var array = getMajorVersions(data.released, versions$$1);

        array = array.map(nameMapper(data.name));
        return selected.concat(array)
      }, [])
    }
  },
  {
    regexp: /^last\s+(\d+)\s+versions?$/i,
    select: function (context, versions$$1) {
      return Object.keys(agents).reduce(function (selected, name) {
        var data = byName(name);
        if (!data) return selected
        var array = data.released.slice(-versions$$1);

        array = array.map(nameMapper(data.name));
        return selected.concat(array)
      }, [])
    }
  },
  {
    regexp: /^last\s+(\d+)\s+electron\s+major versions?$/i,
    select: function (context, versions$$1) {
      var validVersions = getMajorVersions(Object.keys(versions).reverse(), versions$$1);
      return validVersions.map(function (i) {
        return 'chrome ' + versions[i]
      })
    }
  },
  {
    regexp: /^last\s+(\d+)\s+(\w+)\s+major versions?$/i,
    select: function (context, versions$$1, name) {
      var data = checkName(name);
      var validVersions = getMajorVersions(data.released, versions$$1);
      return validVersions.map(nameMapper(data.name))
    }
  },
  {
    regexp: /^last\s+(\d+)\s+electron\s+versions?$/i,
    select: function (context, versions$$1) {
      return Object.keys(versions).reverse().slice(-versions$$1).map(function (i) {
        return 'chrome ' + versions[i]
      })
    }
  },
  {
    regexp: /^last\s+(\d+)\s+(\w+)\s+versions?$/i,
    select: function (context, versions$$1, name) {
      var data = checkName(name);
      return data.released.slice(-versions$$1).map(nameMapper(data.name))
    }
  },
  {
    regexp: /^unreleased\s+versions$/i,
    select: function () {
      return Object.keys(agents).reduce(function (selected, name) {
        var data = byName(name);
        if (!data) return selected
        var array = data.versions.filter(function (v) {
          return data.released.indexOf(v) === -1
        });

        array = array.map(nameMapper(data.name));
        return selected.concat(array)
      }, [])
    }
  },
  {
    regexp: /^unreleased\s+electron\s+versions?$/i,
    select: function () {
      return []
    }
  },
  {
    regexp: /^unreleased\s+(\w+)\s+versions?$/i,
    select: function (context, name) {
      var data = checkName(name);
      return data.versions.filter(function (v) {
        return data.released.indexOf(v) === -1
      }).map(nameMapper(data.name))
    }
  },
  {
    regexp: /^last\s+(\d+)\s+years?$/i,
    select: function (context, years) {
      var date = new Date();
      var since = date.setFullYear(date.getFullYear() - years) / 1000;

      return filterByYear(since)
    }
  },
  {
    regexp: /^since (\d+)(?:-(\d+))?(?:-(\d+))?$/i,
    select: function (context, year, month, date) {
      year = parseInt(year);
      month = parseInt(month || '01') - 1;
      date = parseInt(date || '01');
      var since = Date.UTC(year, month, date, 0, 0, 0) / 1000;

      return filterByYear(since)
    }
  },
  {
    regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%$/,
    select: function (context, sign, popularity) {
      popularity = parseFloat(popularity);
      var usage = browserslist.usage.global;

      return Object.keys(usage).reduce(function (result, version) {
        if (sign === '>') {
          if (usage[version] > popularity) {
            result.push(version);
          }
        } else if (sign === '<') {
          if (usage[version] < popularity) {
            result.push(version);
          }
        } else if (sign === '<=') {
          if (usage[version] <= popularity) {
            result.push(version);
          }
        } else if (usage[version] >= popularity) {
          result.push(version);
        }
        return result
      }, [])
    }
  },
  {
    regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%\s+in\s+my\s+stats$/,
    select: function (context, sign, popularity) {
      popularity = parseFloat(popularity);

      if (!context.customUsage) {
        throw new error('Custom usage statistics was not provided')
      }

      var usage = context.customUsage;

      return Object.keys(usage).reduce(function (result, version) {
        if (sign === '>') {
          if (usage[version] > popularity) {
            result.push(version);
          }
        } else if (sign === '<') {
          if (usage[version] < popularity) {
            result.push(version);
          }
        } else if (sign === '<=') {
          if (usage[version] <= popularity) {
            result.push(version);
          }
        } else if (usage[version] >= popularity) {
          result.push(version);
        }
        return result
      }, [])
    }
  },
  {
    regexp: /^(>=?|<=?)\s*(\d*\.?\d+)%\s+in\s+((alt-)?\w\w)$/,
    select: function (context, sign, popularity, place) {
      popularity = parseFloat(popularity);

      if (place.length === 2) {
        place = place.toUpperCase();
      } else {
        place = place.toLowerCase();
      }

      loadCountryStatistics(place);
      var usage = browserslist.usage[place];

      return Object.keys(usage).reduce(function (result, version) {
        if (sign === '>') {
          if (usage[version] > popularity) {
            result.push(version);
          }
        } else if (sign === '<') {
          if (usage[version] < popularity) {
            result.push(version);
          }
        } else if (sign === '<=') {
          if (usage[version] <= popularity) {
            result.push(version);
          }
        } else if (usage[version] >= popularity) {
          result.push(version);
        }
        return result
      }, [])
    }
  },
  {
    regexp: /^electron\s+([\d.]+)\s*-\s*([\d.]+)$/i,
    select: function (context, from, to) {
      if (!versions[from]) {
        throw new error('Unknown version ' + from + ' of electron')
      }
      if (!versions[to]) {
        throw new error('Unknown version ' + to + ' of electron')
      }

      from = parseFloat(from);
      to = parseFloat(to);

      return Object.keys(versions).filter(function (i) {
        var parsed = parseFloat(i);
        return parsed >= from && parsed <= to
      }).map(function (i) {
        return 'chrome ' + versions[i]
      })
    }
  },
  {
    regexp: /^(\w+)\s+([\d.]+)\s*-\s*([\d.]+)$/i,
    select: function (context, name, from, to) {
      var data = checkName(name);
      from = parseFloat(normalizeVersion(data, from) || from);
      to = parseFloat(normalizeVersion(data, to) || to);

      function filter (v) {
        var parsed = parseFloat(v);
        return parsed >= from && parsed <= to
      }

      return data.released.filter(filter).map(nameMapper(data.name))
    }
  },
  {
    regexp: /^electron\s*(>=?|<=?)\s*([\d.]+)$/i,
    select: function (context, sign, version) {
      return Object.keys(versions)
        .filter(generateFilter(sign, version))
        .map(function (i) {
          return 'chrome ' + versions[i]
        })
    }
  },
  {
    regexp: /^(\w+)\s*(>=?|<=?)\s*([\d.]+)$/,
    select: function (context, name, sign, version) {
      var data = checkName(name);
      var alias = browserslist.versionAliases[data.name][version];
      if (alias) {
        version = alias;
      }
      return data.released
        .filter(generateFilter(sign, version))
        .map(function (v) {
          return data.name + ' ' + v
        })
    }
  },
  {
    regexp: /^(firefox|ff|fx)\s+esr$/i,
    select: function () {
      return ['firefox 52']
    }
  },
  {
    regexp: /(operamini|op_mini)\s+all/i,
    select: function () {
      return ['op_mini all']
    }
  },
  {
    regexp: /^electron\s+([\d.]+)$/i,
    select: function (context, version) {
      var chrome = versions[version];
      if (!chrome) {
        throw new error(
          'Unknown version ' + version + ' of electron')
      }
      return ['chrome ' + chrome]
    }
  },
  {
    regexp: /^(\w+)\s+(tp|[\d.]+)$/i,
    select: function (context, name, version) {
      if (/^tp$/i.test(version)) version = 'TP';
      var data = checkName(name);
      var alias = normalizeVersion(data, version);
      if (alias) {
        version = alias;
      } else {
        if (version.indexOf('.') === -1) {
          alias = version + '.0';
        } else if (/\.0$/.test(version)) {
          alias = version.replace(/\.0$/, '');
        }
        alias = normalizeVersion(data, alias);
        if (alias) {
          version = alias;
        } else {
          throw new error(
            'Unknown version ' + version + ' of ' + name)
        }
      }
      return [data.name + ' ' + version]
    }
  },
  {
    regexp: /^extends (.+)$/i,
    select: function (context, name) {
      return resolve$1(node.loadQueries(context, name), context)
    }
  },
  {
    regexp: /^defaults$/i,
    select: function () {
      return browserslist(browserslist.defaults)
    }
  }
];

// Get and convert Can I Use data

(function () {
  for (var name in agents) {
    var browser = agents[name];
    browserslist.data[name] = {
      name: name,
      versions: normalize(agents[name].versions),
      released: normalize(agents[name].versions.slice(0, -3)),
      releaseDate: agents[name].release_date
    };
    fillUsage(browserslist.usage.global, name, browser.usage_global);

    browserslist.versionAliases[name] = { };
    for (var i = 0; i < browser.versions.length; i++) {
      var full = browser.versions[i];
      if (!full) continue

      if (full.indexOf('-') !== -1) {
        var interval = full.split('-');
        for (var j = 0; j < interval.length; j++) {
          browserslist.versionAliases[name][interval[j]] = full;
        }
      }
    }
  }
}());

var _browserslist_2_11_3_browserslist = browserslist;

var list_1 = createCommonjsModule(function (module, exports) {
'use strict';

exports.__esModule = true;
/**
 * Contains helpers for safely splitting lists of CSS values,
 * preserving parentheses and quotes.
 *
 * @example
 * const list = postcss.list;
 *
 * @namespace list
 */
var list = {
    split: function split(string, separators, last) {
        var array = [];
        var current = '';
        var split = false;

        var func = 0;
        var quote = false;
        var escape = false;

        for (var i = 0; i < string.length; i++) {
            var letter = string[i];

            if (quote) {
                if (escape) {
                    escape = false;
                } else if (letter === '\\') {
                    escape = true;
                } else if (letter === quote) {
                    quote = false;
                }
            } else if (letter === '"' || letter === '\'') {
                quote = letter;
            } else if (letter === '(') {
                func += 1;
            } else if (letter === ')') {
                if (func > 0) func -= 1;
            } else if (func === 0) {
                if (separators.indexOf(letter) !== -1) split = true;
            }

            if (split) {
                if (current !== '') array.push(current.trim());
                current = '';
                split = false;
            } else {
                current += letter;
            }
        }

        if (last || current !== '') array.push(current.trim());
        return array;
    },


    /**
     * Safely splits space-separated values (such as those for `background`,
     * `border-radius`, and other shorthand properties).
     *
     * @param {string} string - space-separated values
     *
     * @return {string[]} split values
     *
     * @example
     * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']
     */
    space: function space(string) {
        var spaces = [' ', '\n', '\t'];
        return list.split(string, spaces);
    },


    /**
     * Safely splits comma-separated values (such as those for `transition-*`
     * and `background` properties).
     *
     * @param {string} string - comma-separated values
     *
     * @return {string[]} split values
     *
     * @example
     * postcss.list.comma('black, linear-gradient(white, black)')
     * //=> ['black', 'linear-gradient(white, black)']
     */
    comma: function comma(string) {
        var comma = ',';
        return list.split(string, [comma], true);
    }
};

exports.default = list;
module.exports = exports['default'];

});

unwrapExports(list_1);

var utils = {

    /**
     * Throw special error, to tell beniary,
     * that this error is from Autoprefixer.
     */
    error: function error(text) {
        var err = new Error(text);
        err.autoprefixer = true;
        throw err;
    },


    /**
     * Return array, that doesn’t contain duplicates.
     */
    uniq: function uniq(array) {
        var filtered = [];
        for (var _iterator = array, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var i = _ref;

            if (filtered.indexOf(i) === -1) {
                filtered.push(i);
            }
        }
        return filtered;
    },


    /**
     * Return "-webkit-" on "-webkit- old"
     */
    removeNote: function removeNote(string) {
        if (string.indexOf(' ') === -1) {
            return string;
        }

        return string.split(' ')[0];
    },


    /**
     * Escape RegExp symbols
     */
    escapeRegexp: function escapeRegexp(string) {
        return string.replace(/[.?*+\^\$\[\]\\(){}|\-]/g, '\\$&');
    },


    /**
     * Return regexp to check, that CSS string contain word
     */
    regexp: function regexp(word) {
        var escape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (escape) {
            word = this.escapeRegexp(word);
        }
        return new RegExp('(^|[\\s,(])(' + word + '($|[\\s(,]))', 'gi');
    },


    /**
     * Change comma list
     */
    editList: function editList(value, callback) {
        var origin = list_1.comma(value);
        var changed = callback(origin, []);

        if (origin === changed) {
            return value;
        }

        var join = value.match(/,\s*/);
        join = join ? join[0] : ', ';
        return changed.join(join);
    }
};

var statuses = createCommonjsModule(function (module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    1: "ls", // WHATWG Living Standard
    2: "rec", // W3C Recommendation
    3: "pr", // W3C Proposed Recommendation
    4: "cr", // W3C Candidate Recommendation
    5: "wd", // W3C Working Draft
    6: "other", // Non-W3C, but reputable
    7: "unoff" };
});

unwrapExports(statuses);

var supported = createCommonjsModule(function (module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    y: 1 << 0,
    n: 1 << 1,
    a: 1 << 2,
    p: 1 << 3,
    u: 1 << 4,
    x: 1 << 5,
    d: 1 << 6
};
});

unwrapExports(supported);

var feature = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = unpackFeature;



var _statuses2 = _interopRequireDefault(statuses);



var _supported2 = _interopRequireDefault(supported);





function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function unpackSupport(cipher) {
    // bit flags
    var stats = Object.keys(_supported2.default).reduce(function (list, support) {
        if (cipher & _supported2.default[support]) list.push(support);
        return list;
    }, []);

    // notes
    var notes = cipher >> 7;
    var notesArray = [];
    while (notes) {
        var note = Math.floor(Math.log2(notes)) + 1;
        notesArray.unshift('#' + note);
        notes -= Math.pow(2, note - 1);
    }

    return stats.concat(notesArray).join(' ');
}

function unpackFeature(packed) {
    var unpacked = { status: _statuses2.default[packed.B], title: packed.C };
    unpacked.stats = Object.keys(packed.A).reduce(function (browserStats, key) {
        var browser = packed.A[key];
        browserStats[browsers_1.browsers[key]] = Object.keys(browser).reduce(function (stats, support) {
            var packedVersions = browser[support].split(' ');
            var unpacked = unpackSupport(support);
            packedVersions.forEach(function (v) {
                return stats[browserVersions_1.browserVersions[v]] = unpacked;
            });
            return stats;
        }, {});
        return browserStats;
    }, {});
    return unpacked;
}
});

unwrapExports(feature);

var aac={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB","132":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E","16":"A B"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"132":"x"},N:{"1":"A","2":"B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"AAC audio file format"};

var ac3Ec3={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB","132":"dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C","132":"A"},K:{"2":"9 A B D L g","132":"4"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"132":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"AC-3 (Dolby Digital) and EC-3 (Dolby Digital Plus) codecs"};

var addeventlistener={A:{A:{"1":"E A B","130":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","257":"WB AB F J K UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"EventTarget.addEventListener()"};

var alternateStylesheet={A:{A:{"1":"G E A B","2":"K C YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D QB RB SB TB g VB","16":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"16":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"16":"DB"},M:{"16":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"16":"F J rB"},Q:{"2":"sB"},R:{"16":"tB"}},B:1,C:"Alternate stylesheet"};

var ambientLight={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB","132":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","322":"5 6 7 8 BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"Ambient Light API"};

var apng={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB"},D:{"1":"6 7 8 BB IB DB FB ZB GB","2":"0 1 3 5 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},E:{"1":"G E A B MB NB g PB","2":"F J K C HB CB JB KB LB"},F:{"1":"4 9 B D p q r s t u v QB RB SB TB g VB","2":"E I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB EB aB bB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"4 9 A B D g","2":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Animated PNG (APNG)"};

var arrowFunctions={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB"},D:{"1":"0 1 3 5 6 7 8 o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"Arrow functions"};

var asmjs={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","322":"D"},C:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W","132":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","132":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","132":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","132":"L"},L:{"132":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","132":"J rB"},Q:{"132":"sB"},R:{"132":"tB"}},B:6,C:"asm.js"};

var asyncFunctions={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w","194":"Z"},C:{"1":"0 1 3 5 6 7 8 v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB"},D:{"1":"3 5 6 7 8 z x BB IB DB FB ZB GB","2":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"F J"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"Async functions"};

var atobBtoa={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","2":"E QB RB","16":"SB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","16":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Base64 encoding and decoding"};

var audioApi={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T UB OB"},D:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E","33":"A B D w Z I M H N O P Q R S T U V W X Y y a b c"},E:{"2":"F J HB CB JB","33":"K C G E A B KB LB MB NB g PB"},F:{"1":"R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q"},G:{"2":"2 CB XB EB","33":"G aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Web Audio API"};

var audio={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","132":"F J K C G E A B D w Z I M H N O UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E","4":"QB RB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","2":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Audio element"};

var audiotracks={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b UB OB","194":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J K HB CB JB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"1":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"Audio Tracks"};

var autofocus={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Autofocus attribute"};

var auxclick={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","129":"0 1 3 5 6 7 8 z x"},D:{"1":"3 5 6 7 8 z x BB IB DB FB ZB GB","2":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","16":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Auxclick"};

var backgroundAttachment={A:{A:{"1":"E A B","132":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","132":"WB AB F J K C G E A B D w Z I M H N O P Q R S T UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","132":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","132":"E QB RB"},G:{"2":"2 CB XB","772":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"AB F BB kB lB mB oB pB","132":"2 nB"},J:{"260":"C A"},K:{"1":"4 9 B D L g","132":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"2":"F","1028":"J rB"},Q:{"1":"sB"},R:{"1028":"tB"}},B:4,C:"CSS background-attachment"};

var backgroundImgOpts={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB","36":"OB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","516":"F J K C G E A B D w Z"},E:{"1":"C G E A B LB MB NB g PB","772":"F J K HB CB JB KB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB","36":"RB"},G:{"1":"G bB cB dB eB fB gB hB iB","4":"2 CB XB aB","516":"EB"},H:{"132":"jB"},I:{"1":"BB oB pB","36":"kB","516":"2 AB F nB","548":"lB mB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 Background-image options"};

var backgroundPositionXY={A:{A:{"1":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"background-position-x & background-position-y"};

var backgroundRepeatRoundSpace={A:{A:{"1":"A B","2":"K C G YB","132":"E"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r UB OB"},D:{"1":"0 1 3 5 6 7 8 b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"4 9 B D O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E I M H N QB RB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS background-repeat round and space"};

var backgroundSync={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M","16":"H"},C:{"2":"0 1 3 5 6 7 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","16":"8"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"2":"tB"}},B:7,C:"Background Sync API"};

var batteryStatus={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"m n o p q r s t u","2":"0 1 3 5 6 7 8 WB AB F J K C G E v z x UB OB","132":"M H N O P Q R S T U V W X Y y a b c d e f L h i j k l","164":"A B D w Z I"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f","66":"L"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:4,C:"Battery Status API"};

var beacon={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y UB OB"},D:{"1":"0 1 3 5 6 7 8 i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U QB RB SB TB g VB"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Beacon API"};

var beforeafterprint={A:{A:{"1":"K C G E A B","16":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J UB OB"},D:{"1":"IB DB FB ZB GB","2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"16":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"2":"J rB","16":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:2,C:"Printing Events"};

var blobbuilder={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J UB OB","36":"K C G E A B D"},D:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C","36":"G E A B D w Z I M H N O"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"2 CB XB EB"},H:{"2":"jB"},I:{"1":"BB","2":"kB lB mB","36":"2 AB F nB oB pB"},J:{"1":"A","2":"C"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Blob constructing"};

var bloburls={A:{A:{"1":"A B","2":"K C G E YB"},B:{"129":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C","33":"G E A B D w Z I M H N O P Q R"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB JB","33":"K"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB","33":"aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"AB kB lB mB","33":"2 F nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Blob URLs"};

var borderImage={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"Z I M H","129":"D w"},C:{"1":"0 1 3 5 6 7 8 t u v z x","2":"WB AB","260":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s","804":"F J K C G E A B D w Z UB OB"},D:{"260":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB","388":"y a b c d e f L h i j k l m n o p q r s t","1412":"I M H N O P Q R S T U V W X Y","1956":"F J K C G E A B D w Z"},E:{"129":"A B MB NB g PB","1412":"K C G E KB LB","1956":"F J HB CB JB"},F:{"2":"E QB RB","260":"h i j k l m n o p q r s t u v","388":"I M H N O P Q R S T U V W X Y y a b c d e f L","1796":"SB TB","1828":"4 9 B D g VB"},G:{"129":"eB fB gB hB iB","1412":"G aB bB cB dB","1956":"2 CB XB EB"},H:{"1828":"jB"},I:{"388":"BB oB pB","1956":"2 AB F kB lB mB nB"},J:{"1412":"A","1924":"C"},K:{"2":"A","388":"L","1828":"4 9 B D g"},L:{"260":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"388":"qB"},P:{"260":"J rB","388":"F"},Q:{"260":"sB"},R:{"260":"tB"}},B:4,C:"CSS3 Border images"};

var borderRadius={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 t u v z x","257":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s","289":"AB UB OB","292":"WB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"F"},E:{"1":"J C G E A B LB MB NB g PB","33":"F HB CB","129":"K JB KB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","33":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB lB mB nB oB pB","33":"kB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 Border-radius (rounded corners)"};

var broadcastchannel={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L UB OB"},D:{"1":"1 3 5 6 7 8 z x BB IB DB FB ZB GB","2":"0 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"BroadcastChannel"};

var brotli={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w Z"},C:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m UB OB"},D:{"1":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r","194":"s","257":"t"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","513":"B g PB"},F:{"1":"h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB","194":"f L"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","257":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"2":"tB"}},B:6,C:"Brotli Accept-Encoding/Content-Encoding"};

var calc={A:{A:{"1":"A B","2":"K C G YB","260":"E"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","33":"F J K C G E A B D w Z I"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N","33":"O P Q R S T U"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB JB","33":"K"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB","33":"aB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB","132":"oB pB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"calc() as CSS unit value"};

var canvasBlending={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O UB OB"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J K HB CB JB"},F:{"1":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Canvas blend modes"};

var canvasText={A:{A:{"1":"E A B","2":"YB","8":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","8":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","8":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","8":"E QB RB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","8":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Text API for Canvas"};

var canvas={A:{A:{"1":"E A B","2":"YB","8":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","132":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","132":"HB CB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"260":"jB"},I:{"1":"2 AB F BB nB oB pB","132":"kB lB mB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Canvas (basic support)"};

var chUnit={A:{A:{"2":"K C G YB","132":"E A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"ch (character) unit"};

var chacha20Poly1305={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b","129":"c d e f L h i j k l m n o p q r"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB","16":"pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"ChaCha20-Poly1305 cipher suites for TLS"};

var channelMessaging={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U UB OB","194":"V W X Y y a b c d e f L h i j"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","2":"E QB RB","16":"SB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Channel messaging"};

var childnodeRemove={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","16":"D"},C:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R UB OB"},D:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB JB","16":"K"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"ChildNode.remove()"};

var classlist={A:{A:{"8":"K C G E YB","900":"A","1924":"B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","8":"WB AB UB","516":"T U","772":"F J K C G E A B D w Z I M H N O P Q R S OB"},D:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","8":"F J K C","516":"T U V W","772":"S","900":"G E A B D w Z I M H N O P Q R"},E:{"1":"C G E A B LB MB NB g PB","8":"F J HB CB","900":"K JB KB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","8":"E B QB RB SB TB g","900":"4 9 D VB"},G:{"1":"G bB cB dB eB fB gB hB iB","8":"2 CB XB","900":"EB aB"},H:{"900":"jB"},I:{"1":"BB oB pB","8":"kB lB mB","900":"2 AB F nB"},J:{"1":"A","900":"C"},K:{"1":"L","8":"A B","900":"4 9 D g"},L:{"1":"DB"},M:{"1":"x"},N:{"900":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"classList (DOMTokenList)"};

var clientHintsDprWidthViewport={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"Client Hints: DPR, Width, Viewport-Width"};

var clipboard={A:{A:{"2436":"K C G E A B YB"},B:{"260":"H","2436":"D w Z I M"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB","772":"R S T U V W X Y y a b c d e f L h i j","4100":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x"},D:{"2":"F J K C G E A B D","2564":"w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l","10244":"0 1 3 5 6 7 8 m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"16":"HB CB","2308":"A B NB g PB","2820":"F J K C G E JB KB LB MB"},F:{"2":"9 E B QB RB SB TB g VB","16":"D","516":"4","2564":"I M H N O P Q R S T U V W X Y","10244":"y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 CB XB","2820":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","2308":"BB oB pB"},J:{"2":"C","2308":"A"},K:{"2":"9 A B D g","16":"4","3076":"L"},L:{"2052":"DB"},M:{"1028":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2052":"J rB","2308":"F"},Q:{"10244":"sB"},R:{"2052":"tB"}},B:5,C:"Clipboard API"};

var comparedocumentposition={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","16":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z","132":"I M H N O P Q R S T U V W X Y"},E:{"1":"A B NB g PB","16":"F J K HB CB","132":"C G E KB LB MB","260":"JB"},F:{"1":"4 D H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","16":"9 E B QB RB SB TB g","132":"I M"},G:{"1":"fB gB hB iB","16":"CB","132":"2 G XB EB aB bB cB dB eB"},H:{"1":"jB"},I:{"1":"BB oB pB","16":"kB lB","132":"2 AB F mB nB"},J:{"132":"C A"},K:{"1":"4 D L","16":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Node.compareDocumentPosition()"};

var consoleBasic={A:{A:{"1":"A B","2":"K C YB","132":"G E"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E QB RB SB TB"},G:{"1":"2 CB XB EB","513":"G aB bB cB dB eB fB gB hB iB"},H:{"4097":"jB"},I:{"1025":"2 AB F BB kB lB mB nB oB pB"},J:{"258":"C A"},K:{"2":"A","258":"4 9 B D L g"},L:{"1025":"DB"},M:{"2049":"x"},N:{"258":"A B"},O:{"258":"qB"},P:{"1025":"F J rB"},Q:{"1":"sB"},R:{"1025":"tB"}},B:1,C:"Basic console logging functions"};

var consoleTime={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E QB RB SB TB","16":"B"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"L","16":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"console.time and console.timeEnd"};

var _const={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","132":"WB AB F J K C G E A B D UB OB","260":"w Z I M H N O P Q R S T U V W X Y y a b c d e"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","260":"F J K C G E A B D w Z I M H N O P","772":"Q R S T U V W X Y y a b c d e f L h i j","1028":"k l m n o p q r"},E:{"1":"A B NB g PB","260":"F J HB CB","772":"K C G E JB KB LB MB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"E QB","132":"9 B RB SB TB g","644":"4 D VB","772":"I M H N O P Q R S T U V W","1028":"X Y y a b c d e"},G:{"1":"fB gB hB iB","260":"2 CB XB","772":"G EB aB bB cB dB eB"},H:{"644":"jB"},I:{"1":"BB","16":"kB lB","260":"mB","772":"2 AB F nB oB pB"},J:{"772":"C A"},K:{"1":"L","132":"9 A B g","644":"4 D"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"J rB","1028":"F"},Q:{"772":"sB"},R:{"1028":"tB"}},B:6,C:"const"};

var constraintValidation={A:{A:{"2":"K C G E YB","900":"A B"},B:{"1":"H","388":"Z I M","900":"D w"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB UB OB","260":"s t","388":"Y y a b c d e f L h i j k l m n o p q r","900":"F J K C G E A B D w Z I M H N O P Q R S T U V W X"},D:{"1":"0 1 3 5 6 7 8 j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z","388":"U V W X Y y a b c d e f L h i","900":"I M H N O P Q R S T"},E:{"1":"A B NB g PB","16":"F J HB CB","388":"G E LB MB","900":"K C JB KB"},F:{"1":"W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"9 E B QB RB SB TB g","388":"I M H N O P Q R S T U V","900":"4 D VB"},G:{"1":"fB gB hB iB","16":"2 CB XB","388":"G bB cB dB eB","900":"EB aB"},H:{"2":"jB"},I:{"1":"BB","16":"AB kB lB mB","388":"oB pB","900":"2 F nB"},J:{"16":"C","388":"A"},K:{"1":"L","16":"9 A B g","900":"4 D"},L:{"1":"DB"},M:{"1":"x"},N:{"900":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"388":"sB"},R:{"1":"tB"}},B:1,C:"Constraint Validation API"};

var contenteditable={A:{A:{"1":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB","4":"AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"contenteditable attribute (basic support)"};

var contentsecuritypolicy={A:{A:{"2":"K C G E YB","132":"A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","129":"F J K C G E A B D w Z I M H N O P Q R"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w","257":"Z I M H N O P Q R S T"},E:{"1":"C G E A B LB MB NB g PB","2":"F J HB CB","257":"K KB","260":"JB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB","257":"aB","260":"EB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C","257":"A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"257":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Content Security Policy 1.0"};

var contentsecuritypolicy2={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w Z"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y UB OB","132":"a b c d","260":"e","516":"f L h i j k l m n","8196":"0 1 3 5 6 7 8 o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e","1028":"f L h","2052":"i"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R QB RB SB TB g VB","1028":"S T U","2052":"V"},G:{"1":"eB fB gB hB iB","2":"2 G CB XB EB aB bB cB dB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"4100":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Content Security Policy Level 2"};

var cors={A:{A:{"1":"B","2":"K C YB","132":"A","260":"G E"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D"},E:{"2":"HB CB","513":"K C G E A B KB LB MB NB g PB","644":"F J JB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB"},G:{"513":"G aB bB cB dB eB fB gB hB iB","644":"2 CB XB EB"},H:{"2":"jB"},I:{"1":"BB oB pB","132":"2 AB F kB lB mB nB"},J:{"1":"A","132":"C"},K:{"1":"4 D L","2":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","132":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Cross-Origin Resource Sharing"};

var credentialManagement={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"5 6 7 8 x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q","66":"r s t","129":"0 1 3 u v z"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"Credential Management API"};

var cryptography={A:{A:{"2":"YB","8":"K C G E A","164":"B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x","8":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a UB OB","322":"b c"},D:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","8":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f"},E:{"1":"B g PB","8":"F J K C HB CB JB KB","545":"G E A LB MB NB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","8":"4 9 E B D I M H N O P Q R S QB RB SB TB g VB"},G:{"1":"hB iB","8":"2 CB XB EB aB bB","545":"G cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB","8":"2 AB F kB lB mB nB oB pB"},J:{"8":"C A"},K:{"1":"L","8":"4 9 A B D g"},L:{"1":"DB"},M:{"8":"x"},N:{"8":"A","164":"B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Web Cryptography"};

var cssAll={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V UB OB"},D:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f"},E:{"1":"A B MB NB g PB","2":"F J K C G E HB CB JB KB LB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S QB RB SB TB g VB"},G:{"1":"eB fB gB hB iB","2":"2 G CB XB EB aB bB cB dB"},H:{"2":"jB"},I:{"1":"BB pB","2":"2 AB F kB lB mB nB oB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS all property"};

var cssAnimation={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F UB OB","33":"J K C G E A B D w Z I"},D:{"1":"0 1 3 5 6 7 8 m n o p q r s t u v z x BB IB DB FB ZB GB","33":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l"},E:{"1":"E A B MB NB g PB","2":"HB CB","33":"K C G JB KB LB","292":"F J"},F:{"1":"4 y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB","33":"D I M H N O P Q R S T U V W X Y"},G:{"1":"dB eB fB gB hB iB","33":"G aB bB cB","164":"2 CB XB EB"},H:{"2":"jB"},I:{"1":"BB","33":"2 F nB oB pB","164":"AB kB lB mB"},J:{"33":"C A"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"33":"sB"},R:{"1":"tB"}},B:5,C:"CSS Animation"};

var cssAnyLink={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 t u v z x","16":"WB AB F J K C G E A B D w Z I M H N O P UB OB","33":"Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s"},D:{"16":"F J K C G E A B D w Z I M H N O P Q R S","33":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"16":"F J K HB CB JB","33":"C G E A B KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"16":"2 CB XB EB","33":"G aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"16":"2 AB F kB lB mB nB oB pB","33":"BB"},J:{"16":"C A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"33":"x"},N:{"2":"A B"},O:{"16":"qB"},P:{"16":"F","33":"J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:5,C:"CSS :any-link selector"};

var cssAppearance={A:{A:{"2":"K C G E A B YB"},B:{"388":"D w Z I M H"},C:{"164":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x","676":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d UB OB"},D:{"164":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"164":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","164":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"164":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"164":"2 AB F BB kB lB mB nB oB pB"},J:{"164":"C A"},K:{"2":"4 9 A B D g","164":"L"},L:{"164":"DB"},M:{"164":"x"},N:{"2":"A","388":"B"},O:{"164":"qB"},P:{"164":"F J rB"},Q:{"164":"sB"},R:{"164":"tB"}},B:5,C:"CSS Appearance"};

var cssApplyRule={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z","16":"I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","194":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L QB RB SB TB g VB","194":"h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","194":"L"},L:{"194":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","194":"J rB"},Q:{"2":"sB"},R:{"194":"tB"}},B:7,C:"CSS @apply rule"};

var cssAtCounterStyle={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b UB OB","132":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"132":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS Counter Styles"};

var cssBackdropFilter={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p","194":"0 1 3 5 6 7 8 q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G HB CB JB KB LB","33":"E A B MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c QB RB SB TB g VB","194":"d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB","33":"dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","194":"L"},L:{"194":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","194":"J rB"},Q:{"194":"sB"},R:{"194":"tB"}},B:7,C:"CSS Backdrop Filter"};

var cssBackgroundOffsets={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D UB OB"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS background-position edge offsets"};

var cssBackgroundblendmode={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y UB OB"},D:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d","260":"p"},E:{"2":"F J K C HB CB JB KB","132":"G E A B LB MB NB g PB"},F:{"1":"R S T U V W X Y y a b d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q QB RB SB TB g VB","260":"c"},G:{"2":"2 CB XB EB aB bB","132":"G cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","260":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS background-blend-mode"};

var cssBoxdecorationbreak={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q","164":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K HB CB JB","164":"C G E A B KB LB MB NB g PB"},F:{"2":"E QB RB SB TB","129":"4 9 B D g VB","164":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 CB XB EB aB","164":"G bB cB dB eB fB gB hB iB"},H:{"132":"jB"},I:{"2":"2 AB F kB lB mB nB","164":"BB oB pB"},J:{"2":"C","164":"A"},K:{"2":"A","129":"4 9 B D g","164":"L"},L:{"164":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"164":"F J rB"},Q:{"164":"sB"},R:{"164":"tB"}},B:5,C:"CSS box-decoration-break"};

var cssBoxshadow={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","33":"UB OB"},D:{"1":"0 1 3 5 6 7 8 A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"F J K C G E"},E:{"1":"K C G E A B JB KB LB MB NB g PB","33":"J","164":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","33":"2 XB","164":"CB"},H:{"2":"jB"},I:{"1":"2 F BB nB oB pB","164":"AB kB lB mB"},J:{"1":"A","33":"C"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 Box-shadow"};

var cssCanvas={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB","16":"0 1 3 5 6 7 8 v z x"},D:{"2":"0 1 3 5 6 7 8 r s t u v z x BB IB DB FB ZB GB","33":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q"},E:{"2":"HB CB","33":"F J K C G E A B JB KB LB MB NB g PB"},F:{"2":"4 9 E B D e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d"},G:{"33":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"BB","33":"2 AB F kB lB mB nB oB pB"},J:{"33":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"J rB","33":"F"},Q:{"33":"sB"},R:{"2":"tB"}},B:7,C:"CSS Canvas Drawings"};

var cssCaretColor={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB"},D:{"1":"5 6 7 8 x BB IB DB FB ZB GB","2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB","16":"iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS caret-color"};

var cssCaseInsensitive={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Case-insensitive CSS attribute selectors"};

var cssClipPath={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"1 3 5 6 7 8 z x","2":"WB AB","132":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p UB OB","644":"0 q r s t u v"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S","260":"3 5 6 7 8 z x BB IB DB FB ZB GB","292":"0 1 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"2":"F J K HB CB JB KB","292":"C G E A B LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","260":"l m n o p q r s t u v","292":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k"},G:{"2":"2 CB XB EB aB","292":"G bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","260":"BB","292":"oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","292":"L"},L:{"260":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"292":"qB"},P:{"292":"F J rB"},Q:{"292":"sB"},R:{"260":"tB"}},B:4,C:"CSS clip-path property (for HTML)"};

var cssConicGradients={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","194":"6 7 8 BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o QB RB SB TB g VB","194":"p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"194":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS Conical Gradients"};

var cssContainment={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB","16":"0 1 3 5 6 7 8 v z x"},D:{"1":"0 1 3 5 6 7 8 v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","194":"u"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L QB RB SB TB g VB","194":"h i"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"F J"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS Containment"};

var cssCounters={A:{A:{"1":"G E A B","2":"K C YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS Counters"};

var cssCrispEdges={A:{A:{"2":"K YB","2340":"C G E A B"},B:{"2":"D w Z I M H"},C:{"2":"WB AB UB","545":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j","1025":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"A B NB g PB","2":"F J HB CB JB","164":"K","4644":"C G E KB LB MB"},F:{"2":"9 E B I M H N O P Q R S T U V W QB RB SB TB g","545":"4 D VB","1025":"X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"fB gB hB iB","2":"2 CB XB","4260":"EB aB","4644":"G bB cB dB eB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","1025":"BB"},J:{"2":"C","4260":"A"},K:{"2":"9 A B g","545":"4 D","1025":"L"},L:{"1025":"DB"},M:{"545":"x"},N:{"2340":"A B"},O:{"1":"qB"},P:{"1025":"F J rB"},Q:{"2":"sB"},R:{"1025":"tB"}},B:7,C:"Crisp edges/pixelated images"};

var cssCrossFade={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C G E A B D w Z I M","33":"0 1 3 5 6 7 8 H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"A B NB g PB","2":"F J HB CB","33":"K C G E JB KB LB MB"},F:{"2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"fB gB hB iB","2":"2 CB XB","33":"G EB aB bB cB dB eB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","33":"BB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"33":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:7,C:"CSS Cross-Fade Function"};

var cssDefaultPseudo={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","16":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z","132":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t"},E:{"1":"B NB g PB","16":"F J HB CB","132":"K C G E A JB KB LB MB"},F:{"1":"h i j k l m n o p q r s t u v","16":"9 E B QB RB SB TB g","132":"I M H N O P Q R S T U V W X Y y a b c d e f L","260":"4 D VB"},G:{"1":"gB hB iB","16":"2 CB XB EB aB","132":"G bB cB dB eB fB"},H:{"260":"jB"},I:{"1":"BB","16":"AB kB lB mB","132":"2 F nB oB pB"},J:{"16":"C","132":"A"},K:{"16":"9 A B D g","132":"L","260":"4"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"132":"qB"},P:{"1":"J rB","132":"F"},Q:{"1":"sB"},R:{"2":"tB"}},B:7,C:":default CSS pseudo-class"};

var cssDescendantGtgt={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB","16":"FB ZB GB"},E:{"1":"B","2":"F J K C G E A HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Explicit descendant combinator >>"};

var cssDeviceadaptation={A:{A:{"2":"K C G E YB","164":"A B"},B:{"164":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X","66":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i QB RB SB TB g VB","66":"j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"292":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"A L","292":"4 9 B D g"},L:{"2":"DB"},M:{"2":"x"},N:{"164":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"66":"sB"},R:{"2":"tB"}},B:5,C:"CSS Device Adaptation"};

var cssDirPseudo={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M UB OB","33":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:":dir() CSS pseudo-class"};

var cssDisplayContents={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f UB OB"},D:{"1":"FB ZB GB","2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","194":"5 6 7 8 BB IB DB"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u QB RB SB TB g VB"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS display: contents"};

var cssElementFunction={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"33":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","164":"WB AB UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"33":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS element() function"};

var cssExclusions={A:{A:{"2":"K C G E YB","33":"A B"},B:{"33":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"33":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS Exclusions Level 1"};

var cssFeaturequeries={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB"},D:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS Feature Queries"};

var cssFilterFunction={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"A B MB NB g PB","2":"F J K C G HB CB JB KB LB","33":"E"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB","33":"dB eB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS filter() function"};

var cssFilters={A:{A:{"2":"K C G E A B YB"},B:{"1028":"w Z I M H","1346":"D"},C:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB","196":"d","516":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c OB"},D:{"1":"0 1 3 5 6 7 8 z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H","33":"N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"1":"A B MB NB g PB","2":"F J HB CB JB","33":"K C G E KB LB"},F:{"1":"j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i"},G:{"1":"eB fB gB hB iB","2":"2 CB XB EB","33":"G aB bB cB dB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB","33":"oB pB"},J:{"2":"C","33":"A"},K:{"2":"4 9 A B D g","33":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:5,C:"CSS Filter Effects"};

var cssFirstLetter={A:{A:{"1":"E A B","16":"YB","516":"G","1540":"K C"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","132":"AB","260":"WB"},D:{"1":"0 1 3 5 6 7 8 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"J K C G","132":"F"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"J HB","132":"F CB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","16":"E QB","260":"9 B RB SB TB g"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 AB F BB nB oB pB","16":"kB lB","132":"mB"},J:{"1":"C A"},K:{"1":"4 D L","260":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"::first-letter CSS pseudo-element selector"};

var cssFirstLine={A:{A:{"1":"E A B","132":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS first-line pseudo-element"};

var cssFixed={A:{A:{"1":"C G E A B","2":"YB","8":"K"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB NB g PB","1025":"MB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB","132":"EB aB bB"},H:{"2":"jB"},I:{"1":"AB BB oB pB","260":"kB lB mB","513":"2 F nB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS position:fixed"};

var cssFocusVisible={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB UB OB","161":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"161":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:":focus-visible CSS pseudo-class"};

var cssFocusWithin={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB"},D:{"1":"7 8 BB IB DB FB ZB GB","2":"0 1 3 5 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","194":"6"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o QB RB SB TB g VB","194":"p"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:":focus-within CSS pseudo-class"};

var cssFontRenderingControls={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"5 6 7 8","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o UB OB","322":"0 1 3 p q r s t u v z x"},D:{"1":"7 8 BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r","194":"0 1 3 5 6 s t u v z x"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB","194":"f L h i j k l m n o p"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","194":"L"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","194":"J rB"},Q:{"194":"sB"},R:{"2":"tB"}},B:5,C:"CSS font-rendering controls"};

var cssFontStretch={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G UB OB"},D:{"1":"0 1 3 5 6 7 8 r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"1":"e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:4,C:"CSS font-stretch"};

var cssGencontent={A:{A:{"1":"E A B","2":"K C YB","132":"G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS Generated content for pseudo-elements"};

var cssGradients={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB","33":"F J K C G E A B D w Z I OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"A B D w Z I M H N O P Q R S T U","36":"F J K C G E"},E:{"1":"C G E A B KB LB MB NB g PB","2":"HB CB","33":"K JB","36":"F J"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E B QB RB SB TB","33":"D VB","164":"9 g"},G:{"1":"G bB cB dB eB fB gB hB iB","33":"EB aB","36":"2 CB XB"},H:{"2":"jB"},I:{"1":"BB oB pB","33":"2 F nB","36":"AB kB lB mB"},J:{"1":"A","36":"C"},K:{"1":"4 L","2":"A B","33":"D","164":"9 g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS Gradients"};

var cssGrid={A:{A:{"2":"K C G YB","8":"E","292":"A B"},B:{"1":"M H","292":"D w Z I"},C:{"1":"1 3 5 6 7 8 z x","2":"WB AB F J K C G E A B D w Z I M H N UB OB","8":"O P Q R S T U V W X Y y a b c d e f L h i","584":"j k l m n o p q r s t u","1025":"0 v"},D:{"1":"5 6 7 8 BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T","8":"U V W X","200":"0 1 3 Y y a b c d e f L h i j k l m n o p q r s t u v z","1025":"x"},E:{"1":"B NB g PB","2":"F J HB CB JB","8":"K C G E A KB LB MB"},F:{"1":"n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W QB RB SB TB g VB","200":"X Y y a b c d e f L h i j k l m"},G:{"1":"gB hB iB","2":"2 CB XB EB","8":"G aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"AB F kB lB mB nB","8":"2 oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","8":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"292":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"J","8":"F"},Q:{"200":"sB"},R:{"2":"tB"}},B:4,C:"CSS Grid Layout"};

var cssHangingPunctuation={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z","16":"I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS hanging-punctuation"};

var cssHas={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:":has() CSS relational pseudo-class"};

var cssHyphenate={A:{A:{"16":"K C G E A B YB"},B:{"16":"D w Z I M H"},C:{"16":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"3 5 6 7 8 z x BB IB DB FB ZB GB","16":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"16":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"16":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"16":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"16":"jB"},I:{"16":"2 AB F BB kB lB mB nB oB pB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"16":"DB"},M:{"16":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"16":"F J rB"},Q:{"16":"sB"},R:{"16":"tB"}},B:5,C:"CSS4 Hyphenation"};

var cssHyphens={A:{A:{"2":"K C G E YB","33":"A B"},B:{"33":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 m n o p q r s t u v z x","2":"WB AB F J UB OB","33":"K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l"},D:{"2":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","132":"3 5 6 7 8 z x BB IB DB FB ZB GB"},E:{"2":"F J HB CB","33":"K C G E A B JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k QB RB SB TB g VB","132":"l m n o p q r s t u v"},G:{"2":"CB XB","33":"2 G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","132":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"132":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"4":"qB"},P:{"1":"rB","2":"F","132":"J"},Q:{"2":"sB"},R:{"132":"tB"}},B:5,C:"CSS Hyphenation"};

var cssImageOrientation={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"132":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS3 image-orientation"};

var cssImageSet={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P","33":"0 1 3 5 6 7 8 Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J HB CB JB","33":"K C G E KB LB MB","129":"A B NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 CB XB EB","33":"G aB bB cB dB eB","129":"fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","33":"BB oB pB"},J:{"2":"C","33":"A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"33":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:5,C:"CSS image-set"};

var cssInOutOfRange={A:{A:{"2":"K C G E A B YB"},B:{"2":"D","260":"w Z I M H"},C:{"1":"0 1 3 5 6 7 8 t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB","516":"Y y a b c d e f L h i j k l m n o p q r s"},D:{"1":"0 1 3 5 6 7 8 z x BB IB DB FB ZB GB","2":"F","16":"J K C G E A B D w Z","260":"v","772":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u"},E:{"1":"B NB g PB","2":"F HB CB","16":"J","772":"K C G E A JB KB LB MB"},F:{"1":"j k l m n o p q r s t u v","16":"E QB","260":"4 9 B D i RB SB TB g VB","772":"I M H N O P Q R S T U V W X Y y a b c d e f L h"},G:{"1":"gB hB iB","2":"2 CB XB","772":"G EB aB bB cB dB eB fB"},H:{"132":"jB"},I:{"1":"BB","2":"AB kB lB mB","260":"2 F nB oB pB"},J:{"2":"C","260":"A"},K:{"260":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","260":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:":in-range and :out-of-range CSS pseudo-classes"};

var cssIndeterminatePseudo={A:{A:{"2":"K C G YB","132":"A B","388":"E"},B:{"132":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 u v z x","16":"WB AB UB OB","132":"K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","388":"F J"},D:{"1":"0 1 3 5 6 7 8 i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z","132":"I M H N O P Q R S T U V W X Y y a b c d e f L h"},E:{"1":"B NB g PB","16":"F J K HB CB","132":"C G E A KB LB MB","388":"JB"},F:{"1":"V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"9 E B QB RB SB TB g","132":"I M H N O P Q R S T U","516":"4 D VB"},G:{"1":"gB hB iB","16":"2 CB XB EB aB","132":"G bB cB dB eB fB"},H:{"516":"jB"},I:{"1":"BB","16":"AB kB lB mB pB","132":"oB","388":"2 F nB"},J:{"16":"C","132":"A"},K:{"1":"L","16":"9 A B D g","516":"4"},L:{"1":"DB"},M:{"132":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:":indeterminate CSS pseudo-class"};

var cssInitialLetter={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G HB CB JB KB LB","4":"E","164":"A B MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB","164":"dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS Initial Letter"};

var cssInitialValue={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","16":"HB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS initial value"};

var cssLetterSpacing={A:{A:{"1":"E A B","16":"YB","132":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"1":"C G E A B KB LB MB NB g PB","16":"HB","132":"F J K CB JB"},F:{"1":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"E QB","132":"4 9 B D I M RB SB TB g VB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"2":"jB"},I:{"1":"BB oB pB","16":"kB lB","132":"2 AB F mB nB"},J:{"132":"C A"},K:{"1":"L","132":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"letter-spacing CSS property"};

var cssLineClamp={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"16":"F J K C G E A B D w","33":"0 1 3 5 6 7 8 Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F HB CB","33":"J K C G E A B JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 CB XB","33":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"16":"kB lB","33":"2 AB F BB mB nB oB pB"},J:{"33":"C A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"33":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:7,C:"CSS line-clamp"};

var cssLogicalProps={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x","2":"WB","164":"AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j UB OB"},D:{"292":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"292":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","292":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"292":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"292":"2 AB F BB kB lB mB nB oB pB"},J:{"292":"C A"},K:{"2":"4 9 A B D g","292":"L"},L:{"292":"DB"},M:{"164":"x"},N:{"2":"A B"},O:{"292":"qB"},P:{"292":"F J rB"},Q:{"292":"sB"},R:{"292":"tB"}},B:5,C:"CSS Logical Properties"};

var cssMarkerPseudo={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB","129":"g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS ::marker pseudo-element"};

var cssMasks={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 z x","2":"WB AB","260":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB"},D:{"164":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"HB CB","164":"F J K C G E A B JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","164":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"164":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"164":"BB oB pB","676":"2 AB F kB lB mB nB"},J:{"164":"C A"},K:{"2":"4 9 A B D g","164":"L"},L:{"164":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"164":"qB"},P:{"164":"F J rB"},Q:{"164":"sB"},R:{"164":"tB"}},B:4,C:"CSS Masks"};

var cssMatchesPseudo={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"16":"WB AB UB OB","548":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"16":"F J K C G E A B D w Z","164":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F HB CB","16":"J","164":"K C G JB KB LB","257":"E A B MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","164":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"16":"2 CB XB EB aB","164":"G bB cB","257":"dB eB fB gB hB iB"},H:{"2":"jB"},I:{"16":"AB kB lB mB","164":"2 F BB nB oB pB"},J:{"16":"C","164":"A"},K:{"2":"4 9 A B D g","164":"L"},L:{"164":"DB"},M:{"548":"x"},N:{"2":"A B"},O:{"164":"qB"},P:{"164":"F J rB"},Q:{"164":"sB"},R:{"164":"tB"}},B:5,C:":matches() CSS pseudo-class"};

var cssMediaInteraction={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"Media Queries: interaction media features"};

var cssMediaResolution={A:{A:{"2":"K C G YB","132":"E A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","260":"F J K C G E A B D w Z I UB OB"},D:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","548":"F J K C G E A B D w Z I M H N O P Q R S T U V W X"},E:{"2":"HB CB","548":"F J K C G E A B JB KB LB MB NB g PB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E","548":"9 B D QB RB SB TB g VB"},G:{"16":"CB","548":"2 G XB EB aB bB cB dB eB fB gB hB iB"},H:{"132":"jB"},I:{"1":"BB oB pB","16":"kB lB","548":"2 AB F mB nB"},J:{"548":"C A"},K:{"1":"4 L","548":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"Media Queries: resolution feature"};

var cssMediaScripting={A:{A:{"2":"K C G E A B YB"},B:{"16":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB","16":"0 1 3 5 6 7 8 v z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB","16":"FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t QB RB SB TB g VB","16":"u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"Media Queries: scripting media feature"};

var cssMediaqueries={A:{A:{"8":"K C G YB","129":"E A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","129":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"C G E A B KB LB MB NB g PB","129":"F J K JB","388":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"G bB cB dB eB fB gB hB iB","129":"2 CB XB EB aB"},H:{"1":"jB"},I:{"1":"BB oB pB","129":"2 AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"129":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS3 Media Queries"};

var cssMixblendmode={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a UB OB"},D:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X","194":"Y y a b c d e f L h i j"},E:{"2":"F J K C HB CB JB KB","260":"G E A B LB MB NB g PB"},F:{"1":"Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X QB RB SB TB g VB"},G:{"2":"2 CB XB EB aB bB","260":"G cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Blending of HTML/SVG elements"};

var cssMotionPaths={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l","194":"m n o"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y QB RB SB TB g VB","194":"y a b"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"CSS Motion Path"};

var cssNamespaces={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","16":"HB CB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G EB aB bB cB dB eB fB gB hB iB","16":"CB XB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS namespaces"};

var cssNotSelList={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","16":"6 7 8"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB","16":"FB ZB GB"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"selector list argument of :not()"};

var cssNthChildOf={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"selector list argument of :nth-child and :nth-last-child CSS pseudo-classes"};

var cssOpacity={A:{A:{"1":"E A B","4":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS3 Opacity"};

var cssOptionalPseudo={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"E QB","132":"4 9 B D RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"132":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"L","132":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:":optional CSS pseudo-class"};

var cssOverflowAnchor={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"3 5 6 7 8 x BB IB DB FB ZB GB","2":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"CSS overflow-anchor (Scroll Anchoring)"};

var cssOverscrollBehavior={A:{A:{"2":"K C G E YB","132":"A B"},B:{"132":"D w Z I M H"},C:{"1":"6 7 8","2":"0 1 3 5 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"FB ZB GB","2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB","260":"IB DB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s QB RB SB TB g VB","260":"t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"260":"DB"},M:{"2":"x"},N:{"132":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"CSS overscroll-behavior"};

var cssPageBreak={A:{A:{"388":"A B","900":"K C G E YB"},B:{"388":"D w Z I M H"},C:{"900":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"900":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"772":"A","900":"F J K C G E B HB CB JB KB LB MB NB g PB"},F:{"16":"E QB","129":"4 9 B D RB SB TB g VB","900":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"900":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"129":"jB"},I:{"900":"2 AB F BB kB lB mB nB oB pB"},J:{"900":"C A"},K:{"129":"4 9 A B D g","900":"L"},L:{"900":"DB"},M:{"900":"x"},N:{"388":"A B"},O:{"900":"qB"},P:{"900":"F J rB"},Q:{"900":"sB"},R:{"900":"tB"}},B:2,C:"CSS page-break properties"};

var cssPagedMedia={A:{A:{"2":"K C YB","132":"G E A B"},B:{"132":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N UB OB","132":"0 1 3 5 6 7 8 O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","132":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"16":"jB"},I:{"16":"2 AB F BB kB lB mB nB oB pB"},J:{"16":"C A"},K:{"16":"4 9 A B D g","258":"L"},L:{"1":"DB"},M:{"132":"x"},N:{"258":"A B"},O:{"258":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS Paged Media (@page)"};

var cssPaintApi={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"FB ZB GB","2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS Paint API"};

var cssPlaceholderShown={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t UB OB"},D:{"1":"0 1 3 5 6 7 8 q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:":placeholder-shown CSS pseudo-class"};

var cssPlaceholder={A:{A:{"2":"K C G E YB","36":"A B"},B:{"36":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB UB OB","33":"O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","164":"F J K C G E A B D w Z I M H N"},D:{"1":"5 6 7 8 x BB IB DB FB ZB GB","36":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z"},E:{"1":"B NB g PB","2":"F HB CB","36":"J K C G E A JB KB LB MB"},F:{"1":"n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","36":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m"},G:{"1":"gB hB iB","2":"CB XB","36":"2 G EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","36":"2 AB F kB lB mB nB oB pB"},J:{"36":"C A"},K:{"2":"4 9 A B D g","36":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"36":"A B"},O:{"1":"qB"},P:{"36":"F J rB"},Q:{"36":"sB"},R:{"1":"tB"}},B:5,C:"::placeholder CSS pseudo-element"};

var cssReadOnlyWrite={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"16":"WB","33":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z","132":"I M H N O P Q R S T U V W X Y y a b c d e"},E:{"1":"E A B MB NB g PB","16":"HB CB","132":"F J K C G JB KB LB"},F:{"1":"S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"E B QB RB SB TB g","132":"4 9 D I M H N O P Q R VB"},G:{"1":"dB eB fB gB hB iB","16":"CB XB","132":"2 G EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","16":"kB lB","132":"2 AB F mB nB oB pB"},J:{"1":"A","132":"C"},K:{"1":"L","2":"A B g","132":"4 9 D"},L:{"1":"DB"},M:{"33":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"CSS :read-only and :read-write selectors"};

var cssRebeccapurple={A:{A:{"2":"K C G E A YB","132":"B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b UB OB"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB","16":"KB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB EB aB bB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"Rebeccapurple color"};

var cssReflections={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"33":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"HB CB","33":"F J K C G E A B JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"33":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"33":"2 AB F BB kB lB mB nB oB pB"},J:{"33":"C A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:7,C:"CSS Reflections"};

var cssRegions={A:{A:{"2":"K C G E YB","420":"A B"},B:{"420":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","36":"I M H N","66":"O P Q R S T U V W X Y y a b c d"},E:{"2":"F J K HB CB JB g PB","33":"C G E A B KB LB MB NB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 CB XB EB aB iB","33":"G bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"420":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS Regions"};

var cssRepeatingGradients={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB","33":"F J K C G E A B D w Z I OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E","33":"A B D w Z I M H N O P Q R S T U"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB","33":"K JB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E B QB RB SB TB","33":"D VB","36":"9 g"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB","33":"EB aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"AB kB lB mB","33":"2 F nB"},J:{"1":"A","2":"C"},K:{"1":"4 L","2":"A B","33":"D","36":"9 g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS Repeating Gradients"};

var cssResize={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","33":"F"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB","132":"4"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS resize property"};

var cssRevertValue={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"A B MB NB g PB","2":"F J K C G E HB CB JB KB LB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"eB fB gB hB iB","2":"2 G CB XB EB aB bB cB dB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS revert value"};

var cssRrggbbaa={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r UB OB"},D:{"1":"BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u","194":"0 1 3 5 6 7 8 v z x"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h QB RB SB TB g VB","194":"i j k l m n o p q r s t u v"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","194":"J rB"},Q:{"194":"sB"},R:{"194":"tB"}},B:7,C:"#rrggbbaa hex color notation"};

var cssScrollBehavior={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j","129":"8 BB IB DB FB ZB GB","450":"0 1 3 5 6 7 k l m n o p q r s t u v z x"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W QB RB SB TB g VB","129":"r s t u v","450":"X Y y a b c d e f L h i j k l m n o p q"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"450":"sB"},R:{"2":"tB"}},B:5,C:"CSSOM Scroll-behavior"};

var cssScrollbar={A:{A:{"132":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"289":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"16":"F J HB CB","289":"K C G E A B JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","289":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"16":"2 CB XB EB aB","289":"G bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"16":"kB lB","289":"2 AB F BB mB nB oB pB"},J:{"289":"C A"},K:{"2":"4 9 A B D g","289":"L"},L:{"289":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"289":"qB"},P:{"289":"F J rB"},Q:{"289":"sB"},R:{"289":"tB"}},B:7,C:"CSS scrollbar styling"};

var cssSel2={A:{A:{"1":"C G E A B","2":"YB","8":"K"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS 2.1 selectors"};

var cssSel3={A:{A:{"1":"E A B","2":"YB","8":"K","132":"C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","2":"HB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS3 selectors"};

var cssSelection={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"33":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"4 9 D L","16":"A B g"},L:{"1":"DB"},M:{"33":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"::selection CSS pseudo-element"};

var cssShapes={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c","194":"d e f"},E:{"1":"B NB g PB","2":"F J K C HB CB JB KB","33":"G E A LB MB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 CB XB EB aB bB","33":"G cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS Shapes Level 1"};

var cssSnappoints={A:{A:{"2":"K C G E YB","6308":"A","6436":"B"},B:{"6436":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h UB OB","2052":"0 1 3 5 6 7 8 i j k l m n o p q r s t u v z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB","8258":"ZB GB"},E:{"1":"B g PB","2":"F J K C G HB CB JB KB LB","3108":"E A MB NB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB","3108":"dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2052":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS Scroll snap points"};

var cssSticky={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z I"},C:{"1":"6 7 8","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U UB OB","194":"V W X Y y a","516":"0 1 3 5 b c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R L h i j k l m n o p q r s t u","322":"0 1 S T U V W X Y y a b c d e f v z","1028":"3 5 6 7 8 x BB IB DB FB ZB GB"},E:{"2":"F J K HB CB JB","33":"G E A B LB MB NB g PB","2084":"C KB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h QB RB SB TB g VB","322":"i j k","1028":"l m n o p q r s t u v"},G:{"2":"2 CB XB EB","33":"G cB dB eB fB gB hB iB","2084":"aB bB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","1028":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1028":"DB"},M:{"516":"x"},N:{"2":"A B"},O:{"1028":"qB"},P:{"1":"rB","2":"F J"},Q:{"322":"sB"},R:{"2":"tB"}},B:5,C:"CSS position:sticky"};

var cssSupportsApi={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O UB OB","66":"P Q R"},D:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB","132":"4"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"132":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"9 A B D g","132":"4"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS.supports() API"};

var cssTable={A:{A:{"1":"G E A B","2":"K C YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","132":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS Table display"};

var cssTextAlignLast={A:{A:{"132":"K C G E A B YB"},B:{"4":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B UB OB","33":"D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r"},D:{"1":"0 1 3 5 6 7 8 q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d","322":"e f L h i j k l m n o p"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q QB RB SB TB g VB","578":"R S T U V W X Y y a b c"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"CSS3 text-align-last"};

var cssTextIndent={A:{A:{"132":"K C G E A B YB"},B:{"132":"D w Z I M H"},C:{"132":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"132":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L","388":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"132":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"132":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB","388":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"132":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"132":"jB"},I:{"132":"2 AB F BB kB lB mB nB oB pB"},J:{"132":"C A"},K:{"132":"4 9 A B D g","388":"L"},L:{"388":"DB"},M:{"132":"x"},N:{"132":"A B"},O:{"132":"qB"},P:{"132":"F","388":"J rB"},Q:{"388":"sB"},R:{"388":"tB"}},B:5,C:"CSS text-indent"};

var cssTextJustify={A:{A:{"16":"K C YB","132":"G E A B"},B:{"132":"D w Z I M H"},C:{"2":"0 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","1025":"3 5 6 7 8 z x","1602":"1"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l","322":"0 1 3 5 6 7 8 m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y QB RB SB TB g VB","322":"y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","322":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","322":"L"},L:{"322":"DB"},M:{"1025":"x"},N:{"132":"A B"},O:{"2":"qB"},P:{"2":"F","322":"J rB"},Q:{"322":"sB"},R:{"322":"tB"}},B:5,C:"CSS text-justify"};

var cssTextOrientation={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t UB OB"},D:{"1":"0 1 3 5 6 7 8 r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q"},E:{"2":"F J K C G E HB CB JB KB LB MB","16":"A","33":"B NB g PB"},F:{"1":"e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:4,C:"CSS text-orientation"};

var cssTextSpacing={A:{A:{"2":"K C YB","161":"G E A B"},B:{"161":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"16":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"CSS Text 4 text-spacing"};

var cssTextshadow={A:{A:{"2":"K C G E YB","129":"A B"},B:{"129":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","260":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"4":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"A","4":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"129":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 Text-shadow"};

var cssTouchAction2={A:{A:{"2":"K C G E YB","132":"B","164":"A"},B:{"132":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"3 5 6 7 8 x BB IB DB FB ZB GB","2":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","260":"z"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k QB RB SB TB g VB","260":"l"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"132":"B","164":"A"},O:{"2":"qB"},P:{"1":"J rB","16":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"CSS touch-action level 2 values"};

var cssTouchAction={A:{A:{"1":"B","2":"K C G E YB","289":"A"},B:{"1":"D w Z I M H"},C:{"1":"5 6 7 8 x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB","194":"Y y a b c d e f L h i j k l m n o p q r s t u","1025":"0 1 3 v z"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB","516":"eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","289":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS touch-action property"};

var cssTransitions={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","33":"J K C G E A B D w Z I","164":"F"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"C G E A B KB LB MB NB g PB","33":"K JB","164":"F J HB CB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB","33":"D","164":"9 B SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","33":"aB","164":"2 CB XB EB"},H:{"2":"jB"},I:{"1":"BB oB pB","33":"2 AB F kB lB mB nB"},J:{"1":"A","33":"C"},K:{"1":"4 L","33":"D","164":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS3 Transitions"};

var cssUnicodeBidi={A:{A:{"132":"K C G E A B YB"},B:{"132":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 t u v z x","33":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s","132":"WB AB F J K C G E UB OB","292":"A B D w Z I M"},D:{"1":"0 1 3 5 6 7 8 r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z I M","548":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q"},E:{"132":"F J K C G HB CB JB KB LB","548":"E A B MB NB g PB"},F:{"132":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"132":"2 G CB XB EB aB bB cB","548":"dB eB fB gB hB iB"},H:{"16":"jB"},I:{"1":"BB","16":"2 AB F kB lB mB nB oB pB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"16":"qB"},P:{"1":"J rB","16":"F"},Q:{"16":"sB"},R:{"16":"tB"}},B:4,C:"CSS unicode-bidi property"};

var cssUnsetValue={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"1":"0 1 3 5 6 7 8 W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V UB OB"},D:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},E:{"1":"A B MB NB g PB","2":"F J K C G E HB CB JB KB LB"},F:{"1":"X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W QB RB SB TB g VB"},G:{"1":"eB fB gB hB iB","2":"2 G CB XB EB aB bB cB dB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:4,C:"CSS unset value"};

var cssVariables={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z","260":"I"},C:{"1":"0 1 3 5 6 7 8 a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q","194":"r"},E:{"1":"A B MB NB g PB","2":"F J K C G E HB CB JB KB LB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d QB RB SB TB g VB","194":"e"},G:{"1":"eB fB gB hB iB","2":"2 G CB XB EB aB bB cB dB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS Variables (Custom Properties)"};

var cssWidowsOrphans={A:{A:{"1":"A B","2":"K C YB","129":"G E"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","129":"9 E B QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS widows & orphans"};

var cssWritingMode={A:{A:{"132":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB","322":"f L h i j"},D:{"1":"0 1 3 5 6 7 8 r s t u v z x BB IB DB FB ZB GB","2":"F J K","16":"C","33":"G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q"},E:{"1":"B g PB","2":"F HB CB","16":"J","33":"K C G E A JB KB LB MB NB"},F:{"1":"e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d"},G:{"1":"hB iB","16":"2 CB XB","33":"G EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB","2":"kB lB mB","33":"2 AB F nB oB pB"},J:{"33":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"36":"A B"},O:{"1":"qB"},P:{"1":"J rB","33":"F"},Q:{"33":"sB"},R:{"1":"tB"}},B:4,C:"CSS writing-mode property"};

var cssZoom={A:{A:{"1":"K C YB","129":"G E A B"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"129":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"CSS zoom"};

var css3Attr={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS3 attr() function for all properties"};

var css3Boxsizing={A:{A:{"1":"G E A B","8":"K C YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","33":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB"},D:{"1":"0 1 3 5 6 7 8 A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"F J K C G E"},E:{"1":"K C G E A B JB KB LB MB NB g PB","33":"F J HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","33":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 F BB nB oB pB","33":"AB kB lB mB"},J:{"1":"A","33":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 Box-sizing"};

var css3Colors={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","4":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","2":"E","4":"QB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS3 Colors"};

var css3CursorsGrab={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","33":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V UB OB"},D:{"33":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"33":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 D VB","2":"9 E B QB RB SB TB g","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"33":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"33":"sB"},R:{"2":"tB"}},B:4,C:"CSS3 Cursors: grab & grabbing"};

var css3CursorsNewer={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","33":"WB AB F J K C G E A B D w Z I M H N O P Q R S UB OB"},D:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f"},E:{"1":"E A B MB NB g PB","33":"F J K C G HB CB JB KB LB"},F:{"1":"4 D T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"9 E B QB RB SB TB g","33":"I M H N O P Q R S"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"33":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS3 Cursors: zoom-in & zoom-out"};

var css3Cursors={A:{A:{"1":"E A B","132":"K C G YB"},B:{"1":"Z I M H","260":"D w"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","4":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","4":"F"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","4":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","260":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C","16":"A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS3 Cursors (original values)"};

var css3Tabsize={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB UB OB","33":"0 1 3 5 6 7 8 z x","164":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},D:{"1":"0 1 3 5 6 7 8 l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P","132":"Q R S T U V W X Y y a b c d e f L h i j k"},E:{"2":"F J K HB CB JB","132":"C G E A B KB LB MB NB g PB"},F:{"1":"Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB SB","132":"I M H N O P Q R S T U V W X","164":"4 9 B D TB g VB"},G:{"2":"2 CB XB EB aB","132":"G bB cB dB eB fB gB hB iB"},H:{"164":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB","132":"oB pB"},J:{"132":"C A"},K:{"1":"L","2":"A","164":"4 9 B D g"},L:{"1":"DB"},M:{"33":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS3 tab-size"};

var currentcolor={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS currentColor value"};

var customElements={A:{A:{"2":"K C G E YB","8":"A B"},B:{"8":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R UB OB","194":"S T U V W X Y","200":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V","66":"W X Y y a b"},E:{"2":"F J HB CB JB","8":"K C G E A B KB LB MB NB g PB"},F:{"1":"P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","66":"I M H N O"},G:{"2":"2 CB XB EB aB","8":"G bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB pB","2":"2 AB F kB lB mB nB oB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"200":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Custom Elements v0"};

var customElementsv1={A:{A:{"2":"K C G E YB","8":"A B"},B:{"8":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y UB OB","8":"y a b c d e f L h i j k l m n o p q r s","132":"6 7 8","456":"0 1 3 5 t u v z x"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u","8":"0 v","132":"1 3 5 6 7 8 z x BB IB DB FB ZB GB"},E:{"2":"F J K C HB CB JB KB LB","8":"G E A MB","132":"B NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j QB RB SB TB g VB","132":"k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB","132":"gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","132":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"132":"DB"},M:{"8":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"F","132":"J"},Q:{"8":"sB"},R:{"132":"tB"}},B:1,C:"Custom Elements v1"};

var customevent={A:{A:{"2":"K C G YB","132":"E A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J UB OB","132":"K C G E A"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F","16":"J K C G w Z","388":"E A B D"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F HB CB","16":"J K","388":"JB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"E QB RB SB TB","132":"9 B g"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"XB","16":"2 CB","388":"EB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"kB lB mB","388":"2 AB F nB"},J:{"1":"A","388":"C"},K:{"1":"4 D L","2":"A","132":"9 B g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"CustomEvent"};

var datalist={A:{A:{"2":"YB","8":"K C G E","260":"A B"},B:{"260":"D w Z I M H"},C:{"8":"WB AB UB OB","516":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"8":"F J K C G E A B D w Z I M H N O","132":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"8":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D QB RB SB TB g VB","132":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"8":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"pB","8":"2 AB F kB lB mB nB oB","132":"BB"},J:{"1":"A","8":"C"},K:{"1":"4 9 A B D g","8":"L"},L:{"1":"DB"},M:{"516":"x"},N:{"8":"A B"},O:{"8":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Datalist element"};

var dataset={A:{A:{"1":"B","4":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","4":"WB AB F J UB OB","129":"0 1 3 5 6 7 8 u v z x"},D:{"1":"0 1 o p q r s t u v","4":"F J K","129":"3 5 6 7 8 C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n z x BB IB DB FB ZB GB"},E:{"4":"F J HB CB","129":"K C G E A B JB KB LB MB NB g PB"},F:{"1":"4 9 D b c d e f L h i j k g VB","4":"E B QB RB SB TB","129":"I M H N O P Q R S T U V W X Y y a l m n o p q r s t u v"},G:{"4":"2 CB XB","129":"G EB aB bB cB dB eB fB gB hB iB"},H:{"4":"jB"},I:{"4":"kB lB mB","129":"2 AB F BB nB oB pB"},J:{"129":"C A"},K:{"1":"4 9 D g","4":"A B","129":"L"},L:{"129":"DB"},M:{"129":"x"},N:{"1":"B","4":"A"},O:{"129":"qB"},P:{"129":"F J rB"},Q:{"1":"sB"},R:{"129":"tB"}},B:1,C:"dataset & data-* attributes"};

var datauri={A:{A:{"2":"K C YB","132":"G","260":"E A B"},B:{"260":"D w I M H","772":"Z"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"260":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"Data URIs"};

var details={A:{A:{"2":"E A B YB","8":"K C G"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB","8":"AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p UB OB","194":"q r"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","8":"F J K C G E A B","257":"O P Q R S T U V W X Y y a b c d e","769":"D w Z I M H N"},E:{"1":"B NB g PB","8":"F J HB CB JB","257":"K C G E A KB LB MB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 D g VB","8":"E B QB RB SB TB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","8":"2 CB XB EB"},H:{"8":"jB"},I:{"1":"2 F BB nB oB pB","8":"AB kB lB mB"},J:{"1":"A","8":"C"},K:{"1":"L","8":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"769":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Details & Summary elements"};

var deviceorientation={A:{A:{"2":"K C G E A YB","132":"B"},B:{"1":"D w Z I M H"},C:{"2":"WB AB UB","4":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","8":"F J OB"},D:{"2":"F J K","4":"0 1 3 5 6 7 8 C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","4":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"CB XB","4":"2 G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"kB lB mB","4":"2 AB F BB nB oB pB"},J:{"2":"C","4":"A"},K:{"1":"4 D","2":"9 A B g","4":"L"},L:{"4":"DB"},M:{"4":"x"},N:{"1":"B","2":"A"},O:{"4":"qB"},P:{"4":"F J rB"},Q:{"4":"sB"},R:{"4":"tB"}},B:4,C:"DeviceOrientation & DeviceMotion events"};

var devicepixelratio={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"9 E B QB RB SB TB g"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 D L","2":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Window.devicePixelRatio"};

var dialog={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","194":"0 1 3 5 6 7 8 z x"},D:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a","322":"b c d e f"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N QB RB SB TB g VB","578":"O P Q R S"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Dialog element"};

var dispatchevent={A:{A:{"1":"B","16":"YB","129":"E A","130":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","16":"HB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","16":"E"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","129":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"EventTarget.dispatchEvent"};

var documentCurrentscript={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X"},E:{"1":"G E A B MB NB g PB","2":"F J K C HB CB JB KB LB"},F:{"1":"M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I QB RB SB TB g VB"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB EB aB bB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"document.currentScript"};

var documentEvaluateXpath={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","16":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","16":"E"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"document.evaluate & XPath"};

var documentExeccommand={A:{A:{"1":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K C G E A B KB LB MB NB g PB","16":"F J HB CB JB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","16":"E QB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"CB XB","16":"2 EB aB"},H:{"2":"jB"},I:{"1":"2 nB oB pB","2":"AB F BB kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"Document.execCommand()"};

var documentScrollingelement={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","16":"D w"},C:{"1":"0 1 3 5 6 7 8 r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q UB OB"},D:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"document.scrollingElement"};

var documenthead={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F HB CB","16":"J"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E QB RB SB TB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"document.head"};

var domManipConvenience={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r UB OB"},D:{"1":"1 3 5 6 7 8 z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u","194":"0 v"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i QB RB SB TB g VB","194":"j"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"F J"},Q:{"194":"sB"},R:{"2":"tB"}},B:1,C:"DOM manipulation convenience methods"};

var domRange={A:{A:{"1":"E A B","2":"YB","8":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Document Object Model Range"};

var domcontentloaded={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"DOMContentLoaded"};

var domfocusinDomfocusoutEvents={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F HB CB","16":"J"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","16":"9 E B QB RB SB TB g"},G:{"1":"G bB cB dB eB fB gB hB iB","16":"2 CB XB EB aB"},H:{"16":"jB"},I:{"1":"2 F BB nB oB pB","16":"AB kB lB mB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"DOMFocusIn & DOMFocusOut events"};

var dommatrix={A:{A:{"2":"K C G E YB","132":"A B"},B:{"132":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b UB OB","516":"c d e f L h i j k l m n o p q r"},D:{"1":"8 BB IB DB FB ZB GB","16":"F J K C","132":"0 1 3 5 6 7 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","388":"G"},E:{"1":"B g PB","16":"F HB CB","132":"J K C G E A JB KB LB MB NB"},F:{"1":"r s t u v","2":"4 9 E B D QB RB SB TB g VB","132":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q"},G:{"16":"2 CB XB","132":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","132":"2 F nB oB pB","292":"AB kB lB mB"},J:{"16":"C","132":"A"},K:{"2":"4 9 A B D g","132":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"132":"qB"},P:{"132":"F J rB"},Q:{"132":"sB"},R:{"132":"tB"}},B:4,C:"DOMMatrix"};

var download={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O UB OB"},D:{"1":"0 1 3 5 6 7 8 Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Download attribute"};

var dragndrop={A:{A:{"644":"K C G E YB","772":"A B"},B:{"260":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","8":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","8":"9 E B QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"4","2":"L","8":"9 A B D g"},L:{"2":"DB"},M:{"2":"x"},N:{"1":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"Drag and Drop"};

var elementClosest={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w Z"},C:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d UB OB"},D:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:1,C:"Element.closest()"};

var elementFromPoint={A:{A:{"1":"K C G E A B","16":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","16":"WB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","16":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","16":"E QB RB SB TB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 D L","16":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"document.elementFromPoint()"};

var eme={A:{A:{"2":"K C G E A YB","164":"B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L UB OB"},D:{"1":"0 1 3 5 6 7 8 l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d","132":"e f L h i j k"},E:{"2":"F J K HB CB JB KB","164":"C G E A B LB MB NB g PB"},F:{"1":"Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q QB RB SB TB g VB","132":"R S T U V W X"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:3,C:"Encrypted Media Extensions"};

var eot={A:{A:{"1":"K C G E A B","2":"YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"EOT - Embedded OpenType fonts"};

var es5={A:{A:{"1":"A B","2":"K C YB","260":"E","1026":"G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","4":"WB AB UB OB","132":"F J K C G E A B D w Z I M H N O P"},D:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","4":"F J K C G E A B D w Z I M H N","132":"O P Q R"},E:{"1":"K C G E A B KB LB MB NB g PB","4":"F J HB CB JB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","4":"9 E B D QB RB SB TB g VB","132":"4"},G:{"1":"G aB bB cB dB eB fB gB hB iB","4":"2 CB XB EB"},H:{"132":"jB"},I:{"1":"BB oB pB","4":"AB kB lB mB","132":"2 nB","900":"F"},J:{"1":"A","4":"C"},K:{"1":"L","4":"9 A B D g","132":"4"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"ECMAScript 5"};

var es6Class={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k","132":"l m n o p q r"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X QB RB SB TB g VB","132":"Y y a b c d e"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"ES6 classes"};

var es6Generators={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U UB OB"},D:{"1":"0 1 3 5 6 7 8 i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"ES6 Generators"};

var es6ModuleDynamicImport={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"g PB","2":"F J K C G E A HB CB JB KB LB MB","130":"B NB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB","16":"hB iB","130":"gB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"JavaScript modules: dynamic import()"};

var es6ModuleNomodule={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I","514":"M H"},C:{"2":"0 1 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","322":"3 5 6 7 8 z x"},D:{"1":"8 BB IB DB FB ZB GB","2":"0 1 3 5 6 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","194":"7"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q QB RB SB TB g VB","194":"r s t u v"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"JavaScript modules: nomodule attribute"};

var es6Module={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z","194":"I"},C:{"2":"0 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","322":"1 3 5 6 7 8 z x"},D:{"1":"8 BB IB DB FB ZB GB","2":"0 1 3 5 6 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","194":"7"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB","1028":"NB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p QB RB SB TB g VB","194":"q r s t u v"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB","1028":"gB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"322":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"JavaScript modules via script tag"};

var es6Number={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I UB OB","132":"M H N O P Q R S T","260":"U V W X Y y","516":"a"},D:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N","1028":"O P Q R S T U V W X Y y a b c"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","1028":"I M H N O P"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"AB F kB lB mB","1028":"2 nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"ES6 Number"};

var es6StringIncludes={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i UB OB"},D:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"String.prototype.includes"};

var eventsource={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J UB OB"},D:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","4":"E QB RB SB TB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 D L g","4":"A B"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Server-sent events"};

var fetch={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c UB OB","1025":"i","1218":"d e f L h"},D:{"1":"0 1 3 5 6 7 8 l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i","260":"j","772":"k"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V QB RB SB TB g VB","260":"W","772":"X"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Fetch"};

var fieldsetDisabled={A:{A:{"16":"YB","132":"G E","388":"K C A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I","16":"M H N O"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","16":"E QB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"2 CB XB EB"},H:{"388":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A","260":"B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"disabled attribute of the fieldset element"};

var fileapi={A:{A:{"2":"K C G E YB","260":"A B"},B:{"260":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB","260":"F J K C G E A B D w Z I M H N O P Q R S T U V W OB"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J","260":"w Z I M H N O P Q R S T U V W X Y y a b c d e f L","388":"K C G E A B D"},E:{"1":"A B NB g PB","2":"F J HB CB","260":"K C G E KB LB MB","388":"JB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E B QB RB SB TB","260":"4 9 D I M H N O P Q R S T g VB"},G:{"1":"fB gB hB iB","2":"2 CB XB EB","260":"G aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB pB","2":"kB lB mB","260":"oB","388":"2 AB F nB"},J:{"260":"A","388":"C"},K:{"1":"L","2":"A B","260":"4 9 D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A","260":"B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"File API"};

var filereader={A:{A:{"2":"K C G E YB","132":"A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 9 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E B QB RB SB TB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"2 CB XB EB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"4 9 D L g","2":"A B"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"FileReader API"};

var filereadersync={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C UB OB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"E QB RB","16":"9 B SB TB g"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"2 CB XB EB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"4 9 D L","2":"A","16":"B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"FileReaderSync"};

var filesystem={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C","33":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","36":"G E A B D"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C","33":"A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","33":"J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Filesystem & FileWriter API"};

var flac={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z I"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t UB OB"},D:{"1":"3 5 6 7 8 x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m","16":"n o p","388":"0 1 q r s t u v z"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","516":"B g PB"},F:{"1":"l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB","2":"kB lB mB","16":"2 AB F nB oB pB"},J:{"1":"A","2":"C"},K:{"1":"4","16":"9 A B D g","129":"L"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","129":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"FLAC audio format"};

var flexbox={A:{A:{"2":"K C G E YB","1028":"B","1316":"A"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x","164":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB","516":"R S T U V W"},D:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"Q R S T U V W X","164":"F J K C G E A B D w Z I M H N O P"},E:{"1":"E A B MB NB g PB","33":"C G KB LB","164":"F J K HB CB JB"},F:{"1":"4 H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB","33":"I M"},G:{"1":"dB eB fB gB hB iB","33":"G bB cB","164":"2 CB XB EB aB"},H:{"1":"jB"},I:{"1":"BB oB pB","164":"2 AB F kB lB mB nB"},J:{"1":"A","164":"C"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","292":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS Flexible Box Layout Module"};

var flowRoot={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB"},D:{"1":"5 6 7 8 BB IB DB FB ZB GB","2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"display: flow-root"};

var focusinFocusoutEvents={A:{A:{"1":"K C G E A B","2":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"E QB RB SB TB","16":"9 B g"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 F BB nB oB pB","2":"kB lB mB","16":"AB"},J:{"1":"C A"},K:{"1":"4 D L","2":"A","16":"9 B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"focusin & focusout events"};

var focusoptionsPreventscroll={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"DB FB ZB GB","2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"preventScroll support in focus"};

var fontFamilySystemUi={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l UB OB","132":"0 1 3 5 6 7 8 m n o p q r s t u v z x"},D:{"1":"3 5 6 7 8 x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","258":"0 1 z"},E:{"1":"B g PB","2":"F J K C G HB CB JB KB LB","16":"E","388":"A MB NB"},F:{"1":"m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB","132":"dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"F J"},Q:{"1":"sB"},R:{"2":"tB"}},B:5,C:"system-ui value for font-family"};

var fontFeature={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","33":"I M H N O P Q R S T U V W X Y y a b c","164":"F J K C G E A B D w Z"},D:{"1":"0 1 3 5 6 7 8 r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I","33":"Q R S T U V W X Y y a b c d e f L h i j k l m n o p q","292":"M H N O P"},E:{"1":"A B MB NB g PB","2":"C G E HB CB KB LB","4":"F J K JB"},F:{"1":"e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d"},G:{"1":"eB fB gB hB iB","2":"G bB cB dB","4":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB","33":"oB pB"},J:{"2":"C","33":"A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"33":"qB"},P:{"1":"J rB","33":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS font-feature-settings"};

var fontKerning={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S UB OB","194":"T U V W X Y y a b c"},D:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X","33":"Y y a b"},E:{"1":"A B MB NB g PB","2":"F J K HB CB JB KB","33":"C G E LB"},F:{"1":"P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I QB RB SB TB g VB","33":"M H N O"},G:{"2":"2 CB XB EB aB bB","33":"G cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB pB","2":"2 AB F kB lB mB nB","33":"oB"},J:{"2":"C","33":"A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 font-kerning"};

var fontLoading={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d UB OB","194":"e f L h i j"},D:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS Font Loading"};

var fontSizeAdjust={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l","194":"0 1 3 5 6 7 8 m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y QB RB SB TB g VB","194":"y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"258":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"194":"sB"},R:{"2":"tB"}},B:4,C:"CSS font-size-adjust"};

var fontSmooth={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T UB OB","804":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"F","676":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"HB CB","676":"F J K C G E A B JB KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","676":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"CSS font-smooth"};

var fontUnicodeRange={A:{A:{"2":"K C G YB","4":"E A B"},B:{"1":"H","4":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB","194":"f L h i j k l m"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","4":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e"},E:{"1":"A B NB g PB","4":"F J K C G E HB CB JB KB LB MB"},F:{"1":"S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","4":"I M H N O P Q R"},G:{"1":"fB gB hB iB","4":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","4":"2 AB F kB lB mB nB oB pB"},J:{"2":"C","4":"A"},K:{"2":"4 9 A B D g","4":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"4":"A B"},O:{"1":"qB"},P:{"1":"J rB","4":"F"},Q:{"1":"sB"},R:{"2":"tB"}},B:4,C:"Font unicode-range subsetting"};

var fontVariantAlternates={A:{A:{"2":"K C G E YB","130":"A B"},B:{"130":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","130":"F J K C G E A B D w Z I M H N O P Q R S","322":"T U V W X Y y a b c"},D:{"2":"F J K C G E A B D w Z I","130":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"A B MB NB g PB","2":"C G E HB CB KB LB","130":"F J K JB"},F:{"2":"4 9 E B D QB RB SB TB g VB","130":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"eB fB gB hB iB","2":"G CB bB cB dB","130":"2 XB EB aB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","130":"BB oB pB"},J:{"2":"C","130":"A"},K:{"2":"4 9 A B D g","130":"L"},L:{"130":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"130":"qB"},P:{"130":"F J rB"},Q:{"130":"sB"},R:{"130":"tB"}},B:4,C:"CSS font-variant-alternates"};

var fontVariantEastAsian={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S UB OB","132":"T U V W X Y y a b c"},D:{"1":"IB DB FB ZB GB","2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s QB RB SB TB g VB"},G:{"2":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"132":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"CSS font-variant-east-asian "};

var fontface={A:{A:{"1":"E A B","132":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","2":"HB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","2":"E QB"},G:{"1":"2 G EB aB bB cB dB eB fB gB hB iB","260":"CB XB"},H:{"2":"jB"},I:{"1":"2 F BB nB oB pB","2":"kB","4":"AB lB mB"},J:{"1":"A","4":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"@font-face Web fonts"};

var formAttribute={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z I"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F HB CB","16":"J"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Form attribute"};

var formSubmitAttributes={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F J HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","2":"E QB","16":"RB SB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 F BB nB oB pB","2":"kB lB mB","16":"AB"},J:{"1":"A","2":"C"},K:{"1":"4 9 B D L g","16":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Attributes for form submission"};

var formValidation={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E"},E:{"1":"B NB g PB","2":"F HB CB","132":"J K C G E A JB KB LB MB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","2":"E QB"},G:{"1":"gB hB iB","2":"CB","132":"2 G XB EB aB bB cB dB eB fB"},H:{"516":"jB"},I:{"1":"BB pB","2":"AB kB lB mB","132":"2 F nB oB"},J:{"1":"A","132":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"260":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Form validation"};

var forms={A:{A:{"2":"YB","4":"A B","8":"K C G E"},B:{"1":"M H","4":"D w Z I"},C:{"4":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","8":"WB AB UB OB"},D:{"1":"8 BB IB DB FB ZB GB","4":"0 1 3 5 6 7 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},E:{"4":"F J K C G E A B JB KB LB MB NB g PB","8":"HB CB"},F:{"1":"4 9 E B D QB RB SB TB g VB","4":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"CB","4":"2 G XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","4":"BB oB pB"},J:{"2":"C","4":"A"},K:{"1":"4 9 A B D g","4":"L"},L:{"4":"DB"},M:{"4":"x"},N:{"4":"A B"},O:{"1":"qB"},P:{"4":"F J rB"},Q:{"4":"sB"},R:{"4":"tB"}},B:1,C:"HTML5 form features"};

var fullscreen={A:{A:{"2":"K C G E A YB","548":"B"},B:{"516":"D w Z I M H"},C:{"2":"WB AB F J K C G E UB OB","676":"A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p","1700":"0 1 3 5 6 7 8 q r s t u v z x"},D:{"2":"F J K C G E A B D w Z","676":"I M H N O","804":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J HB CB","676":"JB","804":"K C G E A B KB LB MB NB g PB"},F:{"1":"4","2":"9 E B D QB RB SB TB g VB","804":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C","292":"A"},K:{"2":"4 9 A B D g","804":"L"},L:{"804":"DB"},M:{"1700":"x"},N:{"2":"A","548":"B"},O:{"804":"qB"},P:{"804":"F J rB"},Q:{"804":"sB"},R:{"804":"tB"}},B:1,C:"Full Screen API"};

var gamepad={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P","33":"Q R S T"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Gamepad API"};

var geolocation={A:{A:{"1":"E A B","2":"YB","8":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","8":"WB AB","129":"3 5 6 7 8 z x"},D:{"1":"J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s","4":"F","129":"0 1 3 5 6 7 8 t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E B JB KB LB MB NB g PB","8":"F HB CB","129":"A"},F:{"1":"4 9 B D M H N O P Q R S T U V W X Y y a b c d e f L h TB g VB","2":"E I QB","8":"RB SB","129":"i j k l m n o p q r s t u v"},G:{"1":"2 G CB XB EB aB bB cB dB eB","129":"fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F kB lB mB nB oB pB","129":"BB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","8":"A"},L:{"129":"DB"},M:{"129":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F","129":"J rB"},Q:{"129":"sB"},R:{"129":"tB"}},B:2,C:"Geolocation"};

var getboundingclientrect={A:{A:{"1":"E A B","644":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB","260":"F J K C G E A B","1156":"AB","1284":"UB","1796":"OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","16":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","16":"E QB","132":"RB SB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","132":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Element.getBoundingClientRect()"};

var getcomputedstyle={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB","132":"AB UB OB"},D:{"1":"0 1 3 5 6 7 8 B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","260":"F J K C G E A"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","260":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","260":"E QB RB SB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","260":"2 CB XB"},H:{"260":"jB"},I:{"1":"2 F BB nB oB pB","260":"AB kB lB mB"},J:{"1":"A","260":"C"},K:{"1":"4 9 B D L g","260":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"getComputedStyle"};

var getelementsbyclassname={A:{A:{"1":"E A B","2":"YB","8":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","8":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"getElementsByClassName"};

var getrandomvalues={A:{A:{"2":"K C G E A YB","33":"B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P UB OB"},D:{"1":"0 1 3 5 6 7 8 B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J K HB CB JB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A","33":"B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"crypto.getRandomValues()"};

var hardwareconcurrency={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w Z"},C:{"1":"0 1 3 5 6 7 8 r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q UB OB"},D:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f"},E:{"2":"F J K C HB CB JB KB LB","129":"B NB g PB","194":"G E A MB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S QB RB SB TB g VB"},G:{"2":"2 CB XB EB aB bB","129":"gB hB iB","194":"G cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"navigator.hardwareConcurrency"};

var hashchange={A:{A:{"1":"G E A B","8":"K C YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","8":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","8":"F"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","8":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","8":"E QB RB SB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB lB mB nB oB pB","2":"kB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","8":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Hashchange event"};

var heif={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","130":"B g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB","130":"hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"HEIF/ISO Base Media File Format"};

var hevc={A:{A:{"2":"K C G E A YB","132":"B"},B:{"132":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","516":"B g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","258":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"258":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","258":"J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"HEVC/H.265 video format"};

var hidden={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F J HB CB"},F:{"1":"4 9 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E B QB RB SB TB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 F BB nB oB pB","2":"AB kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"4 9 D L g","2":"A B"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"hidden attribute"};

var highResolutionTime={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O","33":"P Q R S"},E:{"1":"G E A B MB NB g PB","2":"F J K C HB CB JB KB LB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G dB eB fB gB hB iB","2":"2 CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"High Resolution Time API"};

var history={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F HB CB","4":"J JB"},F:{"1":"4 9 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"E B QB RB SB TB g"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"CB XB","4":"2"},H:{"2":"jB"},I:{"1":"2 BB lB mB oB pB","2":"AB F kB nB"},J:{"1":"C A"},K:{"1":"4 9 D L g","2":"A B"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Session history management"};

var htmlMediaCapture={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 CB XB EB","129":"G aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB","257":"lB mB"},J:{"1":"A","16":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"516":"qB"},P:{"1":"F J rB"},Q:{"16":"sB"},R:{"1":"tB"}},B:4,C:"HTML Media Capture"};

var html5semantic={A:{A:{"2":"YB","8":"K C G","260":"E A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB","132":"AB UB OB","260":"F J K C G E A B D w Z I M H N O P"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J","260":"K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"C G E A B KB LB MB NB g PB","132":"F HB CB","260":"J K JB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","132":"E B QB RB SB TB","260":"4 9 D g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","132":"CB","260":"2 XB EB aB"},H:{"132":"jB"},I:{"1":"BB oB pB","132":"kB","260":"2 AB F lB mB nB"},J:{"260":"C A"},K:{"1":"L","132":"A","260":"4 9 B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"260":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"New semantic elements"};

var httpLiveStreaming={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"HTTP Live Streaming (HLS)"};

var http2={A:{A:{"2":"K C G E A YB","388":"B"},B:{"257":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB","257":"f L h i j k l m n o p q r s t u v","1281":"0 1 3 5 6 7 8 z x"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j","257":"k l m n o p q r s t","1281":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G HB CB JB KB LB","257":"B g PB","772":"E A MB NB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W QB RB SB TB g VB","257":"X Y y a b c d e f L","1281":"h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB","257":"dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","257":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","257":"L"},L:{"1281":"DB"},M:{"257":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"257":"F","1281":"J rB"},Q:{"1281":"sB"},R:{"257":"tB"}},B:6,C:"HTTP/2 protocol"};

var iframeSandbox={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M UB OB","4":"H N O P Q R S T U V W"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G EB aB bB cB dB eB fB gB hB iB","2":"CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB lB mB nB oB pB","2":"kB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"sandbox attribute for iframes"};

var iframeSeamless={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","66":"P Q R S T U V"},E:{"2":"F J K G E A B HB CB JB KB MB NB g PB","130":"C LB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB cB dB eB fB gB hB iB","130":"bB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"seamless attribute for iframes"};

var iframeSrcdoc={A:{A:{"2":"YB","8":"K C G E A B"},B:{"8":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB","8":"AB F J K C G E A B D w Z I M H N O P Q R S T UB OB"},D:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w","8":"Z I M H N O"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"HB CB","8":"F J JB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E B QB RB SB TB","8":"4 9 D g VB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"CB","8":"2 XB EB"},H:{"2":"jB"},I:{"1":"BB oB pB","8":"2 AB F kB lB mB nB"},J:{"1":"A","8":"C"},K:{"1":"L","2":"A B","8":"4 9 D g"},L:{"1":"DB"},M:{"1":"x"},N:{"8":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"srcdoc attribute for iframes"};

var imagecapture={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d UB OB","194":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","322":"0 1 3 5 6 7 8 z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i QB RB SB TB g VB","322":"j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"322":"sB"},R:{"1":"tB"}},B:5,C:"ImageCapture API"};

var ime={A:{A:{"2":"K C G E A YB","161":"B"},B:{"161":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A","161":"B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"Input Method Editor API"};

var imgNaturalwidthNaturalheight={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"naturalWidth & naturalHeight image properties"};

var imports={A:{A:{"2":"K C G E YB","8":"A B"},B:{"8":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y UB OB","8":"y a","200":"0 1 3 5 6 7 8 b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y","322":"y a b c d","584":"e"},E:{"2":"F J HB CB JB","8":"K C G E A B KB LB MB NB g PB"},F:{"1":"S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M QB RB SB TB g VB","1090":"H N O P Q","2120":"R"},G:{"2":"2 CB XB EB aB","8":"G bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"8":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"HTML Imports"};

var indeterminateCheckbox={A:{A:{"1":"K C G E A B","16":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB","16":"UB"},D:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"9 E B QB RB SB TB g"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"indeterminate checkbox"};

var indexeddb={A:{A:{"2":"K C G E YB","132":"A B"},B:{"132":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","33":"A B D w Z I","36":"F J K C G E"},D:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"A","8":"F J K C G E","33":"S","36":"B D w Z I M H N O P Q R"},E:{"1":"A B NB g PB","8":"F J K C HB CB JB KB","260":"G E LB MB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB","8":"4 9 B D SB TB g VB"},G:{"1":"fB gB hB iB","8":"2 CB XB EB aB bB","260":"G cB dB eB"},H:{"2":"jB"},I:{"1":"BB oB pB","8":"2 AB F kB lB mB nB"},J:{"1":"A","8":"C"},K:{"1":"L","2":"A","8":"4 9 B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"IndexedDB"};

var indexeddb2={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m UB OB","132":"n o p","260":"q r s t"},D:{"1":"5 6 7 8 BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q","132":"r s t u","260":"0 1 3 v z x"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d QB RB SB TB g VB","132":"e f L h","260":"i j k l m n"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB","16":"fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","132":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","260":"J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"IndexedDB 2.0"};

var inlineBlock={A:{A:{"1":"G E A B","4":"YB","132":"K C"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","36":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS inline-block"};

var innertext={A:{A:{"1":"K C G E A B","16":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","16":"HB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","16":"E"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Node.innerText"};

var inputAutocompleteOnoff={A:{A:{"1":"K C G E A YB","132":"B"},B:{"132":"D w Z I M H"},C:{"1":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y UB OB","516":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"H N O P Q R S T U V","2":"F J K C G E A B D w Z I M","132":"W X Y y a b c d e f L h i j","260":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K JB KB","2":"F J HB CB","2052":"C G E A B LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 CB XB","1025":"G EB aB bB cB dB eB fB gB hB iB"},H:{"1025":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2052":"A B"},O:{"1025":"qB"},P:{"1":"F J rB"},Q:{"260":"sB"},R:{"1":"tB"}},B:1,C:"autocomplete attribute: on & off values"};

var inputColor={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB"},D:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"1":"4 9 B D H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E I M QB RB SB TB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Color input type"};

var inputDatetime={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","132":"D"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","1090":"0 1 3 z","2052":"5 6 7 8 x"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O","2052":"P Q R S T"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 CB XB","260":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"AB kB lB mB","514":"2 F nB"},J:{"1":"A","2":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Date and time input types"};

var inputEmailTelUrl={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","132":"kB lB mB"},J:{"1":"A","132":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Email, telephone & URL input types"};

var inputEvent={A:{A:{"2":"K C G YB","2561":"A B","2692":"E"},B:{"2561":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","16":"WB","1537":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r OB","1796":"AB UB"},D:{"1":"ZB GB","16":"F J K C G E A B D w Z","1025":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x BB IB DB FB","1537":"I M H N O P Q R S T U V W X Y y a b c d"},E:{"16":"F J K HB CB","1025":"C G E A B KB LB MB NB g PB","1537":"JB"},F:{"1":"4 v","16":"9 E B D QB RB SB TB g","260":"VB","1025":"R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u","1537":"I M H N O P Q"},G:{"16":"2 CB XB","1025":"G cB dB eB fB gB hB iB","1537":"EB aB bB"},H:{"2":"jB"},I:{"16":"kB lB","1025":"BB pB","1537":"2 AB F mB nB oB"},J:{"1025":"A","1537":"C"},K:{"1":"4 9 A B D g","1025":"L"},L:{"1025":"DB"},M:{"1537":"x"},N:{"2561":"A B"},O:{"1537":"qB"},P:{"1025":"F J rB"},Q:{"1025":"sB"},R:{"1025":"tB"}},B:1,C:"input event"};

var inputFileAccept={A:{A:{"1":"A B","2":"K C G E YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","132":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F","16":"J K C G Q R S T U","132":"E A B D w Z I M H N O P"},E:{"1":"g PB","2":"F J HB CB JB","132":"K C G E A B KB LB MB NB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"2":"aB bB","132":"G cB dB eB fB gB hB iB","514":"2 CB XB EB"},H:{"2":"jB"},I:{"2":"kB lB mB","260":"2 AB F nB","514":"BB oB pB"},J:{"132":"A","260":"C"},K:{"2":"4 9 A B D g","260":"L"},L:{"260":"DB"},M:{"2":"x"},N:{"514":"A","1028":"B"},O:{"2":"qB"},P:{"260":"F J rB"},Q:{"1":"sB"},R:{"260":"tB"}},B:1,C:"accept attribute for file input"};

var inputFileDirectory={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s UB OB"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Directory selection from file input"};

var inputFileMultiple={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","2":"E QB RB SB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"2 CB XB EB"},H:{"130":"jB"},I:{"130":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"130":"4 9 A B D L g"},L:{"132":"DB"},M:{"130":"x"},N:{"2":"A B"},O:{"130":"qB"},P:{"130":"F","132":"J rB"},Q:{"1":"sB"},R:{"132":"tB"}},B:1,C:"Multiple file selection"};

var inputInputmode={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M UB OB","4":"H N O P","194":"0 1 3 5 6 7 8 Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"194":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"inputmode attribute"};

var inputMinlength={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t UB OB"},D:{"1":"0 1 3 5 6 7 8 j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:1,C:"Minimum length attribute for input fields"};

var inputNumber={A:{A:{"2":"K C G E YB","129":"A B"},B:{"129":"D w","1025":"Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB","513":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"388":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"AB kB lB mB","388":"2 F BB nB oB pB"},J:{"2":"C","388":"A"},K:{"1":"4 9 A B D g","388":"L"},L:{"388":"DB"},M:{"641":"x"},N:{"388":"A B"},O:{"388":"qB"},P:{"388":"F J rB"},Q:{"1":"sB"},R:{"388":"tB"}},B:1,C:"Number input type"};

var inputPattern={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E"},E:{"1":"B NB g PB","2":"F HB CB","16":"J","388":"K C G E A JB KB LB MB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"gB hB iB","16":"2 CB XB","388":"G EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB pB","2":"2 AB F kB lB mB nB oB"},J:{"1":"A","2":"C"},K:{"1":"4 9 A B D g","132":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Pattern attribute for input fields"};

var inputPlaceholder={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","132":"F HB CB"},F:{"1":"4 9 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"E QB RB SB TB","132":"B g"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB BB kB lB mB oB pB","4":"F nB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"input placeholder attribute"};

var inputRange={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 BB oB pB","4":"AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Range input type"};

var inputSearch={A:{A:{"2":"K C G E YB","129":"A B"},B:{"129":"D w Z I M H"},C:{"2":"WB AB UB OB","129":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z Q R S T U","129":"I M H N O P"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"E QB RB SB TB","16":"9 B g"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"129":"jB"},I:{"1":"BB oB pB","16":"kB lB","129":"2 AB F mB nB"},J:{"1":"C","129":"A"},K:{"1":"D","2":"A","16":"9 B g","129":"4 L"},L:{"1":"DB"},M:{"129":"x"},N:{"129":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Search input type"};

var inputSelection={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","16":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","16":"E QB RB SB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Selection controls for input & textarea"};

var insertAdjacent={A:{A:{"1":"K C G E A B","16":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","16":"E"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Element.insertAdjacentElement() & Element.insertAdjacentText()"};

var insertadjacenthtml={A:{A:{"1":"A B","16":"YB","132":"K C G E"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","16":"E QB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Element.insertAdjacentHTML()"};

var internationalization={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB"},D:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"Internationalization API"};

var intersectionobserver={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z","516":"I"},C:{"1":"3 5 6 7 8 z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB","194":"0 1 v"},D:{"1":"5 6 7 8 BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","516":"0 1 3 u v z x"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L QB RB SB TB g VB","516":"h i j k l m n"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"516":"qB"},P:{"2":"F","516":"J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"IntersectionObserver"};

var intrinsicWidth={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB","932":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q","545":"R S T U V W X Y y a b c d e f L h i j k l m n o","1537":"0 1 3 5 6 7 8 p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K HB CB JB","516":"B g PB","548":"E A MB NB","676":"C G KB LB"},F:{"2":"4 9 E B D QB RB SB TB g VB","513":"d","545":"I M H N O P Q R S T U V W X Y y a b","1537":"c e f L h i j k l m n o p q r s t u v"},G:{"2":"2 CB XB EB aB","548":"dB eB fB gB hB iB","676":"G bB cB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","545":"oB pB","1537":"BB"},J:{"2":"C","545":"A"},K:{"2":"4 9 A B D g","1537":"L"},L:{"1537":"DB"},M:{"932":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"545":"F","1537":"J rB"},Q:{"545":"sB"},R:{"1537":"tB"}},B:5,C:"Intrinsic & Extrinsic Sizing"};

var jpeg2000={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F HB CB","129":"J JB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"JPEG 2000 image format"};

var jpegxr={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"1":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"JPEG XR image format"};

var json={A:{A:{"1":"E A B","2":"K C YB","129":"G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"JSON parsing"};

var kerningPairsLigatures={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G EB aB bB cB dB eB fB gB hB iB","16":"CB XB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"kB lB mB","132":"2 AB F nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"Improved kerning pairs & ligatures"};

var keyboardeventCharcode={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","16":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","16":"HB CB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB","16":"D"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4","2":"9 A B g","16":"D","130":"L"},L:{"1":"DB"},M:{"130":"x"},N:{"130":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"KeyboardEvent.charCode"};

var keyboardeventCode={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L UB OB"},D:{"1":"0 1 3 5 6 7 8 r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k","194":"l m n o p q"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X QB RB SB TB g VB","194":"Y y a b c d"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","194":"L"},L:{"194":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","194":"J rB"},Q:{"2":"sB"},R:{"194":"tB"}},B:5,C:"KeyboardEvent.code"};

var keyboardeventGetmodifierstate={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"4 H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B I M QB RB SB TB g VB","16":"D"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"4 L","2":"9 A B g","16":"D"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"KeyboardEvent.getModifierState()"};

var keyboardeventKey={A:{A:{"2":"K C G YB","260":"E A B"},B:{"260":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R UB OB","132":"S T U V W X"},D:{"1":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"4 h i j k l m n o p q r s t u v","2":"9 E B I M H N O P Q R S T U V W X Y y a b c d e f L QB RB SB TB g VB","16":"D"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"4","2":"9 A B L g","16":"D"},L:{"1":"DB"},M:{"1":"x"},N:{"260":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"KeyboardEvent.key"};

var keyboardeventLocation={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"1":"C G E A B KB LB MB NB g PB","16":"K HB CB","132":"F J JB"},F:{"1":"4 H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB","16":"D","132":"I M"},G:{"1":"G cB dB eB fB gB hB iB","16":"2 CB XB","132":"EB aB bB"},H:{"2":"jB"},I:{"1":"BB oB pB","16":"kB lB","132":"2 AB F mB nB"},J:{"132":"C A"},K:{"1":"4 L","2":"9 A B g","16":"D"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"KeyboardEvent.location"};

var keyboardeventWhich={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F HB CB","16":"J"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","16":"E QB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB","16":"kB lB","132":"oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D g","132":"L"},L:{"132":"DB"},M:{"132":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"2":"F","132":"J rB"},Q:{"1":"sB"},R:{"132":"tB"}},B:7,C:"KeyboardEvent.which"};

var lazyload={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"1":"B","2":"A"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Resource Hints: Lazyload"};

var _let={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x","194":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N","322":"O P Q R S T U V W X Y y a b c d e f L h i j","516":"k l m n o p q r"},E:{"1":"B g PB","2":"F J K C G E HB CB JB KB LB MB","1028":"A NB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","322":"I M H N O P Q R S T U V W","516":"X Y y a b c d e"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB","1028":"fB gB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"J rB","516":"F"},Q:{"2":"sB"},R:{"516":"tB"}},B:6,C:"let"};

var linkIconPng={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"129":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"257":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"129":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","513":"4 9 E B D QB RB SB TB g VB"},G:{"1026":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1026":"jB"},I:{"1":"2 AB F kB lB mB nB","513":"BB oB pB"},J:{"1":"C","1026":"A"},K:{"1026":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1026":"A B"},O:{"257":"qB"},P:{"1":"J rB","513":"F"},Q:{"129":"sB"},R:{"1":"tB"}},B:1,C:"PNG favicons"};

var linkIconSvg={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB UB OB","260":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j","1025":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB","16":"FB ZB GB"},E:{"2":"F J K C G HB CB JB KB LB","516":"E A B MB NB g PB"},F:{"1":"n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m QB RB SB TB g VB"},G:{"130":"2 G CB XB EB aB bB cB","516":"dB eB fB gB hB iB"},H:{"130":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C","130":"A"},K:{"130":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"130":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"SVG favicons"};

var linkRelDnsPrefetch={A:{A:{"1":"A B","2":"K C G YB","132":"E"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"16":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"16":"2 AB F BB kB lB mB nB oB pB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"16":"qB"},P:{"1":"J rB","16":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Resource Hints: dns-prefetch"};

var linkRelPreconnect={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z","260":"I M H"},C:{"1":"0 1 3 5 6 7 8 j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h UB OB","129":"i"},D:{"1":"0 1 3 5 6 7 8 p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b QB RB SB TB g VB"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"16":"x"},N:{"2":"A B"},O:{"16":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Resource Hints: preconnect"};

var linkRelPrefetch={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"F BB oB pB","2":"2 AB kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Resource Hints: prefetch"};

var linkRelPreload={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"1":"6 7 8","2":"0 1 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z UB OB","132":"3","578":"5 x"},D:{"1":"0 1 3 5 6 7 8 t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s"},E:{"1":"g PB","2":"F J K C G E A HB CB JB KB LB MB NB","322":"B"},F:{"1":"L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f QB RB SB TB g VB"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB","322":"hB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"132":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"Resource Hints: preload"};

var linkRelPrerender={A:{A:{"1":"B","2":"K C G E A YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"1":"B","2":"A"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"Resource Hints: prerender"};

var localecompare={A:{A:{"1":"B","16":"YB","132":"K C G E A"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","132":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB"},D:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z I M H N O P Q R S"},E:{"1":"A B NB g PB","132":"F J K C G E HB CB JB KB LB MB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"9 E B D QB RB SB TB g VB","132":"4"},G:{"1":"fB gB hB iB","132":"2 G CB XB EB aB bB cB dB eB"},H:{"132":"jB"},I:{"1":"BB oB pB","132":"2 AB F kB lB mB nB"},J:{"132":"C A"},K:{"1":"L","16":"9 A B D g","132":"4"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","132":"A"},O:{"132":"qB"},P:{"1":"J rB","132":"F"},Q:{"132":"sB"},R:{"1":"tB"}},B:6,C:"localeCompare()"};

var matchesselector={A:{A:{"2":"K C G YB","36":"E A B"},B:{"1":"I M H","36":"D w Z"},C:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB","36":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c OB"},D:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","36":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c"},E:{"1":"G E A B LB MB NB g PB","2":"F HB CB","36":"J K C JB KB"},F:{"1":"Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E B QB RB SB TB g","36":"4 9 D I M H N O P VB"},G:{"1":"G cB dB eB fB gB hB iB","2":"CB","36":"2 XB EB aB bB"},H:{"2":"jB"},I:{"1":"BB","2":"kB","36":"2 AB F lB mB nB oB pB"},J:{"36":"C A"},K:{"1":"L","2":"A B","36":"4 9 D g"},L:{"1":"DB"},M:{"1":"x"},N:{"36":"A B"},O:{"1":"qB"},P:{"1":"J rB","36":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"matches() DOM method"};

var matchmedia={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J UB OB"},D:{"1":"0 1 3 5 6 7 8 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F J HB CB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"matchMedia"};

var mathml={A:{A:{"2":"E A B YB","8":"K C G"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","129":"WB AB UB OB"},D:{"1":"T","8":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"A B NB g PB","260":"F J K C G E HB CB JB KB LB MB"},F:{"2":"E","4":"4 9 B D QB RB SB TB g VB","8":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","8":"2 CB XB"},H:{"8":"jB"},I:{"8":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"A","8":"C"},K:{"8":"4 9 A B D L g"},L:{"8":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"4":"qB"},P:{"8":"F J rB"},Q:{"8":"sB"},R:{"8":"tB"}},B:2,C:"MathML"};

var maxlength={A:{A:{"1":"A B","16":"YB","900":"K C G E"},B:{"1025":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 u v z x","900":"WB AB UB OB","1025":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"J HB","900":"F CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"E","132":"4 9 B D QB RB SB TB g VB"},G:{"1":"2 XB EB aB bB dB eB fB gB hB iB","16":"CB","2052":"G cB"},H:{"132":"jB"},I:{"1":"2 AB F mB nB oB pB","16":"kB lB","4097":"BB"},J:{"1":"C A"},K:{"132":"4 9 A B D g","4100":"L"},L:{"4097":"DB"},M:{"4097":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"4097":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"maxlength attribute for input and textarea elements"};

var mediaAttribute={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c","2":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x BB IB DB","16":"FB ZB GB"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F J HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T RB SB TB g VB","2":"E U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"16":"jB"},I:{"1":"2 F BB nB oB pB","16":"AB kB lB mB"},J:{"16":"C A"},K:{"1":"4 D L","16":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"16":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:1,C:"Media attribute"};

var mediaFragments={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c UB OB","132":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"F J K C G E A B D w Z I M H","132":"0 1 3 5 6 7 8 N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J HB CB JB","132":"K C G E A B KB LB MB NB g PB"},F:{"2":"4 9 E B D QB RB SB TB g VB","132":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 CB XB EB aB bB","132":"G cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","132":"BB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"132":"DB"},M:{"132":"x"},N:{"132":"A B"},O:{"2":"qB"},P:{"2":"F J","132":"rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:2,C:"Media Fragments"};

var mediaSessionApi={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"5 6 7 8 x BB IB DB FB ZB GB","2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB","16":"g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t QB RB SB TB g VB","16":"u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"Media Session API"};

var mediacaptureFromelement={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l UB OB","260":"0 1 3 5 6 7 8 m n o p q r s t u v z x"},D:{"1":"BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","324":"0 1 3 5 6 7 8 u v z x"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","132":"B g PB"},F:{"1":"r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB","324":"f L h i j k l m n o p q"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"260":"x"},N:{"2":"A B"},O:{"132":"qB"},P:{"2":"F","132":"J rB"},Q:{"132":"sB"},R:{"2":"tB"}},B:5,C:"Media Capture from DOM Elements API"};

var mediarecorder={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p","194":"q r"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c QB RB SB TB g VB","194":"d e"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"MediaRecorder API"};

var mediasource={A:{A:{"2":"K C G E A YB","260":"B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T UB OB","194":"U V W X Y y a b c d e f L h i j k"},D:{"1":"0 1 3 5 6 7 8 a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M","33":"S T U V W X Y y","66":"H N O P Q R"},E:{"1":"G E A B MB NB g PB","2":"F J K C HB CB JB KB LB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB pB","2":"2 AB F kB lB mB nB oB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"J rB","514":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:4,C:"Media Source Extensions"};

var menu={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C UB OB","132":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j","322":"r s t u","578":"k l m n o p q","2114":"0 1 3 5 6 7 8 v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d QB RB SB TB g VB","322":"e f L h","2114":"i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"1156":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2114":"sB"},R:{"2":"tB"}},B:7,C:"Context menu item (menuitem element)"};

var meter={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I UB OB"},D:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E QB RB SB TB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"meter element"};

var midi={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"Web MIDI API"};

var minmaxwh={A:{A:{"1":"E A B","8":"K YB","129":"C","257":"G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"CSS min/max-width/height"};

var mp3={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","132":"F J K C G E A B D w Z I M H N O P Q UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","2":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"MP3 audio format"};

var mpegDash={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","386":"Q R"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"Dynamic Adaptive Streaming over HTTP (MPEG-DASH)"};

var mpeg4={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P UB OB","4":"Q R S T U V W X Y y a b c d"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","2":"HB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","4":"2 AB F kB lB nB","132":"mB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"260":"x"},N:{"1":"A B"},O:{"4":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"MPEG-4/H.264 video format"};

var multibackgrounds={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 Multiple backgrounds"};

var multicolumn={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"132":"0 1 3 5 6 7 8 v z x","164":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB"},D:{"1":"0 1 3 5 6 7 8 t u v z x BB IB DB FB ZB GB","420":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s"},E:{"1":"A B NB g PB","132":"E MB","164":"C G LB","420":"F J K HB CB JB KB"},F:{"1":"4 9 D L h i j k l m n o p q r s t u v g VB","2":"E B QB RB SB TB","420":"I M H N O P Q R S T U V W X Y y a b c d e f"},G:{"1":"fB gB hB iB","132":"dB eB","164":"G bB cB","420":"2 CB XB EB aB"},H:{"1":"jB"},I:{"1":"BB","420":"2 AB F kB lB mB nB oB pB"},J:{"420":"C A"},K:{"1":"4 9 D g","2":"A B","132":"L"},L:{"1":"DB"},M:{"132":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"J rB","420":"F"},Q:{"132":"sB"},R:{"132":"tB"}},B:4,C:"CSS3 Multiple column layout"};

var mutationEvents={A:{A:{"2":"K C G YB","260":"E A B"},B:{"260":"D w Z I M H"},C:{"2":"WB AB F J UB OB","260":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"16":"F J K C G E A B D w Z","132":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"16":"HB CB","132":"F J K C G E A B JB KB LB MB NB g PB"},F:{"1":"4 D VB","2":"E QB RB SB TB","16":"9 B g","132":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"16":"CB XB","132":"2 G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"16":"kB lB","132":"2 AB F BB mB nB oB pB"},J:{"132":"C A"},K:{"1":"4 D","2":"A","16":"9 B g","132":"L"},L:{"132":"DB"},M:{"260":"x"},N:{"260":"A B"},O:{"132":"qB"},P:{"132":"F J rB"},Q:{"132":"sB"},R:{"132":"tB"}},B:5,C:"Mutation events"};

var mutationobserver={A:{A:{"1":"B","2":"K C G YB","8":"E A"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w UB OB"},D:{"1":"0 1 3 5 6 7 8 W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H","33":"N O P Q R S T U V"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB JB","33":"K"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB","33":"aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"AB kB lB mB","8":"2 F nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","8":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Mutation Observer"};

var namevalueStorage={A:{A:{"1":"G E A B","2":"YB","8":"K C"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","4":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Web Storage - name/value pairs"};

var navTiming={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K UB OB"},D:{"1":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J","33":"K C G E A B D"},E:{"1":"G E A B MB NB g PB","2":"F J K C HB CB JB KB LB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G dB eB fB gB hB iB","2":"2 CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"2 F BB nB oB pB","2":"AB kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"Navigation Timing API"};

var netinfo={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","1028":"8 BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q QB RB SB TB g VB","1028":"r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"kB oB pB","132":"2 AB F lB mB nB","516":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","516":"L"},L:{"516":"DB"},M:{"260":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"132":"F","516":"J rB"},Q:{"2":"sB"},R:{"516":"tB"}},B:7,C:"Network Information API"};

var nodeContains={A:{A:{"16":"YB","644":"E A B","2308":"K C G"},B:{"1":"w Z I M H","16":"D"},C:{"1":"0 1 3 5 6 7 8 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G UB OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"C G E A B KB LB MB NB g PB","16":"F J K HB CB","1668":"JB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"9 E B D QB RB SB TB g","132":"VB"},G:{"1":"G bB cB dB eB fB gB hB iB","16":"2 CB XB EB aB"},H:{"16":"jB"},I:{"1":"BB oB pB","16":"AB kB lB mB","1668":"2 F nB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"1":"J rB","16":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Node.contains()"};

var nodeParentelement={A:{A:{"16":"YB","132":"E A B","260":"K C G"},B:{"1":"w Z I M H","16":"D"},C:{"1":"0 1 3 5 6 7 8 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G UB OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"9 E B QB RB SB TB g","132":"4 D VB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","16":"2 CB XB EB"},H:{"16":"jB"},I:{"1":"2 F BB nB oB pB","16":"AB kB lB mB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"1":"J rB","16":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Node.parentElement"};

var notifications={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB"},D:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F","36":"J K C G E A B D w Z I M H N O P Q"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","36":"BB oB pB"},J:{"1":"A","2":"C"},K:{"2":"4 9 A B D g","36":"L"},L:{"258":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"36":"F","258":"J rB"},Q:{"2":"sB"},R:{"258":"tB"}},B:1,C:"Web Notifications"};

var objectFit={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I","260":"M H"},C:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB"},D:{"1":"0 1 3 5 6 7 8 a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y"},E:{"1":"A B NB g PB","2":"F J K C HB CB JB KB","132":"G E LB MB"},F:{"1":"O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E I M H N QB RB SB","33":"4 9 B D TB g VB"},G:{"1":"fB gB hB iB","2":"2 CB XB EB aB bB","132":"G cB dB eB"},H:{"33":"jB"},I:{"1":"BB pB","2":"2 AB F kB lB mB nB oB"},J:{"2":"C A"},K:{"1":"L","2":"A","33":"4 9 B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 object-fit/object-position"};

var objectObserve={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"f L h i j k l m n o p q r s","2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"S T U V W X Y y a b c d e f","2":"4 9 E B D I M H N O P Q R L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F","2":"J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"Object.observe data binding"};

var objectValues={A:{A:{"8":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 q r s t u v z x","8":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p UB OB"},D:{"1":"1 3 5 6 7 8 z x BB IB DB FB ZB GB","8":"0 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"1":"B NB g PB","8":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"k l m n o p q r s t u v","8":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j QB RB SB TB g VB"},G:{"1":"gB hB iB","8":"2 G CB XB EB aB bB cB dB eB fB"},H:{"8":"jB"},I:{"1":"BB","8":"2 AB F kB lB mB nB oB pB"},J:{"8":"C A"},K:{"1":"L","8":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"8":"A B"},O:{"1":"qB"},P:{"1":"rB","8":"F J"},Q:{"1":"sB"},R:{"8":"tB"}},B:6,C:"Object.values method"};

var objectrtc={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C","130":"A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"Object RTC (ORTC) API for WebRTC"};

var offlineApps={A:{A:{"1":"A B","2":"E YB","8":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","4":"AB","8":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","8":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","2":"E QB","8":"RB SB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"Offline web applications"};

var offscreencanvas={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m UB OB","194":"0 1 3 5 6 7 8 n o p q r s t u v z x"},D:{"2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","322":"5 6 7 8 BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n QB RB SB TB g VB","322":"o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"194":"DB"},M:{"194":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"OffscreenCanvas"};

var oggVorbis={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"A","2":"C"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"Ogg Vorbis audio format"};

var ogv={A:{A:{"2":"K C G YB","8":"E A B"},B:{"1":"H","8":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"1":"x"},N:{"8":"A B"},O:{"1":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"Ogg/Theora video format"};

var olReversed={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H UB OB"},D:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I","16":"M H N O"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB JB","16":"K"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB","16":"D"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"2 CB XB EB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Reversed attribute of ordered lists"};

var onceEventListener={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z I"},C:{"1":"0 1 3 5 6 7 8 t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s UB OB"},D:{"1":"3 5 6 7 8 z x BB IB DB FB ZB GB","2":"0 1 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"F J"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"\"once\" event listener option"};

var onlineStatus={A:{A:{"1":"E A B","2":"K C YB","260":"G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x UB OB","2":"WB AB","516":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},D:{"1":"0 1 3 5 6 7 8 Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB","4":"4"},G:{"1":"2 G EB aB bB cB dB eB fB gB hB iB","16":"CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"A","132":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Online/offline status"};

var opus={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","132":"B g PB"},F:{"1":"P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"Opus"};

var outline={A:{A:{"2":"K C YB","260":"G","388":"E A B"},B:{"1":"I M H","388":"D w Z"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","129":"4","260":"9 E B QB RB SB TB g"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 D L","260":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"388":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS outline properties"};

var padStartEnd={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w Z"},C:{"1":"0 1 3 5 6 7 8 r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q UB OB"},D:{"1":"5 6 7 8 x BB IB DB FB ZB GB","2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"16":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","16":"BB"},J:{"2":"C","16":"A"},K:{"2":"4 9 A B D g","16":"L"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"String.prototype.padStart(), String.prototype.padEnd()"};

var pageTransitionEvents={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"PageTransitionEvent"};

var pagevisibility={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E UB OB","33":"A B D w Z I M H"},D:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w","33":"Z I M H N O P Q R S T U V W X Y y a b"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J K HB CB JB"},F:{"1":"4 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB","33":"I M H N O"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB","33":"oB pB"},J:{"1":"A","2":"C"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"J rB","33":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"Page Visibility"};

var passiveEventListener={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z I"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r UB OB"},D:{"1":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"Passive event listeners"};

var path2d={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w","132":"Z I M H"},C:{"1":"0 1 3 5 6 7 8 r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y UB OB","132":"a b c d e f L h i j k l m n o p q"},D:{"1":"IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e","132":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB"},E:{"1":"A B MB NB g PB","2":"F J K C HB CB JB KB","132":"G E LB"},F:{"2":"4 9 E B D I M H N O P Q R QB RB SB TB g VB","132":"S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"dB eB fB gB hB iB","2":"2 CB XB EB aB bB","16":"G","132":"cB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","132":"BB"},J:{"1":"A","2":"C"},K:{"2":"4 9 A B D g","132":"L"},L:{"132":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"132":"qB"},P:{"132":"F J rB"},Q:{"132":"sB"},R:{"132":"tB"}},B:1,C:"Path2D"};

var paymentRequest={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w","322":"Z"},C:{"2":"0 1 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","4162":"3 5 6 7 8 z x"},D:{"1":"8 BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","194":"0 1 3 5 z x","1090":"6 7"},E:{"1":"g PB","2":"F J K C G E HB CB JB KB LB MB","514":"A B NB"},F:{"1":"r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i QB RB SB TB g VB","194":"j k l m n o p q"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB","514":"fB gB hB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2049":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"194":"sB"},R:{"2":"tB"}},B:5,C:"Payment Request API"};

var permissionsApi={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o UB OB"},D:{"1":"0 1 3 5 6 7 8 m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Permissions API"};

var picture={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c UB OB","578":"d e f L"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f","194":"L"},E:{"1":"A B MB NB g PB","2":"F J K C G E HB CB JB KB LB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S QB RB SB TB g VB","322":"T"},G:{"1":"eB fB gB hB iB","2":"2 G CB XB EB aB bB cB dB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Picture element"};

var ping={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"2":"WB","194":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"194":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Ping attribute"};

var pngAlpha={A:{A:{"1":"C G E A B","2":"YB","8":"K"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"PNG alpha transparency"};

var pointerEvents={A:{A:{"1":"B","2":"K C G E A YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"CSS pointer-events (for HTML)"};

var pointer={A:{A:{"1":"B","2":"K C G E YB","164":"A"},B:{"1":"D w Z I M H"},C:{"2":"WB AB F J UB OB","8":"K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j","328":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x"},D:{"1":"3 5 6 7 8 z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q","8":"R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u","584":"0 1 v"},E:{"2":"F J K HB CB JB","8":"C G E A B KB LB MB NB g PB"},F:{"1":"l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","8":"I M H N O P Q R S T U V W X Y y a b c d e f L h","584":"i j k"},G:{"8":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","8":"2 AB F kB lB mB nB oB pB"},J:{"8":"C A"},K:{"2":"A","8":"4 9 B D L g"},L:{"1":"DB"},M:{"328":"x"},N:{"1":"B","36":"A"},O:{"8":"qB"},P:{"1":"rB","2":"J","8":"F"},Q:{"584":"sB"},R:{"2":"tB"}},B:2,C:"Pointer events"};

var pointerlock={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","2":"D"},C:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w UB OB","33":"Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},D:{"1":"0 1 3 5 6 7 8 L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I","33":"R S T U V W X Y y a b c d e f","66":"M H N O P Q"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:2,C:"Pointer Lock API"};

var progress={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J UB OB"},D:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E QB RB SB TB"},G:{"2":"2 CB XB EB aB","132":"G bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"progress element"};

var promises={A:{A:{"8":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","4":"W X","8":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V UB OB"},D:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","4":"b","8":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a"},E:{"1":"G E A B LB MB NB g PB","8":"F J K C HB CB JB KB"},F:{"1":"P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","4":"O","8":"4 9 E B D I M H N QB RB SB TB g VB"},G:{"1":"G cB dB eB fB gB hB iB","8":"2 CB XB EB aB bB"},H:{"8":"jB"},I:{"1":"BB pB","8":"2 AB F kB lB mB nB oB"},J:{"8":"C A"},K:{"1":"L","8":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"8":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"Promises"};

var proximity={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:4,C:"Proximity API"};

var proxy={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N h i j k l m n o p q r","66":"O P Q R S T U V W X Y y a b c d e f L"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D U V W X Y y a b c d e QB RB SB TB g VB","66":"I M H N O P Q R S T"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"Proxy object"};

var publickeypinning={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d UB OB"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O QB RB SB TB g VB","4":"S","16":"P Q R T"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"Public Key Pinning"};

var pushApi={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m UB OB","257":"0 1 3 5 6 7 8 n p q r s t u z x","1281":"o v"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m","257":"0 1 3 5 6 7 8 t u v z x BB IB DB FB ZB GB","388":"n o p q r s"},E:{"2":"F J K C G E HB CB JB KB LB","514":"A B MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f QB RB SB TB g VB","16":"L h i j k","257":"l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"2":"tB"}},B:5,C:"Push API"};

var queryselector={A:{A:{"1":"E A B","2":"YB","8":"K C","132":"G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","8":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","8":"E QB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"querySelector/querySelectorAll"};

var readonlyAttr={A:{A:{"1":"K C G E A B","16":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","16":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"E QB","132":"4 9 B D RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","16":"2 CB XB EB aB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"L","132":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"257":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"readonly attribute of input and textarea elements"};

var referrerPolicy={A:{A:{"2":"K C G E A YB","132":"B"},B:{"132":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB"},D:{"1":"8 BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P","260":"0 1 3 5 6 7 Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},E:{"1":"g PB","2":"F J K C HB CB JB KB","132":"G E A B LB MB NB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 CB XB EB aB bB","132":"G cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"260":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Referrer Policy"};

var registerprotocolhandler={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB"},D:{"2":"F J K C G E A B D","129":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"9 E B QB RB SB TB g","129":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C","129":"A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"Custom protocol handling"};

var relNoopener={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"rel=noopener"};

var relNoreferrer={A:{A:{"2":"K C G E A YB","132":"B"},B:{"1":"w Z I M H","16":"D"},C:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b UB OB"},D:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z I"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Link type \"noreferrer\""};

var rellist={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M","132":"H"},C:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y UB OB"},D:{"1":"FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s","132":"0 1 3 5 6 7 8 t u v z x BB IB DB"},E:{"1":"E A B MB NB g PB","2":"F J K C G HB CB JB KB LB"},F:{"1":"v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f QB RB SB TB g VB","132":"L h i j k l m n o p q r s t u"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","132":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"132":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"132":"qB"},P:{"2":"F","132":"J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"relList (DOMTokenList)"};

var rem={A:{A:{"1":"B","2":"K C G YB","132":"E A"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"9 E B QB RB SB TB g"},G:{"1":"2 G XB aB bB cB dB eB fB gB hB iB","2":"CB","260":"EB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 D L","2":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"rem (root em) units"};

var requestanimationframe={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","33":"B D w Z I M H N O P Q R","164":"F J K C G E A"},D:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E","33":"R S","164":"N O P Q","420":"A B D w Z I M H"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB JB","33":"K"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB","33":"aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"requestAnimationFrame"};

var requestidlecallback={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"3 5 6 7 8 z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","194":"0 1"},D:{"1":"0 1 3 5 6 7 8 q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"requestIdleCallback"};

var resizeobserver={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"DB FB ZB GB","2":"0 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","194":"1 3 5 6 7 8 z x BB IB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j QB RB SB TB g VB","194":"k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"194":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Resize Observer"};

var resourceTiming={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y UB OB","194":"a b c d"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T"},E:{"1":"g PB","2":"F J K C G E A HB CB JB KB LB MB NB","260":"B"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Resource Timing"};

var restParameters={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"0 1 3 5 6 7 8 q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m","194":"n o p"},E:{"1":"A B NB g PB","2":"F J K C G E HB CB JB KB LB MB"},F:{"1":"d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y QB RB SB TB g VB","194":"a b c"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"Rest parameters"};

var rtcpeerconnection={A:{A:{"2":"K C G E A B YB"},B:{"1":"I M H","2":"D w Z"},C:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB","33":"R S T U V W X Y y a b c d e f L h i j k l m"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R","33":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"2":"4 9 E B D I M H QB RB SB TB g VB","33":"N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","33":"BB"},J:{"2":"C","130":"A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:5,C:"WebRTC Peer-to-peer connections"};

var ruby={A:{A:{"4":"K C G E A B YB"},B:{"4":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x","8":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L UB OB"},D:{"4":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","8":"F"},E:{"4":"J K C G E A B JB KB LB MB NB g PB","8":"F HB CB"},F:{"4":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","8":"4 9 E B D QB RB SB TB g VB"},G:{"4":"G EB aB bB cB dB eB fB gB hB iB","8":"2 CB XB"},H:{"8":"jB"},I:{"4":"2 AB F BB nB oB pB","8":"kB lB mB"},J:{"4":"A","8":"C"},K:{"4":"L","8":"4 9 A B D g"},L:{"4":"DB"},M:{"1":"x"},N:{"4":"A B"},O:{"4":"qB"},P:{"4":"F J rB"},Q:{"4":"sB"},R:{"4":"tB"}},B:1,C:"Ruby annotation"};

var runIn={A:{A:{"1":"G E A B","2":"K C YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a","2":"0 1 3 5 6 7 8 b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K JB","2":"C G E A B LB MB NB g PB","16":"KB","129":"F HB CB"},F:{"1":"4 9 E B D I M H N QB RB SB TB g VB","2":"O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"2 XB EB aB bB","2":"G cB dB eB fB gB hB iB","129":"CB"},H:{"1":"jB"},I:{"1":"2 AB F kB lB mB nB oB","2":"BB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D g","2":"L"},L:{"2":"DB"},M:{"2":"x"},N:{"1":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"display: run-in"};

var sameSiteCookieAttribute={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"6 7 8","2":"0 1 3 5 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"'SameSite' cookie attribute"};

var screenOrientation={A:{A:{"2":"K C G E A YB","36":"B"},B:{"36":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H UB OB","36":"N O P Q R S T U V W X Y y a b c d e f L h i j k l m"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A","36":"B"},O:{"1":"qB"},P:{"1":"J rB","16":"F"},Q:{"2":"sB"},R:{"1":"tB"}},B:5,C:"Screen Orientation"};

var scriptAsync={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F HB CB","132":"J"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"async attribute for external scripts"};

var scriptDefer={A:{A:{"1":"A B","132":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","257":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y UB OB"},D:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"F HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"defer attribute for external scripts"};

var scrollintoview={A:{A:{"2":"K C YB","132":"G E A B"},B:{"132":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","132":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB"},D:{"1":"8 BB IB DB FB ZB GB","132":"0 1 3 5 6 7 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},E:{"2":"F J HB CB","132":"K C G E A B JB KB LB MB NB g PB"},F:{"1":"r s t u v","2":"E QB RB SB TB","16":"9 B g","132":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q VB"},G:{"16":"2 CB XB","132":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"16":"kB lB","132":"2 AB F BB mB nB oB pB"},J:{"132":"C A"},K:{"132":"4 9 A B D L g"},L:{"1":"DB"},M:{"132":"x"},N:{"132":"A B"},O:{"132":"qB"},P:{"132":"F J rB"},Q:{"132":"sB"},R:{"132":"tB"}},B:5,C:"scrollIntoView"};

var scrollintoviewifneeded={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"Element.scrollIntoViewIfNeeded()"};

var sdch={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"6 7 8 BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"SDCH Accept-Encoding/Content-Encoding"};

var selectionApi={A:{A:{"1":"E A B","16":"YB","260":"K C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 v z x","132":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l UB OB","2180":"m n o p q r s t u"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","132":"4 9 E B D QB RB SB TB g VB"},G:{"16":"2","132":"CB XB","516":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","16":"AB F kB lB mB nB","1025":"2"},J:{"1":"A","16":"C"},K:{"1":"L","16":"9 A B D g","132":"4"},L:{"1":"DB"},M:{"132":"x"},N:{"1":"B","16":"A"},O:{"1025":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Selection API"};

var serviceworkers={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z","322":"I M"},C:{"1":"0 1 3 5 6 7 8 n p q r s t u z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b UB OB","194":"c d e f L h i j k l m","513":"o v"},D:{"1":"0 1 3 5 6 7 8 o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i","4":"j k l m n"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V QB RB SB TB g VB","4":"W X Y y a"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","4":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","4":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"4":"sB"},R:{"4":"tB"}},B:5,C:"Service Workers"};

var setimmediate={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"1":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Efficient Script Yielding: setImmediate()"};

var sha2={A:{A:{"1":"K C G E A B","2":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"16":"jB"},I:{"1":"2 AB F BB lB mB nB oB pB","260":"kB"},J:{"1":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"16":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"1":"J rB","16":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"SHA-2 SSL certificates"};

var shadowdom={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB","194":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T","33":"U V W X Y y a b c d"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB","33":"oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","33":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Shadow DOM v0"};

var shadowdomv1={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","322":"5 6 7 8"},D:{"1":"0 1 3 5 6 7 8 z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"2":"F J K C G E HB CB JB KB LB MB","132":"A B NB g PB"},F:{"1":"j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB","132":"fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","2":"F","4":"J"},Q:{"1":"sB"},R:{"2":"tB"}},B:5,C:"Shadow DOM v1"};

var sharedworkers={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"J K JB","2":"F C G E A B HB CB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","2":"E QB RB SB"},G:{"1":"EB aB","2":"2 G CB XB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 B D g","2":"L","16":"A"},L:{"2":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F","2":"J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"Shared Web Workers"};

var sni={A:{A:{"1":"E A B","2":"K YB","132":"C G"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","2":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"Server Name Indication"};

var spdy={A:{A:{"1":"B","2":"K C G E A YB"},B:{"2":"D w Z I M H"},C:{"1":"w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D u v z x UB OB"},D:{"1":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","2":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB"},E:{"1":"G E A B MB NB g PB","2":"F J K C HB CB JB KB LB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i l n","2":"9 E B D j k m o p q r s t u v QB RB SB TB g VB"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB EB aB bB"},H:{"2":"jB"},I:{"1":"2 AB F nB oB pB","2":"BB kB lB mB"},J:{"2":"C A"},K:{"1":"4 L","2":"9 A B D g"},L:{"2":"DB"},M:{"2":"x"},N:{"1":"B","2":"A"},O:{"2":"qB"},P:{"1":"F","2":"J rB"},Q:{"2":"sB"},R:{"16":"tB"}},B:7,C:"SPDY protocol"};

var speechRecognition={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB","322":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T","164":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V QB RB SB TB g VB","164":"W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"164":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"164":"F J rB"},Q:{"164":"sB"},R:{"164":"tB"}},B:7,C:"Speech Recognition API"};

var speechSynthesis={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y UB OB","194":"a b c d e f L h i j k l m n o p q r"},D:{"1":"0 1 c d e f L h i j k l m n o p q r s t u v","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b","257":"3 5 6 7 8 z x BB IB DB FB ZB GB"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"2":"tB"}},B:7,C:"Speech Synthesis API"};

var spellcheckAttribute={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F J HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"4":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"4":"jB"},I:{"4":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"A","4":"C"},K:{"4":"4 9 A B D L g"},L:{"4":"DB"},M:{"4":"x"},N:{"4":"A B"},O:{"4":"qB"},P:{"4":"F J rB"},Q:{"1":"sB"},R:{"4":"tB"}},B:1,C:"Spellcheck attribute"};

var sqlStorage={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"Web SQL Database"};

var srcset={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","260":"D","514":"w Z I"},C:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a UB OB","194":"b c d e f L"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c","260":"d e f L"},E:{"1":"E A B MB NB g PB","2":"F J K C HB CB JB KB","260":"G LB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P QB RB SB TB g VB","260":"Q R S T"},G:{"1":"dB eB fB gB hB iB","2":"2 CB XB EB aB bB","260":"G cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Srcset and sizes attributes"};

var stopimmediatepropagation={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E UB OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"1":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB","16":"D"},G:{"1":"G aB bB cB dB eB fB gB hB iB","16":"2 CB XB EB"},H:{"16":"jB"},I:{"1":"2 F BB nB oB pB","16":"AB kB lB mB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"1":"J rB","16":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Event.stopImmediatePropagation()"};

var stream={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M UB OB","129":"f L h i j k","420":"H N O P Q R S T U V W X Y y a b c d e"},D:{"1":"0 1 3 5 6 7 8 z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P","420":"Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"1":"j k l m n o p q r s t u v","2":"9 E B I M H QB RB SB TB g VB","420":"4 D N O P Q R S T U V W X Y y a b c d e f L h i"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C","420":"A"},K:{"1":"L","2":"9 A B g","420":"4 D"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"rB","420":"F J"},Q:{"420":"sB"},R:{"420":"tB"}},B:4,C:"getUserMedia/Stream API"};

var streams={A:{A:{"2":"K C G E A YB","130":"B"},B:{"16":"D w","260":"Z I","5124":"M H"},C:{"2":"0 1 3 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z UB OB","2626":"5 6 7 8 x"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u","260":"0 1 3 5 v z x","1028":"6 7 8 BB IB DB FB ZB GB"},E:{"2":"F J K C G E HB CB JB KB LB MB","3076":"A B NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h QB RB SB TB g VB","260":"i j k l m n o","1028":"p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB","16":"fB","1028":"gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","260":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","1028":"L"},L:{"1028":"DB"},M:{"2626":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"Streams"};

var stricttransportsecurity={A:{A:{"2":"K C G E A YB","129":"B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"Strict Transport Security"};

var styleScoped={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"WB AB F J K C G E A B D w Z I M H N O P UB OB","322":"3 5 6 7 8 z x"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","194":"P Q R S T U V W X Y y a b c d e f"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"322":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Scoped CSS"};

var subresourceIntegrity={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l UB OB"},D:{"1":"0 1 3 5 6 7 8 o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"1":"b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB","194":"hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"Subresource Integrity"};

var svgCss={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"M H","516":"D w Z I"},C:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","260":"F J K C G E A B D w Z I M H N O P Q R S"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","4":"F"},E:{"1":"J K C G E A B JB KB LB MB NB g PB","2":"HB","132":"F CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"2 G EB aB bB cB dB eB fB gB hB iB","132":"CB XB"},H:{"260":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"L","260":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"SVG in CSS backgrounds"};

var svgFilters={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB"},D:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F","4":"J K C"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"2 CB XB EB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"SVG filters"};

var svgFonts={A:{A:{"2":"E A B YB","8":"K C G"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L","2":"0 1 3 5 6 7 8 u v z x BB IB DB FB ZB GB","130":"h i j k l m n o p q r s t"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","2":"HB"},F:{"1":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB","2":"L h i j k l m n o p q r s t u v","130":"U V W X Y y a b c d e f"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"258":"jB"},I:{"1":"2 AB F nB oB pB","2":"BB kB lB mB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"130":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F","130":"J rB"},Q:{"1":"sB"},R:{"130":"tB"}},B:7,C:"SVG fonts"};

var svgFragment={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"0 1 3 5 6 7 8 t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e","132":"f L h i j k l m n o p q r s"},E:{"1":"g PB","2":"F J K C E A B HB CB JB KB MB NB","132":"G LB"},F:{"1":"4 L h i j k l m n o p q r s t u v","2":"I M H N O P Q R","4":"9 B D RB SB TB g VB","16":"E QB","132":"S T U V W X Y y a b c d e f"},G:{"1":"iB","2":"2 CB XB EB aB bB dB eB fB gB hB","132":"G cB"},H:{"1":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C","132":"A"},K:{"1":"4 L","4":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"J rB","132":"F"},Q:{"132":"sB"},R:{"132":"tB"}},B:2,C:"SVG fragment identifiers"};

var svgHtml={A:{A:{"2":"K C G YB","388":"E A B"},B:{"260":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB","4":"AB"},D:{"4":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"HB CB","4":"F J K C G E A B JB KB LB MB NB g PB"},F:{"4":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"4":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","4":"BB oB pB"},J:{"1":"A","2":"C"},K:{"4":"4 9 A B D L g"},L:{"4":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"4":"F J rB"},Q:{"4":"sB"},R:{"4":"tB"}},B:2,C:"SVG effects for HTML"};

var svgHtml5={A:{A:{"2":"YB","8":"K C G","129":"E A B"},B:{"129":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","8":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","8":"F J K"},E:{"1":"E A B MB NB g PB","8":"F J HB CB","129":"K C G JB KB LB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"9 B TB g","8":"E QB RB SB"},G:{"1":"dB eB fB gB hB iB","8":"2 CB XB","129":"G EB aB bB cB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"kB lB mB","129":"2 AB F nB"},J:{"1":"A","129":"C"},K:{"1":"4 D L","8":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"129":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Inline SVG in HTML5"};

var svgImg={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z I M H N O P Q R S T U V W"},E:{"1":"E A B MB NB g PB","2":"HB","4":"CB","132":"F J K C G JB KB LB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","132":"2 G CB XB EB aB bB cB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"kB lB mB","132":"2 AB F nB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"SVG in HTML img element"};

var svgSmil={A:{A:{"2":"YB","8":"K C G E A B"},B:{"8":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","8":"WB AB UB OB"},D:{"1":"J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n","4":"F","257":"0 1 3 5 6 7 8 o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"K C G E A B KB LB MB NB g PB","8":"HB CB","132":"F J JB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a QB RB SB TB g VB","257":"b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"G aB bB cB dB eB fB gB hB iB","132":"2 CB XB EB"},H:{"2":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"8":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"257":"sB"},R:{"1":"tB"}},B:2,C:"SVG SMIL animation"};

var svg={A:{A:{"2":"YB","8":"K C G","257":"E A B"},B:{"257":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","4":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","4":"HB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"BB oB pB","2":"kB lB mB","132":"2 AB F nB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"257":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"SVG (basic support)"};

var symbols={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e UB OB"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L"},E:{"1":"E A B HB CB JB KB LB MB NB g PB","2":"F J K C G"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"16":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"16":"qB"},P:{"16":"F J rB"},Q:{"16":"sB"},R:{"16":"tB"}},B:6,C:"Symbols"};

var tabindexAttr={A:{A:{"1":"C G E A B","16":"K YB"},B:{"1":"D w Z I M H"},C:{"16":"WB AB UB OB","129":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z"},E:{"16":"F J HB CB","257":"K C G E A B JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","16":"E"},G:{"769":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"16":"jB"},I:{"16":"2 AB F BB kB lB mB nB oB pB"},J:{"16":"C A"},K:{"16":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"16":"A B"},O:{"16":"qB"},P:{"16":"F J rB"},Q:{"2":"sB"},R:{"16":"tB"}},B:1,C:"tabindex global attribute"};

var templateLiterals={A:{A:{"2":"K C G E A B YB"},B:{"1":"w Z I M H","16":"D"},C:{"1":"0 1 3 5 6 7 8 d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c UB OB"},D:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},E:{"1":"A B MB NB g PB","2":"F J K C G E HB CB JB KB LB"},F:{"1":"Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X QB RB SB TB g VB"},G:{"1":"dB eB fB gB hB iB","2":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:6,C:"ES6 Template Literals (Template Strings)"};

var template={A:{A:{"2":"K C G E A B YB"},B:{"2":"D","388":"w Z I M H"},C:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q UB OB"},D:{"1":"0 1 3 5 6 7 8 e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U","132":"V W X Y y a b c d"},E:{"1":"E A B MB NB g PB","2":"F J K C HB CB JB","388":"G LB","514":"KB"},F:{"1":"R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","132":"I M H N O P Q"},G:{"1":"dB eB fB gB hB iB","2":"2 CB XB EB aB bB","388":"G cB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"HTML templates"};

var testfeat={A:{A:{"2":"K C G A B YB","16":"E"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","16":"F J"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"B D"},E:{"2":"F K HB CB JB","16":"J C G E A B KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB VB","16":"g"},G:{"2":"2 CB XB EB aB","16":"G bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB nB oB pB","16":"mB"},J:{"2":"A","16":"C"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"Test feature - updated"};

var textDecoration={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J UB OB","1028":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","1060":"K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U","226":"0 1 3 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z","2052":"5 6 7 8 x BB IB DB FB ZB GB"},E:{"2":"F J K C HB CB JB KB","804":"G E A B MB NB g PB","1316":"LB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d QB RB SB TB g VB","226":"e f L h i j k l m","2052":"n o p q r s t u v"},G:{"2":"2 CB XB EB aB bB","292":"G cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2052":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2052":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:4,C:"text-decoration styling"};

var textEmphasis={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n UB OB","322":"o"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T","164":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"G E A B LB MB NB g PB","2":"F J K HB CB JB","164":"C KB"},F:{"2":"4 9 E B D QB RB SB TB g VB","164":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB","164":"BB oB pB"},J:{"2":"C","164":"A"},K:{"2":"4 9 A B D g","164":"L"},L:{"164":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"164":"qB"},P:{"164":"F J rB"},Q:{"164":"sB"},R:{"164":"tB"}},B:4,C:"text-emphasis styling"};

var textOverflow={A:{A:{"1":"K C G E A B","2":"YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","8":"WB AB F J K UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","33":"E QB RB SB TB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 L","33":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"CSS3 Text-overflow"};

var textSizeAdjust={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"1 3 5 6 7 8 z x BB IB DB FB ZB GB","2":"0 F J K C G E A B D w Z I M H N O P Q R S T U W X Y y a b c d e f L h i j k l m n o p q r s t u v","258":"V"},E:{"2":"F J K C G E A B HB CB KB LB MB NB g PB","258":"JB"},F:{"1":"m o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l n QB RB SB TB g VB"},G:{"2":"2 CB XB","33":"G EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"33":"x"},N:{"161":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"CSS text-size-adjust"};

var textStroke={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z","161":"I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q UB OB","161":"0 1 3 5 6 7 8 s t u v z x","450":"r"},D:{"33":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"B g PB","33":"F J K C G E A HB CB JB KB LB MB NB"},F:{"2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"33":"2 G XB EB aB bB cB dB eB fB gB hB iB","36":"CB"},H:{"2":"jB"},I:{"2":"AB","33":"2 F BB kB lB mB nB oB pB"},J:{"33":"C A"},K:{"2":"4 9 A B D g","33":"L"},L:{"33":"DB"},M:{"161":"x"},N:{"2":"A B"},O:{"33":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"33":"tB"}},B:7,C:"CSS text-stroke and text-fill"};

var textcontent={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","16":"HB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","16":"E"},G:{"1":"2 G XB EB aB bB cB dB eB fB gB hB iB","16":"CB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Node.textContent"};

var textencoder={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N UB OB","132":"O"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"2":"sB"},R:{"1":"tB"}},B:1,C:"TextEncoder & TextDecoder"};

var tls11={A:{A:{"1":"B","2":"K C YB","66":"G E A"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R UB OB","66":"S"},D:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B D QB RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"1":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"1":"A","2":"C"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","66":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"TLS 1.1"};

var tls12={A:{A:{"1":"B","2":"K C YB","66":"G E A"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S UB OB","66":"T U V"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"1":"C G E A B LB MB NB g PB","2":"F J K HB CB JB KB"},F:{"1":"4 H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E I M QB","66":"9 B D RB SB TB g VB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"1":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"1":"A","2":"C"},K:{"1":"4 L","2":"9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","66":"A"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"TLS 1.2"};

var tls13={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t UB OB","66":"u"},D:{"1":"3 5 6 7 8 x BB IB DB FB ZB GB","2":"0 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","66":"1 z"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k QB RB SB TB g VB","66":"l"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","16":"BB"},J:{"2":"C","16":"A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"16":"x"},N:{"2":"A","16":"B"},O:{"16":"qB"},P:{"1":"rB","16":"F J"},Q:{"16":"sB"},R:{"16":"tB"}},B:6,C:"TLS 1.3"};

var tokenBinding={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z","257":"I M H"},C:{"2":"0 1 3 5 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","16":"6 7 8"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h","16":"0 1 3 i j k l m n o p q r s t u v z x","194":"5 6 7 8 BB IB DB FB ZB GB"},E:{"2":"F J K C G HB CB JB KB LB","16":"E A B MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y QB RB SB TB g VB","16":"y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB","16":"dB eB fB gB hB iB"},H:{"16":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","16":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","16":"L"},L:{"16":"DB"},M:{"16":"x"},N:{"2":"A","16":"B"},O:{"16":"qB"},P:{"16":"F J rB"},Q:{"16":"sB"},R:{"16":"tB"}},B:6,C:"Token Binding"};

var touch={A:{A:{"2":"K C G E YB","8":"A B"},B:{"578":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 N O P Q R S T v z x","2":"WB AB UB OB","4":"F J K C G E A B D w Z I M H","194":"U V W X Y y a b c d e f L h i j k l m n o p q r s t u"},D:{"1":"0 1 3 5 6 7 8 R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"8":"A","260":"B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"Touch events"};

var transforms2d={A:{A:{"2":"YB","8":"K C G","129":"A B","161":"E"},B:{"129":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","33":"F J K C G E A B D w Z I UB OB"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","33":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e"},E:{"1":"E A B MB NB g PB","33":"F J K C G HB CB JB KB LB"},F:{"1":"4 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB","33":"9 B D I M H N O P Q R SB TB g VB"},G:{"1":"dB eB fB gB hB iB","33":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","33":"2 AB F kB lB mB nB oB pB"},J:{"33":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS3 2D Transforms"};

var transforms3d={A:{A:{"2":"K C G E YB","132":"A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E UB OB","33":"A B D w Z I"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B","33":"D w Z I M H N O P Q R S T U V W X Y y a b c d e"},E:{"2":"HB CB","33":"F J K C G JB KB LB","257":"E A B MB NB g PB"},F:{"1":"S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R"},G:{"33":"2 G CB XB EB aB bB cB","257":"dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"kB lB mB","33":"2 AB F nB oB pB"},J:{"33":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS3 3D Transforms"};

var ttf={A:{A:{"2":"K C G YB","132":"E A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v RB SB TB g VB","2":"E QB"},G:{"1":"2 G EB aB bB cB dB eB fB gB hB iB","2":"CB XB"},H:{"2":"jB"},I:{"1":"2 AB F BB lB mB nB oB pB","2":"kB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"TTF/OTF - TrueType and OpenType font support"};

var typedarrays={A:{A:{"1":"B","2":"K C G E YB","132":"A"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB","260":"JB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"9 E B QB RB SB TB g"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"CB XB","260":"2"},H:{"1":"jB"},I:{"1":"2 F BB nB oB pB","2":"AB kB lB mB"},J:{"1":"A","2":"C"},K:{"1":"4 D L","2":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"Typed Arrays"};

var u2f={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p UB OB","322":"0 1 3 5 6 7 8 q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L","130":"h i j"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"j l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i k QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:6,C:"FIDO U2F API"};

var unhandledrejection={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB","16":"hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"unhandledrejection/rejectionhandled events"};

var upgradeinsecurerequests={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k UB OB"},D:{"1":"0 1 3 5 6 7 8 m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Upgrade Insecure Requests"};

var url={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U UB OB"},D:{"1":"0 1 3 5 6 7 8 b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R","130":"S T U V W X Y y a"},E:{"1":"G E A B LB MB NB g PB","2":"F J K HB CB JB KB","130":"C"},F:{"1":"O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","130":"I M H N"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB EB aB","130":"bB"},H:{"2":"jB"},I:{"1":"BB pB","2":"2 AB F kB lB mB nB","130":"oB"},J:{"2":"C","130":"A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"URL API"};

var urlsearchparams={A:{A:{"2":"K C G E A B YB"},B:{"1":"H","2":"D w Z I M"},C:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB","132":"Y y a b c d e f L h i j k l m"},D:{"1":"0 1 3 5 6 7 8 s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r"},E:{"1":"B NB g PB","2":"F J K C G E A HB CB JB KB LB MB"},F:{"1":"f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB"},G:{"1":"gB hB iB","2":"2 G CB XB EB aB bB cB dB eB fB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"J rB","2":"F"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"URLSearchParams"};

var useStrict={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB"},D:{"1":"0 1 3 5 6 7 8 w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F HB CB","132":"J JB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","2":"9 E B QB RB SB TB g"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 AB F BB nB oB pB","2":"kB lB mB"},J:{"1":"C A"},K:{"1":"4 9 D L","2":"A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"ECMAScript 5 Strict Mode"};

var userSelectNone={A:{A:{"2":"K C G E YB","33":"A B"},B:{"33":"D w Z I M H"},C:{"33":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"1 3 5 6 7 8 z x BB IB DB FB ZB GB","33":"0 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},E:{"33":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","33":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j"},G:{"33":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","33":"2 AB F kB lB mB nB oB pB"},J:{"33":"C A"},K:{"2":"4 9 A B D g","33":"L"},L:{"1":"DB"},M:{"33":"x"},N:{"33":"A B"},O:{"2":"qB"},P:{"33":"F J rB"},Q:{"33":"sB"},R:{"2":"tB"}},B:5,C:"CSS user-select: none"};

var userTiming={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L UB OB"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"User Timing API"};

var variableFonts={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M","1028":"H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","1346":"0 1 3 5 6 7 8 z x"},D:{"2":"0 1 3 5 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","194":"6 7 8","1028":"BB IB DB FB ZB GB"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","513":"B g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r QB RB SB TB g VB","1028":"s t u v"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","1028":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1028":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:5,C:"Variable fonts"};

var vibration={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A UB OB","33":"B D w Z I"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"Vibration API"};

var video={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","260":"F J K C G E A B D w Z I M H N O UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A JB KB LB MB NB","2":"HB CB","513":"B g PB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB","513":"hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","132":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Video element"};

var videotracks={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J K HB CB JB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:1,C:"Video Tracks"};

var viewportUnits={A:{A:{"2":"K C G YB","132":"E","260":"A B"},B:{"1":"M H","260":"D w Z I"},C:{"1":"0 1 3 5 6 7 8 O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N UB OB"},D:{"1":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O","260":"P Q R S T U"},E:{"1":"C G E A B KB LB MB NB g PB","2":"F J HB CB JB","260":"K"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB EB","516":"bB","772":"aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"260":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"Viewport units: vw, vh, vmin, vmax"};

var waiAria={A:{A:{"2":"K C YB","4":"G E A B"},B:{"4":"D w Z I M H"},C:{"4":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"4":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"HB CB","4":"F J K C G E A B JB KB LB MB NB g PB"},F:{"2":"E","4":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"4":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"4":"jB"},I:{"2":"2 AB F kB lB mB nB","4":"BB oB pB"},J:{"2":"C A"},K:{"4":"4 9 A B D L g"},L:{"4":"DB"},M:{"4":"x"},N:{"4":"A B"},O:{"2":"qB"},P:{"4":"F J rB"},Q:{"4":"sB"},R:{"4":"tB"}},B:2,C:"WAI-ARIA Accessibility features"};

var wasm={A:{A:{"2":"K C G E A B YB"},B:{"1":"M H","2":"D w Z","578":"I"},C:{"1":"0 1 3 5 6 7 8 z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p UB OB","194":"q r s t u","1025":"v"},D:{"1":"5 6 7 8 x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t","322":"0 1 3 u v z"},E:{"1":"B g PB","2":"F J K C G E A HB CB JB KB LB MB NB"},F:{"1":"n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L QB RB SB TB g VB","322":"h i j k l m"},G:{"1":"hB iB","2":"2 G CB XB EB aB bB cB dB eB fB gB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"322":"sB"},R:{"2":"tB"}},B:6,C:"WebAssembly"};

var wav={A:{A:{"2":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB AB"},D:{"1":"0 1 3 5 6 7 8 G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v SB TB g VB","2":"E QB RB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","16":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"Wav audio format"};

var wbrElement={A:{A:{"1":"K C YB","2":"G E A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B CB JB KB LB MB NB g PB","16":"HB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","16":"E"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","16":"2 CB XB"},H:{"1":"jB"},I:{"1":"2 AB F BB mB nB oB pB","16":"kB lB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"wbr (word break opportunity) element"};

var webAnimation={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"6 7 8","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b UB OB","516":"0 1 3 5 q r s t u v z x","580":"c d e f L h i j k l m n o p"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e","132":"f L h","260":"0 1 3 5 6 7 8 i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A HB CB JB KB LB MB NB","1090":"B g PB"},F:{"2":"4 9 E B D I M H N O P Q R QB RB SB TB g VB","132":"S T U","260":"V W X Y y a b c d e f L h i j k l m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB","1090":"hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","260":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","260":"L"},L:{"260":"DB"},M:{"516":"x"},N:{"2":"A B"},O:{"260":"qB"},P:{"260":"F J rB"},Q:{"260":"sB"},R:{"260":"tB"}},B:5,C:"Web Animations API"};

var webAppManifest={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L"},E:{"1":"g PB","2":"F J K C G E A B HB CB JB KB LB MB NB"},F:{"1":"b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a QB RB SB TB g VB"},G:{"1":"iB","2":"2 G CB XB EB aB bB cB dB eB fB gB hB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"Web App Manifest"};

var webBluetooth={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n","194":"o p q r s t u v","706":"0 1 z","1025":"3 5 6 7 8 x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e QB RB SB TB g VB","450":"f L h i","706":"j k l","1025":"m n o p q r s t u v"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB pB","1025":"BB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1025":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"rB","2":"F J"},Q:{"706":"sB"},R:{"2":"tB"}},B:7,C:"Web Bluetooth"};

var webShare={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"2":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","258":"N O P Q R S T"},E:{"2":"F J K C G E A B HB CB JB LB MB NB g PB","16":"KB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F kB lB mB nB oB","514":"BB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"514":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F","514":"J rB"},Q:{"2":"sB"},R:{"16":"tB"}},B:7,C:"Web Share API"};

var webgl={A:{A:{"2":"YB","8":"K C G E A","129":"B"},B:{"129":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","129":"F J K C G E A B D w Z I M H N O P Q R S"},D:{"1":"0 1 3 5 6 7 8 c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C","129":"G E A B D w Z I M H N O P Q R S T U V W X Y y a b"},E:{"1":"G E A B MB NB g PB","2":"F J HB CB","129":"K C JB KB LB"},F:{"1":"O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB","129":"4 D I M H N"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB EB aB bB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"1":"A","2":"C"},K:{"1":"4 D L","2":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"8":"A","129":"B"},O:{"129":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"WebGL - 3D Canvas graphics"};

var webgl2={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T UB OB","194":"l m n","450":"U V W X Y y a b c d e f L h i j k","2242":"o p q r s t"},D:{"1":"3 5 6 7 8 x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l","578":"0 1 m n o p q r s t u v z"},E:{"2":"F J K C G E A HB CB JB KB LB MB","1090":"B NB g PB"},F:{"1":"m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"578":"sB"},R:{"2":"tB"}},B:6,C:"WebGL 2.0"};

var webm={A:{A:{"2":"K C G YB","8":"E A B"},B:{"4":"Z I M H","8":"D w"},C:{"1":"0 1 3 5 6 7 8 X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","4":"F J K C G E A B D w Z I M H N O P Q R S T U V W"},D:{"1":"0 1 3 5 6 7 8 U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J","4":"K C G E A B D w Z I M H N O P Q R S T"},E:{"2":"HB","8":"F J K C G E A B CB JB KB LB MB NB g PB"},F:{"1":"M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB SB","4":"4 9 B D I TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"1":"BB","2":"kB lB","4":"2 AB F mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D g","4":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"8":"A B"},O:{"1":"qB"},P:{"1":"J rB","4":"F"},Q:{"1":"sB"},R:{"1":"tB"}},B:6,C:"WebM video format"};

var webp={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"WB AB UB OB","8":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J","8":"K C G","132":"E A B D w Z I M H N O P Q R"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB SB","8":"B TB","132":"9 g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 BB oB pB","2":"AB kB lB mB","132":"F nB"},J:{"2":"C A"},K:{"1":"4 9 D L g","2":"A","132":"B"},L:{"1":"DB"},M:{"8":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:7,C:"WebP image format"};

var websockets={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB UB OB","132":"F J","292":"K C G E A"},D:{"1":"0 1 3 5 6 7 8 M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z","260":"I"},E:{"1":"C G E A B LB MB NB g PB","2":"F HB CB","132":"J JB","260":"K KB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB SB TB","132":"9 B D g VB"},G:{"1":"G aB bB cB dB eB fB gB hB iB","2":"CB XB","132":"2 EB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","129":"C"},K:{"1":"4 L","2":"A","132":"9 B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Web Sockets"};

var webusb={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"2":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"8 BB IB DB FB ZB GB","2":"0 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","66":"1 3 5 6 7 z x"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"r s t u v","2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j QB RB SB TB g VB","66":"k l m n o p q"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"1":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"2":"F J rB"},Q:{"2":"sB"},R:{"2":"tB"}},B:7,C:"WebUSB"};

var webvr={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z","513":"I M H"},C:{"2":"0 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v UB OB","129":"3 5 6 7 8 z x","194":"1"},D:{"2":"0 1 3 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z","322":"5 6 7 8 x BB IB DB FB ZB GB"},E:{"2":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"2":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"2":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"2":"jB"},I:{"2":"2 AB F BB kB lB mB nB oB pB"},J:{"2":"C A"},K:{"2":"4 9 A B D L g"},L:{"2049":"DB"},M:{"2":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1025":"F","1028":"J rB"},Q:{"2":"sB"},R:{"322":"tB"}},B:7,C:"WebVR API"};

var webvtt={A:{A:{"1":"A B","2":"K C G E YB"},B:{"1":"D w Z I M H"},C:{"2":"WB AB F J K C G E A B D w Z I M H N O P Q R S UB OB","66":"T U V W X Y y","129":"0 1 3 5 6 7 8 a b c d e f L h i j k l m n o p q r s t u v z x"},D:{"1":"0 1 3 5 6 7 8 N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H"},E:{"1":"K C G E A B KB LB MB NB g PB","2":"F J HB CB JB"},F:{"1":"I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","2":"2 CB XB EB aB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB F kB lB mB nB"},J:{"1":"A","2":"C"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"B","2":"A"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"WebVTT - Web Video Text Tracks"};

var webworkers={A:{A:{"1":"A B","2":"YB","8":"K C G E"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","8":"WB AB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","8":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v TB g VB","2":"E QB","8":"RB SB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"BB kB oB pB","2":"2 AB F lB mB nB"},J:{"1":"C A"},K:{"1":"4 9 B D L g","8":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Web Workers"};

var willChange={A:{A:{"2":"K C G E A B YB"},B:{"2":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X UB OB","194":"Y y a b c d e"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e"},E:{"1":"A B MB NB g PB","2":"F J K C G E HB CB JB KB LB"},F:{"1":"T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R S QB RB SB TB g VB"},G:{"1":"eB fB gB hB iB","2":"2 G CB XB EB aB bB cB dB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS will-change property"};

var woff={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x OB","2":"WB AB UB"},D:{"1":"0 1 3 5 6 7 8 J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F"},E:{"1":"K C G E A B JB KB LB MB NB g PB","2":"F J HB CB"},F:{"1":"4 9 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v g VB","2":"E B QB RB SB TB"},G:{"1":"G EB aB bB cB dB eB fB gB hB iB","2":"2 CB XB"},H:{"2":"jB"},I:{"1":"BB oB pB","2":"2 AB kB lB mB nB","130":"F"},J:{"1":"C A"},K:{"1":"4 9 B D L g","2":"A"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:2,C:"WOFF - Web Open Font Format"};

var woff2={A:{A:{"2":"K C G E A B YB"},B:{"1":"Z I M H","2":"D w"},C:{"1":"0 1 3 5 6 7 8 i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h UB OB"},D:{"1":"0 1 3 5 6 7 8 f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","2":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e"},E:{"2":"F J K C G E HB CB JB KB LB MB","132":"A B NB g PB"},F:{"1":"S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D I M H N O P Q R QB RB SB TB g VB"},G:{"1":"fB gB hB iB","2":"2 G CB XB EB aB bB cB dB eB"},H:{"2":"jB"},I:{"1":"BB","2":"2 AB F kB lB mB nB oB pB"},J:{"2":"C A"},K:{"1":"L","2":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"2":"A B"},O:{"2":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"WOFF 2.0 - Web Open Font Format"};

var wordBreak={A:{A:{"1":"K C G E A B YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB F J K C G E A B D w Z UB OB"},D:{"1":"0 1 3 5 6 7 8 n o p q r s t u v z x BB IB DB FB ZB GB","4":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m"},E:{"1":"E A B MB NB g PB","4":"F J K C G HB CB JB KB LB"},F:{"1":"a b c d e f L h i j k l m n o p q r s t u v","2":"4 9 E B D QB RB SB TB g VB","4":"I M H N O P Q R S T U V W X Y y"},G:{"1":"dB eB fB gB hB iB","4":"2 G CB XB EB aB bB cB"},H:{"2":"jB"},I:{"1":"BB","4":"2 AB F kB lB mB nB oB pB"},J:{"4":"C A"},K:{"2":"4 9 A B D g","4":"L"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"4":"qB"},P:{"1":"F J rB"},Q:{"4":"sB"},R:{"1":"tB"}},B:5,C:"CSS3 word-break"};

var wordwrap={A:{A:{"4":"K C G E A B YB"},B:{"4":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 s t u v z x","2":"WB AB","4":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r UB OB"},D:{"1":"0 1 3 5 6 7 8 S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","4":"F J K C G E A B D w Z I M H N O P Q R"},E:{"1":"C G E A B KB LB MB NB g PB","4":"F J K HB CB JB"},F:{"1":"4 I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"E QB RB","4":"9 B D SB TB g VB"},G:{"1":"G bB cB dB eB fB gB hB iB","4":"2 CB XB EB aB"},H:{"4":"jB"},I:{"1":"BB oB pB","4":"2 AB F kB lB mB nB"},J:{"1":"A","4":"C"},K:{"1":"L","4":"4 9 A B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"4":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:5,C:"CSS3 Overflow-wrap"};

var xDocMessaging={A:{A:{"2":"K C YB","132":"G E","260":"A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB","2":"WB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B JB KB LB MB NB g PB","2":"HB CB"},F:{"1":"4 9 B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB","2":"E"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"4":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"Cross-document messaging"};

var xFrameOptions={A:{A:{"1":"G E A B","2":"K C YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","4":"F J K C G E A B D w Z I M H","16":"WB AB UB OB"},D:{"4":"0 1 3 5 6 7 8 V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K C G E A B D w Z I M H N O P Q R S T U"},E:{"4":"K C G E A B JB KB LB MB NB g PB","16":"F J HB CB"},F:{"4":"4 D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v VB","16":"9 E B QB RB SB TB g"},G:{"4":"G bB cB dB eB fB gB hB iB","16":"2 CB XB EB aB"},H:{"2":"jB"},I:{"4":"2 F BB nB oB pB","16":"AB kB lB mB"},J:{"4":"C A"},K:{"4":"4 L","16":"9 A B D g"},L:{"4":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"4":"qB"},P:{"4":"F J rB"},Q:{"4":"sB"},R:{"4":"tB"}},B:6,C:"X-Frame-Options HTTP header"};

var xhr2={A:{A:{"2":"K C G E YB","132":"A B"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","2":"WB AB","260":"A B","388":"K C G E","900":"F J UB OB"},D:{"1":"0 1 3 5 6 7 8 a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","16":"F J K","132":"Y y","388":"C G E A B D w Z I M H N O P Q R S T U V W X"},E:{"1":"G E A B LB MB NB g PB","2":"F HB CB","132":"C KB","388":"J K JB"},F:{"1":"4 D N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","2":"9 E B QB RB SB TB g VB","132":"I M H"},G:{"1":"G cB dB eB fB gB hB iB","2":"2 CB XB","132":"bB","388":"EB aB"},H:{"2":"jB"},I:{"1":"BB pB","2":"kB lB mB","388":"oB","900":"2 AB F nB"},J:{"132":"A","388":"C"},K:{"1":"4 D L","2":"9 A B g"},L:{"1":"DB"},M:{"1":"x"},N:{"132":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:1,C:"XMLHttpRequest advanced features"};

var xhtml={A:{A:{"1":"E A B","2":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"1":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"1":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"1":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"1":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"1":"jB"},I:{"1":"2 AB F BB kB lB mB nB oB pB"},J:{"1":"C A"},K:{"1":"4 9 A B D L g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"2":"tB"}},B:1,C:"XHTML served as application/xhtml+xml"};

var xhtmlsmil={A:{A:{"2":"E A B YB","4":"K C G"},B:{"2":"D w Z I M H"},C:{"8":"0 1 3 5 6 7 8 WB AB F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x UB OB"},D:{"8":"0 1 3 5 6 7 8 F J K C G E A B D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB"},E:{"8":"F J K C G E A B HB CB JB KB LB MB NB g PB"},F:{"8":"4 9 E B D I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v QB RB SB TB g VB"},G:{"8":"2 G CB XB EB aB bB cB dB eB fB gB hB iB"},H:{"8":"jB"},I:{"8":"2 AB F BB kB lB mB nB oB pB"},J:{"8":"C A"},K:{"8":"4 9 A B D L g"},L:{"8":"DB"},M:{"8":"x"},N:{"2":"A B"},O:{"8":"qB"},P:{"8":"F J rB"},Q:{"8":"sB"},R:{"8":"tB"}},B:7,C:"XHTML+SMIL animation"};

var xmlSerializer={A:{A:{"1":"A B","132":"E","260":"K C G YB"},B:{"1":"D w Z I M H"},C:{"1":"0 1 3 5 6 7 8 D w Z I M H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v z x","132":"B","260":"WB AB F J K C UB OB","516":"G E A"},D:{"1":"0 1 3 5 6 7 8 y a b c d e f L h i j k l m n o p q r s t u v z x BB IB DB FB ZB GB","132":"F J K C G E A B D w Z I M H N O P Q R S T U V W X Y"},E:{"1":"G E A B LB MB NB g PB","132":"F J K C HB CB JB KB"},F:{"1":"H N O P Q R S T U V W X Y y a b c d e f L h i j k l m n o p q r s t u v","16":"E QB","132":"4 9 B D I M RB SB TB g VB"},G:{"1":"G cB dB eB fB gB hB iB","132":"2 CB XB EB aB bB"},H:{"132":"jB"},I:{"1":"BB oB pB","132":"2 AB F kB lB mB nB"},J:{"132":"C A"},K:{"1":"L","16":"A","132":"4 9 B D g"},L:{"1":"DB"},M:{"1":"x"},N:{"1":"A B"},O:{"1":"qB"},P:{"1":"F J rB"},Q:{"1":"sB"},R:{"1":"tB"}},B:4,C:"DOM Parsing and Serialization"};

var features$1={"aac":aac,"ac3-ec3":ac3Ec3,"addeventlistener":addeventlistener,"alternate-stylesheet":alternateStylesheet,"ambient-light":ambientLight,"apng":apng,"arrow-functions":arrowFunctions,"asmjs":asmjs,"async-functions":asyncFunctions,"atob-btoa":atobBtoa,"audio-api":audioApi,"audio":audio,"audiotracks":audiotracks,"autofocus":autofocus,"auxclick":auxclick,"background-attachment":backgroundAttachment,"background-img-opts":backgroundImgOpts,"background-position-x-y":backgroundPositionXY,"background-repeat-round-space":backgroundRepeatRoundSpace,"background-sync":backgroundSync,"battery-status":batteryStatus,"beacon":beacon,"beforeafterprint":beforeafterprint,"blobbuilder":blobbuilder,"bloburls":bloburls,"border-image":borderImage,"border-radius":borderRadius,"broadcastchannel":broadcastchannel,"brotli":brotli,"calc":calc,"canvas-blending":canvasBlending,"canvas-text":canvasText,"canvas":canvas,"ch-unit":chUnit,"chacha20-poly1305":chacha20Poly1305,"channel-messaging":channelMessaging,"childnode-remove":childnodeRemove,"classlist":classlist,"client-hints-dpr-width-viewport":clientHintsDprWidthViewport,"clipboard":clipboard,"comparedocumentposition":comparedocumentposition,"console-basic":consoleBasic,"console-time":consoleTime,"const":_const,"constraint-validation":constraintValidation,"contenteditable":contenteditable,"contentsecuritypolicy":contentsecuritypolicy,"contentsecuritypolicy2":contentsecuritypolicy2,"cors":cors,"credential-management":credentialManagement,"cryptography":cryptography,"css-all":cssAll,"css-animation":cssAnimation,"css-any-link":cssAnyLink,"css-appearance":cssAppearance,"css-apply-rule":cssApplyRule,"css-at-counter-style":cssAtCounterStyle,"css-backdrop-filter":cssBackdropFilter,"css-background-offsets":cssBackgroundOffsets,"css-backgroundblendmode":cssBackgroundblendmode,"css-boxdecorationbreak":cssBoxdecorationbreak,"css-boxshadow":cssBoxshadow,"css-canvas":cssCanvas,"css-caret-color":cssCaretColor,"css-case-insensitive":cssCaseInsensitive,"css-clip-path":cssClipPath,"css-conic-gradients":cssConicGradients,"css-containment":cssContainment,"css-counters":cssCounters,"css-crisp-edges":cssCrispEdges,"css-cross-fade":cssCrossFade,"css-default-pseudo":cssDefaultPseudo,"css-descendant-gtgt":cssDescendantGtgt,"css-deviceadaptation":cssDeviceadaptation,"css-dir-pseudo":cssDirPseudo,"css-display-contents":cssDisplayContents,"css-element-function":cssElementFunction,"css-exclusions":cssExclusions,"css-featurequeries":cssFeaturequeries,"css-filter-function":cssFilterFunction,"css-filters":cssFilters,"css-first-letter":cssFirstLetter,"css-first-line":cssFirstLine,"css-fixed":cssFixed,"css-focus-visible":cssFocusVisible,"css-focus-within":cssFocusWithin,"css-font-rendering-controls":cssFontRenderingControls,"css-font-stretch":cssFontStretch,"css-gencontent":cssGencontent,"css-gradients":cssGradients,"css-grid":cssGrid,"css-hanging-punctuation":cssHangingPunctuation,"css-has":cssHas,"css-hyphenate":cssHyphenate,"css-hyphens":cssHyphens,"css-image-orientation":cssImageOrientation,"css-image-set":cssImageSet,"css-in-out-of-range":cssInOutOfRange,"css-indeterminate-pseudo":cssIndeterminatePseudo,"css-initial-letter":cssInitialLetter,"css-initial-value":cssInitialValue,"css-letter-spacing":cssLetterSpacing,"css-line-clamp":cssLineClamp,"css-logical-props":cssLogicalProps,"css-marker-pseudo":cssMarkerPseudo,"css-masks":cssMasks,"css-matches-pseudo":cssMatchesPseudo,"css-media-interaction":cssMediaInteraction,"css-media-resolution":cssMediaResolution,"css-media-scripting":cssMediaScripting,"css-mediaqueries":cssMediaqueries,"css-mixblendmode":cssMixblendmode,"css-motion-paths":cssMotionPaths,"css-namespaces":cssNamespaces,"css-not-sel-list":cssNotSelList,"css-nth-child-of":cssNthChildOf,"css-opacity":cssOpacity,"css-optional-pseudo":cssOptionalPseudo,"css-overflow-anchor":cssOverflowAnchor,"css-overscroll-behavior":cssOverscrollBehavior,"css-page-break":cssPageBreak,"css-paged-media":cssPagedMedia,"css-paint-api":cssPaintApi,"css-placeholder-shown":cssPlaceholderShown,"css-placeholder":cssPlaceholder,"css-read-only-write":cssReadOnlyWrite,"css-rebeccapurple":cssRebeccapurple,"css-reflections":cssReflections,"css-regions":cssRegions,"css-repeating-gradients":cssRepeatingGradients,"css-resize":cssResize,"css-revert-value":cssRevertValue,"css-rrggbbaa":cssRrggbbaa,"css-scroll-behavior":cssScrollBehavior,"css-scrollbar":cssScrollbar,"css-sel2":cssSel2,"css-sel3":cssSel3,"css-selection":cssSelection,"css-shapes":cssShapes,"css-snappoints":cssSnappoints,"css-sticky":cssSticky,"css-supports-api":cssSupportsApi,"css-table":cssTable,"css-text-align-last":cssTextAlignLast,"css-text-indent":cssTextIndent,"css-text-justify":cssTextJustify,"css-text-orientation":cssTextOrientation,"css-text-spacing":cssTextSpacing,"css-textshadow":cssTextshadow,"css-touch-action-2":cssTouchAction2,"css-touch-action":cssTouchAction,"css-transitions":cssTransitions,"css-unicode-bidi":cssUnicodeBidi,"css-unset-value":cssUnsetValue,"css-variables":cssVariables,"css-widows-orphans":cssWidowsOrphans,"css-writing-mode":cssWritingMode,"css-zoom":cssZoom,"css3-attr":css3Attr,"css3-boxsizing":css3Boxsizing,"css3-colors":css3Colors,"css3-cursors-grab":css3CursorsGrab,"css3-cursors-newer":css3CursorsNewer,"css3-cursors":css3Cursors,"css3-tabsize":css3Tabsize,"currentcolor":currentcolor,"custom-elements":customElements,"custom-elementsv1":customElementsv1,"customevent":customevent,"datalist":datalist,"dataset":dataset,"datauri":datauri,"details":details,"deviceorientation":deviceorientation,"devicepixelratio":devicepixelratio,"dialog":dialog,"dispatchevent":dispatchevent,"document-currentscript":documentCurrentscript,"document-evaluate-xpath":documentEvaluateXpath,"document-execcommand":documentExeccommand,"document-scrollingelement":documentScrollingelement,"documenthead":documenthead,"dom-manip-convenience":domManipConvenience,"dom-range":domRange,"domcontentloaded":domcontentloaded,"domfocusin-domfocusout-events":domfocusinDomfocusoutEvents,"dommatrix":dommatrix,"download":download,"dragndrop":dragndrop,"element-closest":elementClosest,"element-from-point":elementFromPoint,"eme":eme,"eot":eot,"es5":es5,"es6-class":es6Class,"es6-generators":es6Generators,"es6-module-dynamic-import":es6ModuleDynamicImport,"es6-module-nomodule":es6ModuleNomodule,"es6-module":es6Module,"es6-number":es6Number,"es6-string-includes":es6StringIncludes,"eventsource":eventsource,"fetch":fetch,"fieldset-disabled":fieldsetDisabled,"fileapi":fileapi,"filereader":filereader,"filereadersync":filereadersync,"filesystem":filesystem,"flac":flac,"flexbox":flexbox,"flow-root":flowRoot,"focusin-focusout-events":focusinFocusoutEvents,"focusoptions-preventscroll":focusoptionsPreventscroll,"font-family-system-ui":fontFamilySystemUi,"font-feature":fontFeature,"font-kerning":fontKerning,"font-loading":fontLoading,"font-size-adjust":fontSizeAdjust,"font-smooth":fontSmooth,"font-unicode-range":fontUnicodeRange,"font-variant-alternates":fontVariantAlternates,"font-variant-east-asian":fontVariantEastAsian,"fontface":fontface,"form-attribute":formAttribute,"form-submit-attributes":formSubmitAttributes,"form-validation":formValidation,"forms":forms,"fullscreen":fullscreen,"gamepad":gamepad,"geolocation":geolocation,"getboundingclientrect":getboundingclientrect,"getcomputedstyle":getcomputedstyle,"getelementsbyclassname":getelementsbyclassname,"getrandomvalues":getrandomvalues,"hardwareconcurrency":hardwareconcurrency,"hashchange":hashchange,"heif":heif,"hevc":hevc,"hidden":hidden,"high-resolution-time":highResolutionTime,"history":history,"html-media-capture":htmlMediaCapture,"html5semantic":html5semantic,"http-live-streaming":httpLiveStreaming,"http2":http2,"iframe-sandbox":iframeSandbox,"iframe-seamless":iframeSeamless,"iframe-srcdoc":iframeSrcdoc,"imagecapture":imagecapture,"ime":ime,"img-naturalwidth-naturalheight":imgNaturalwidthNaturalheight,"imports":imports,"indeterminate-checkbox":indeterminateCheckbox,"indexeddb":indexeddb,"indexeddb2":indexeddb2,"inline-block":inlineBlock,"innertext":innertext,"input-autocomplete-onoff":inputAutocompleteOnoff,"input-color":inputColor,"input-datetime":inputDatetime,"input-email-tel-url":inputEmailTelUrl,"input-event":inputEvent,"input-file-accept":inputFileAccept,"input-file-directory":inputFileDirectory,"input-file-multiple":inputFileMultiple,"input-inputmode":inputInputmode,"input-minlength":inputMinlength,"input-number":inputNumber,"input-pattern":inputPattern,"input-placeholder":inputPlaceholder,"input-range":inputRange,"input-search":inputSearch,"input-selection":inputSelection,"insert-adjacent":insertAdjacent,"insertadjacenthtml":insertadjacenthtml,"internationalization":internationalization,"intersectionobserver":intersectionobserver,"intrinsic-width":intrinsicWidth,"jpeg2000":jpeg2000,"jpegxr":jpegxr,"json":json,"kerning-pairs-ligatures":kerningPairsLigatures,"keyboardevent-charcode":keyboardeventCharcode,"keyboardevent-code":keyboardeventCode,"keyboardevent-getmodifierstate":keyboardeventGetmodifierstate,"keyboardevent-key":keyboardeventKey,"keyboardevent-location":keyboardeventLocation,"keyboardevent-which":keyboardeventWhich,"lazyload":lazyload,"let":_let,"link-icon-png":linkIconPng,"link-icon-svg":linkIconSvg,"link-rel-dns-prefetch":linkRelDnsPrefetch,"link-rel-preconnect":linkRelPreconnect,"link-rel-prefetch":linkRelPrefetch,"link-rel-preload":linkRelPreload,"link-rel-prerender":linkRelPrerender,"localecompare":localecompare,"matchesselector":matchesselector,"matchmedia":matchmedia,"mathml":mathml,"maxlength":maxlength,"media-attribute":mediaAttribute,"media-fragments":mediaFragments,"media-session-api":mediaSessionApi,"mediacapture-fromelement":mediacaptureFromelement,"mediarecorder":mediarecorder,"mediasource":mediasource,"menu":menu,"meter":meter,"midi":midi,"minmaxwh":minmaxwh,"mp3":mp3,"mpeg-dash":mpegDash,"mpeg4":mpeg4,"multibackgrounds":multibackgrounds,"multicolumn":multicolumn,"mutation-events":mutationEvents,"mutationobserver":mutationobserver,"namevalue-storage":namevalueStorage,"nav-timing":navTiming,"netinfo":netinfo,"node-contains":nodeContains,"node-parentelement":nodeParentelement,"notifications":notifications,"object-fit":objectFit,"object-observe":objectObserve,"object-values":objectValues,"objectrtc":objectrtc,"offline-apps":offlineApps,"offscreencanvas":offscreencanvas,"ogg-vorbis":oggVorbis,"ogv":ogv,"ol-reversed":olReversed,"once-event-listener":onceEventListener,"online-status":onlineStatus,"opus":opus,"outline":outline,"pad-start-end":padStartEnd,"page-transition-events":pageTransitionEvents,"pagevisibility":pagevisibility,"passive-event-listener":passiveEventListener,"path2d":path2d,"payment-request":paymentRequest,"permissions-api":permissionsApi,"picture":picture,"ping":ping,"png-alpha":pngAlpha,"pointer-events":pointerEvents,"pointer":pointer,"pointerlock":pointerlock,"progress":progress,"promises":promises,"proximity":proximity,"proxy":proxy,"publickeypinning":publickeypinning,"push-api":pushApi,"queryselector":queryselector,"readonly-attr":readonlyAttr,"referrer-policy":referrerPolicy,"registerprotocolhandler":registerprotocolhandler,"rel-noopener":relNoopener,"rel-noreferrer":relNoreferrer,"rellist":rellist,"rem":rem,"requestanimationframe":requestanimationframe,"requestidlecallback":requestidlecallback,"resizeobserver":resizeobserver,"resource-timing":resourceTiming,"rest-parameters":restParameters,"rtcpeerconnection":rtcpeerconnection,"ruby":ruby,"run-in":runIn,"same-site-cookie-attribute":sameSiteCookieAttribute,"screen-orientation":screenOrientation,"script-async":scriptAsync,"script-defer":scriptDefer,"scrollintoview":scrollintoview,"scrollintoviewifneeded":scrollintoviewifneeded,"sdch":sdch,"selection-api":selectionApi,"serviceworkers":serviceworkers,"setimmediate":setimmediate,"sha-2":sha2,"shadowdom":shadowdom,"shadowdomv1":shadowdomv1,"sharedworkers":sharedworkers,"sni":sni,"spdy":spdy,"speech-recognition":speechRecognition,"speech-synthesis":speechSynthesis,"spellcheck-attribute":spellcheckAttribute,"sql-storage":sqlStorage,"srcset":srcset,"stopimmediatepropagation":stopimmediatepropagation,"stream":stream,"streams":streams,"stricttransportsecurity":stricttransportsecurity,"style-scoped":styleScoped,"subresource-integrity":subresourceIntegrity,"svg-css":svgCss,"svg-filters":svgFilters,"svg-fonts":svgFonts,"svg-fragment":svgFragment,"svg-html":svgHtml,"svg-html5":svgHtml5,"svg-img":svgImg,"svg-smil":svgSmil,"svg":svg,"symbols":symbols,"tabindex-attr":tabindexAttr,"template-literals":templateLiterals,"template":template,"testfeat":testfeat,"text-decoration":textDecoration,"text-emphasis":textEmphasis,"text-overflow":textOverflow,"text-size-adjust":textSizeAdjust,"text-stroke":textStroke,"textcontent":textcontent,"textencoder":textencoder,"tls1-1":tls11,"tls1-2":tls12,"tls1-3":tls13,"token-binding":tokenBinding,"touch":touch,"transforms2d":transforms2d,"transforms3d":transforms3d,"ttf":ttf,"typedarrays":typedarrays,"u2f":u2f,"unhandledrejection":unhandledrejection,"upgradeinsecurerequests":upgradeinsecurerequests,"url":url,"urlsearchparams":urlsearchparams,"use-strict":useStrict,"user-select-none":userSelectNone,"user-timing":userTiming,"variable-fonts":variableFonts,"vibration":vibration,"video":video,"videotracks":videotracks,"viewport-units":viewportUnits,"wai-aria":waiAria,"wasm":wasm,"wav":wav,"wbr-element":wbrElement,"web-animation":webAnimation,"web-app-manifest":webAppManifest,"web-bluetooth":webBluetooth,"web-share":webShare,"webgl":webgl,"webgl2":webgl2,"webm":webm,"webp":webp,"websockets":websockets,"webusb":webusb,"webvr":webvr,"webvtt":webvtt,"webworkers":webworkers,"will-change":willChange,"woff":woff,"woff2":woff2,"word-break":wordBreak,"wordwrap":wordwrap,"x-doc-messaging":xDocMessaging,"x-frame-options":xFrameOptions,"xhr2":xhr2,"xhtml":xhtml,"xhtmlsmil":xhtmlsmil,"xml-serializer":xmlSerializer};

var features_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
 * Load this dynamically so that it
 * doesn't appear in the rollup bundle.
 */

var features = exports.features = features$1;
});

unwrapExports(features_1);

var unpacker = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});



Object.defineProperty(exports, 'agents', {
  enumerable: true,
  get: function get() {
    return agents_1.agents;
  }
});



Object.defineProperty(exports, 'feature', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(feature).default;
  }
});



Object.defineProperty(exports, 'features', {
  enumerable: true,
  get: function get() {
    return features_1.features;
  }
});



Object.defineProperty(exports, 'region', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(region$1).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
});

unwrapExports(unpacker);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var Browsers = function () {

    /**
     * Return all prefixes for default browser data
     */
    Browsers.prefixes = function prefixes() {
        if (this.prefixesCache) {
            return this.prefixesCache;
        }

        var data = unpacker.agents;

        this.prefixesCache = [];
        for (var name in data) {
            this.prefixesCache.push('-' + data[name].prefix + '-');
        }

        this.prefixesCache = utils.uniq(this.prefixesCache).sort(function (a, b) {
            return b.length - a.length;
        });

        return this.prefixesCache;
    };

    /**
     * Check is value contain any possibe prefix
     */


    Browsers.withPrefix = function withPrefix(value) {
        if (!this.prefixesRegexp) {
            this.prefixesRegexp = new RegExp(this.prefixes().join('|'));
        }

        return this.prefixesRegexp.test(value);
    };

    function Browsers(data, requirements, options, stats) {
        _classCallCheck(this, Browsers);

        this.data = data;
        this.options = options || {};
        this.stats = stats;
        this.selected = this.parse(requirements);
    }

    /**
     * Return browsers selected by requirements
     */


    Browsers.prototype.parse = function parse(requirements) {
        return _browserslist_2_11_3_browserslist(requirements, {
            stats: this.stats,
            path: this.options.from,
            env: this.options.env
        });
    };

    /**
     * Select major browsers versions by criteria
     */


    Browsers.prototype.browsers = function browsers(criteria) {
        var _this = this;

        var selected = [];

        var _loop = function _loop(browser) {
            var data = _this.data[browser];
            var versions = criteria(data).map(function (version) {
                return browser + ' ' + version;
            });
            selected = selected.concat(versions);
        };

        for (var browser in this.data) {
            _loop(browser);
        }
        return selected;
    };

    /**
     * Return prefix for selected browser
     */


    Browsers.prototype.prefix = function prefix(browser) {
        var _browser$split = browser.split(' '),
            name = _browser$split[0],
            version = _browser$split[1];

        var data = this.data[name];

        var prefix = data.prefix_exceptions && data.prefix_exceptions[version];
        if (!prefix) {
            prefix = data.prefix;
        }
        return '-' + prefix + '-';
    };

    /**
     * Is browser is selected by requirements
     */


    Browsers.prototype.isSelected = function isSelected(browser) {
        return this.selected.indexOf(browser) !== -1;
    };

    return Browsers;
}();

var browsers$3 = Browsers;

var vendor_1 = createCommonjsModule(function (module, exports) {
'use strict';

exports.__esModule = true;
/**
 * Contains helpers for working with vendor prefixes.
 *
 * @example
 * const vendor = postcss.vendor;
 *
 * @namespace vendor
 */
var vendor = {

    /**
     * Returns the vendor prefix extracted from an input string.
     *
     * @param {string} prop - string with or without vendor prefix
     *
     * @return {string} vendor prefix or empty string
     *
     * @example
     * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'
     * postcss.vendor.prefix('tab-size')      //=> ''
     */
    prefix: function prefix(prop) {
        var match = prop.match(/^(-\w+-)/);
        if (match) {
            return match[0];
        } else {
            return '';
        }
    },


    /**
     * Returns the input string stripped of its vendor prefix.
     *
     * @param {string} prop - string with or without vendor prefix
     *
     * @return {string} string name without vendor prefixes
     *
     * @example
     * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
     */
    unprefixed: function unprefixed(prop) {
        return prop.replace(/^-\w+-/, '');
    }
};

exports.default = vendor;
module.exports = exports['default'];

});

unwrapExports(vendor_1);

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }






/**
 * Recursivly clone objects
 */
function _clone(obj, parent) {
    var cloned = new obj.constructor();

    for (var _iterator = Object.keys(obj || {}), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var i = _ref;

        var value = obj[i];
        if (i === 'parent' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
            if (parent) {
                cloned[i] = parent;
            }
        } else if (i === 'source') {
            cloned[i] = value;
        } else if (i === null) {
            cloned[i] = value;
        } else if (value instanceof Array) {
            cloned[i] = value.map(function (x) {
                return _clone(x, cloned);
            });
        } else if (i !== '_autoprefixerPrefix' && i !== '_autoprefixerValues') {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null) {
                value = _clone(value, cloned);
            }
            cloned[i] = value;
        }
    }

    return cloned;
}

var Prefixer = function () {

    /**
     * Add hack to selected names
     */
    Prefixer.hack = function hack(klass) {
        var _this = this;

        if (!this.hacks) {
            this.hacks = {};
        }
        return klass.names.map(function (name) {
            _this.hacks[name] = klass;
            return _this.hacks[name];
        });
    };

    /**
     * Load hacks for some names
     */


    Prefixer.load = function load(name, prefixes, all) {
        var Klass = this.hacks && this.hacks[name];
        if (Klass) {
            return new Klass(name, prefixes, all);
        } else {
            return new this(name, prefixes, all);
        }
    };

    /**
     * Clone node and clean autprefixer custom caches
     */


    Prefixer.clone = function clone(node, overrides) {
        var cloned = _clone(node);
        for (var name in overrides) {
            cloned[name] = overrides[name];
        }
        return cloned;
    };

    function Prefixer(name, prefixes, all) {
        _classCallCheck$3(this, Prefixer);

        this.name = name;
        this.prefixes = prefixes;
        this.all = all;
    }

    /**
     * Find prefix in node parents
     */


    Prefixer.prototype.parentPrefix = function parentPrefix(node) {
        var prefix = void 0;

        if (typeof node._autoprefixerPrefix !== 'undefined') {
            prefix = node._autoprefixerPrefix;
        } else if (node.type === 'decl' && node.prop[0] === '-') {
            prefix = vendor_1.prefix(node.prop);
        } else if (node.type === 'root') {
            prefix = false;
        } else if (node.type === 'rule' && node.selector.indexOf(':-') !== -1 && /:(-\w+-)/.test(node.selector)) {
            prefix = node.selector.match(/:(-\w+-)/)[1];
        } else if (node.type === 'atrule' && node.name[0] === '-') {
            prefix = vendor_1.prefix(node.name);
        } else {
            prefix = this.parentPrefix(node.parent);
        }

        if (browsers$3.prefixes().indexOf(prefix) === -1) {
            prefix = false;
        }

        node._autoprefixerPrefix = prefix;

        return node._autoprefixerPrefix;
    };

    /**
     * Clone node with prefixes
     */


    Prefixer.prototype.process = function process(node) {
        if (!this.check(node)) {
            return undefined;
        }

        var parent = this.parentPrefix(node);

        var prefixes = this.prefixes.filter(function (prefix) {
            return !parent || parent === utils.removeNote(prefix);
        });

        var added = [];
        for (var _iterator2 = prefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var prefix = _ref2;

            if (this.add(node, prefix, added.concat([prefix]))) {
                added.push(prefix);
            }
        }

        return added;
    };

    /**
     * Shortcut for Prefixer.clone
     */


    Prefixer.prototype.clone = function clone(node, overrides) {
        return Prefixer.clone(node, overrides);
    };

    return Prefixer;
}();

var prefixer = Prefixer;

function _classCallCheck$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var Declaration = function (_Prefixer) {
    _inherits(Declaration, _Prefixer);

    function Declaration() {
        _classCallCheck$2(this, Declaration);

        return _possibleConstructorReturn(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Always true, because we already get prefixer by property name
     */
    Declaration.prototype.check = function check() /* decl */{
        return true;
    };

    /**
     * Return prefixed version of property
     */


    Declaration.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + prop;
    };

    /**
     * Return unprefixed version of property
     */


    Declaration.prototype.normalize = function normalize(prop) {
        return prop;
    };

    /**
     * Check `value`, that it contain other prefixes, rather than `prefix`
     */


    Declaration.prototype.otherPrefixes = function otherPrefixes(value, prefix) {
        for (var _iterator = browsers$3.prefixes(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var other = _ref;

            if (other === prefix) {
                continue;
            }
            if (value.indexOf(other) !== -1) {
                return true;
            }
        }
        return false;
    };

    /**
     * Set prefix to declaration
     */


    Declaration.prototype.set = function set(decl, prefix) {
        decl.prop = this.prefixed(decl.prop, prefix);
        return decl;
    };

    /**
     * Should we use visual cascade for prefixes
     */


    Declaration.prototype.needCascade = function needCascade(decl) {
        if (!decl._autoprefixerCascade) {
            decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').indexOf('\n') !== -1;
        }
        return decl._autoprefixerCascade;
    };

    /**
     * Return maximum length of possible prefixed property
     */


    Declaration.prototype.maxPrefixed = function maxPrefixed(prefixes, decl) {
        if (decl._autoprefixerMax) {
            return decl._autoprefixerMax;
        }

        var max = 0;
        for (var _iterator2 = prefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var prefix = _ref2;

            prefix = utils.removeNote(prefix);
            if (prefix.length > max) {
                max = prefix.length;
            }
        }
        decl._autoprefixerMax = max;

        return decl._autoprefixerMax;
    };

    /**
     * Calculate indentation to create visual cascade
     */


    Declaration.prototype.calcBefore = function calcBefore(prefixes, decl) {
        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

        var max = this.maxPrefixed(prefixes, decl);
        var diff = max - utils.removeNote(prefix).length;

        var before = decl.raw('before');
        if (diff > 0) {
            before += Array(diff).fill(' ').join('');
        }

        return before;
    };

    /**
     * Remove visual cascade
     */


    Declaration.prototype.restoreBefore = function restoreBefore(decl) {
        var lines = decl.raw('before').split('\n');
        var min = lines[lines.length - 1];

        this.all.group(decl).up(function (prefixed) {
            var array = prefixed.raw('before').split('\n');
            var last = array[array.length - 1];
            if (last.length < min.length) {
                min = last;
            }
        });

        lines[lines.length - 1] = min;
        decl.raws.before = lines.join('\n');
    };

    /**
     * Clone and insert new declaration
     */


    Declaration.prototype.insert = function insert(decl, prefix, prefixes) {
        var cloned = this.set(this.clone(decl), prefix);
        if (!cloned) return undefined;

        var already = decl.parent.some(function (i) {
            return i.prop === cloned.prop && i.value === cloned.value;
        });
        if (already) {
            return undefined;
        }

        if (this.needCascade(decl)) {
            cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        return decl.parent.insertBefore(decl, cloned);
    };

    /**
     * Did this declaration has this prefix above
     */


    Declaration.prototype.isAlready = function isAlready(decl, prefixed) {
        var already = this.all.group(decl).up(function (i) {
            return i.prop === prefixed;
        });
        if (!already) {
            already = this.all.group(decl).down(function (i) {
                return i.prop === prefixed;
            });
        }
        return already;
    };

    /**
     * Clone and add prefixes for declaration
     */


    Declaration.prototype.add = function add(decl, prefix, prefixes) {
        var prefixed = this.prefixed(decl.prop, prefix);
        if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {
            return undefined;
        }
        return this.insert(decl, prefix, prefixes);
    };

    /**
     * Add spaces for visual cascade
     */


    Declaration.prototype.process = function process(decl) {
        if (!this.needCascade(decl)) {
            _Prefixer.prototype.process.call(this, decl);
            return;
        }

        var prefixes = _Prefixer.prototype.process.call(this, decl);

        if (!prefixes || !prefixes.length) {
            return;
        }

        this.restoreBefore(decl);
        decl.raws.before = this.calcBefore(prefixes, decl);
    };

    /**
     * Return list of prefixed properties to clean old prefixes
     */


    Declaration.prototype.old = function old(prop, prefix) {
        return [this.prefixed(prop, prefix)];
    };

    return Declaration;
}(prefixer);

var declaration = Declaration;

var abs = Math.abs;
var round = Math.round;

function almostEq(a, b) {
  return abs(a - b) <= 9.5367432e-7
}

//最大公约数 Greatest Common Divisor
function GCD(a, b) {
  if (almostEq(b, 0)) return a
  return GCD(b, a % b)
}

function findPrecision(n) {
  var e = 1;

  while (!almostEq(round(n * e) / e, n)) {
    e *= 10;
  }

  return e
}

function num2fraction(num) {
  if (num === 0 || num === '0') return '0'

  if (typeof num === 'string') {
    num = parseFloat(num);
  }


  var precision = findPrecision(num); //精确度
  var number = num * precision;
  var gcd = abs(GCD(number, precision));

  //分子
  var numerator = number / gcd;
  //分母
  var denominator = precision / gcd;

  //分数
  return round(numerator) + '/' + round(denominator)
}

var _num2fraction_1_2_2_num2fraction = num2fraction;

function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$1(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$1(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var regexp = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpi)/gi;
var split = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpi)/i;

var Resolution = function (_Prefixer) {
    _inherits$1(Resolution, _Prefixer);

    function Resolution() {
        _classCallCheck$4(this, Resolution);

        return _possibleConstructorReturn$1(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Return prefixed query name
     */
    Resolution.prototype.prefixName = function prefixName(prefix, name) {
        var newName = prefix === '-moz-' ? name + '--moz-device-pixel-ratio' : prefix + name + '-device-pixel-ratio';
        return newName;
    };

    /**
     * Return prefixed query
     */


    Resolution.prototype.prefixQuery = function prefixQuery(prefix, name, colon, value, units) {
        if (units === 'dpi') {
            value = Number(value / 96);
        }
        if (prefix === '-o-') {
            value = _num2fraction_1_2_2_num2fraction(value);
        }
        return this.prefixName(prefix, name) + colon + value;
    };

    /**
     * Remove prefixed queries
     */


    Resolution.prototype.clean = function clean(rule) {
        var _this2 = this;

        if (!this.bad) {
            this.bad = [];
            for (var _iterator = this.prefixes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var prefix = _ref;

                this.bad.push(this.prefixName(prefix, 'min'));
                this.bad.push(this.prefixName(prefix, 'max'));
            }
        }

        rule.params = utils.editList(rule.params, function (queries) {
            return queries.filter(function (query) {
                return _this2.bad.every(function (i) {
                    return query.indexOf(i) === -1;
                });
            });
        });
    };

    /**
     * Add prefixed queries
     */


    Resolution.prototype.process = function process(rule) {
        var _this3 = this;

        var parent = this.parentPrefix(rule);
        var prefixes = parent ? [parent] : this.prefixes;

        rule.params = utils.editList(rule.params, function (origin, prefixed) {
            for (var _iterator2 = origin, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var query = _ref2;

                if (query.indexOf('min-resolution') === -1 && query.indexOf('max-resolution') === -1) {
                    prefixed.push(query);
                    continue;
                }

                var _loop = function _loop(prefix) {
                    if (prefix === '-moz-' && rule.params.indexOf('dpi') !== -1) {
                        return 'continue';
                    }

                    var processed = query.replace(regexp, function (str) {
                        var parts = str.match(split);
                        return _this3.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);
                    });
                    prefixed.push(processed);
                };

                for (var _iterator3 = prefixes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var prefix = _ref3;

                    var _ret = _loop(prefix);

                    if (_ret === 'continue') continue;
                }
                prefixed.push(query);
            }

            return utils.uniq(prefixed);
        });
    };

    return Resolution;
}(prefixer);

var resolution = Resolution;

var openParentheses = '('.charCodeAt(0);
var closeParentheses = ')'.charCodeAt(0);
var singleQuote = '\''.charCodeAt(0);
var doubleQuote = '"'.charCodeAt(0);
var backslash = '\\'.charCodeAt(0);
var slash = '/'.charCodeAt(0);
var comma = ','.charCodeAt(0);
var colon = ':'.charCodeAt(0);
var star = '*'.charCodeAt(0);

var parse = function (input) {
    var tokens = [];
    var value = input;

    var next, quote, prev, token, escape, escapePos, whitespacePos;
    var pos = 0;
    var code = value.charCodeAt(pos);
    var max = value.length;
    var stack = [{ nodes: tokens }];
    var balanced = 0;
    var parent;

    var name = '';
    var before = '';
    var after = '';

    while (pos < max) {
        // Whitespaces
        if (code <= 32) {
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            } while (code <= 32);
            token = value.slice(pos, next);

            prev = tokens[tokens.length - 1];
            if (code === closeParentheses && balanced) {
                after = token;
            } else if (prev && prev.type === 'div') {
                prev.after = token;
            } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star) {
                before = token;
            } else {
                tokens.push({
                    type: 'space',
                    sourceIndex: pos,
                    value: token
                });
            }

            pos = next;

        // Quotes
        } else if (code === singleQuote || code === doubleQuote) {
            next = pos;
            quote = code === singleQuote ? '\'' : '"';
            token = {
                type: 'string',
                sourceIndex: pos,
                quote: quote
            };
            do {
                escape = false;
                next = value.indexOf(quote, next + 1);
                if (~next) {
                    escapePos = next;
                    while (value.charCodeAt(escapePos - 1) === backslash) {
                        escapePos -= 1;
                        escape = !escape;
                    }
                } else {
                    value += quote;
                    next = value.length - 1;
                    token.unclosed = true;
                }
            } while (escape);
            token.value = value.slice(pos + 1, next);

            tokens.push(token);
            pos = next + 1;
            code = value.charCodeAt(pos);

        // Comments
        } else if (code === slash && value.charCodeAt(pos + 1) === star) {
            token = {
                type: 'comment',
                sourceIndex: pos
            };

            next = value.indexOf('*/', pos);
            if (next === -1) {
                token.unclosed = true;
                next = value.length;
            }

            token.value = value.slice(pos + 2, next);
            tokens.push(token);

            pos = next + 2;
            code = value.charCodeAt(pos);

        // Dividers
        } else if (code === slash || code === comma || code === colon) {
            token = value[pos];

            tokens.push({
                type: 'div',
                sourceIndex: pos - before.length,
                value: token,
                before: before,
                after: ''
            });
            before = '';

            pos += 1;
            code = value.charCodeAt(pos);

        // Open parentheses
        } else if (openParentheses === code) {
            // Whitespaces after open parentheses
            next = pos;
            do {
                next += 1;
                code = value.charCodeAt(next);
            } while (code <= 32);
            token = {
                type: 'function',
                sourceIndex: pos - name.length,
                value: name,
                before: value.slice(pos + 1, next)
            };
            pos = next;

            if (name === 'url' && code !== singleQuote && code !== doubleQuote) {
                next -= 1;
                do {
                    escape = false;
                    next = value.indexOf(')', next + 1);
                    if (~next) {
                        escapePos = next;
                        while (value.charCodeAt(escapePos - 1) === backslash) {
                            escapePos -= 1;
                            escape = !escape;
                        }
                    } else {
                        value += ')';
                        next = value.length - 1;
                        token.unclosed = true;
                    }
                } while (escape);
                // Whitespaces before closed
                whitespacePos = next;
                do {
                    whitespacePos -= 1;
                    code = value.charCodeAt(whitespacePos);
                } while (code <= 32);
                if (pos !== whitespacePos + 1) {
                    token.nodes = [{
                        type: 'word',
                        sourceIndex: pos,
                        value: value.slice(pos, whitespacePos + 1)
                    }];
                } else {
                    token.nodes = [];
                }
                if (token.unclosed && whitespacePos + 1 !== next) {
                    token.after = '';
                    token.nodes.push({
                        type: 'space',
                        sourceIndex: whitespacePos + 1,
                        value: value.slice(whitespacePos + 1, next)
                    });
                } else {
                    token.after = value.slice(whitespacePos + 1, next);
                }
                pos = next + 1;
                code = value.charCodeAt(pos);
                tokens.push(token);
            } else {
                balanced += 1;
                token.after = '';
                tokens.push(token);
                stack.push(token);
                tokens = token.nodes = [];
                parent = token;
            }
            name = '';

        // Close parentheses
        } else if (closeParentheses === code && balanced) {
            pos += 1;
            code = value.charCodeAt(pos);

            parent.after = after;
            after = '';
            balanced -= 1;
            stack.pop();
            parent = stack[balanced];
            tokens = parent.nodes;

        // Words
        } else {
            next = pos;
            do {
                if (code === backslash) {
                    next += 1;
                }
                next += 1;
                code = value.charCodeAt(next);
            } while (next < max && !(
                code <= 32 ||
                code === singleQuote ||
                code === doubleQuote ||
                code === comma ||
                code === colon ||
                code === slash ||
                code === openParentheses ||
                code === closeParentheses && balanced
            ));
            token = value.slice(pos, next);

            if (openParentheses === code) {
                name = token;
            } else {
                tokens.push({
                    type: 'word',
                    sourceIndex: pos,
                    value: token
                });
            }

            pos = next;
        }
    }

    for (pos = stack.length - 1; pos; pos -= 1) {
        stack[pos].unclosed = true;
    }

    return stack[0].nodes;
};

var walk = function walk(nodes, cb, bubble) {
    var i, max, node, result;

    for (i = 0, max = nodes.length; i < max; i += 1) {
        node = nodes[i];
        if (!bubble) {
            result = cb(node, i, nodes);
        }

        if (result !== false && node.type === 'function' && Array.isArray(node.nodes)) {
            walk(node.nodes, cb, bubble);
        }

        if (bubble) {
            cb(node, i, nodes);
        }
    }
};

function stringifyNode(node, custom) {
    var type = node.type;
    var value = node.value;
    var buf;
    var customResult;

    if (custom && (customResult = custom(node)) !== undefined) {
        return customResult;
    } else if (type === 'word' || type === 'space') {
        return value;
    } else if (type === 'string') {
        buf = node.quote || '';
        return buf + value + (node.unclosed ? '' : buf);
    } else if (type === 'comment') {
        return '/*' + value + (node.unclosed ? '' : '*/');
    } else if (type === 'div') {
        return (node.before || '') + value + (node.after || '');
    } else if (Array.isArray(node.nodes)) {
        buf = stringify(node.nodes);
        if (type !== 'function') {
            return buf;
        }
        return value + '(' + (node.before || '') + buf + (node.after || '') + (node.unclosed ? '' : ')');
    }
    return value;
}

function stringify(nodes, custom) {
    var result, i;

    if (Array.isArray(nodes)) {
        result = '';
        for (i = nodes.length - 1; ~i; i -= 1) {
            result = stringifyNode(nodes[i], custom) + result;
        }
        return result;
    }
    return stringifyNode(nodes, custom);
}

var stringify_1 = stringify;

var minus = '-'.charCodeAt(0);
var plus  = '+'.charCodeAt(0);
var dot   = '.'.charCodeAt(0);

var unit = function (value) {
    var pos = 0;
    var length = value.length;
    var dotted = false;
    var containsNumber = false;
    var code;
    var number = '';

    while (pos < length) {
        code = value.charCodeAt(pos);

        if (code >= 48 && code <= 57) {
            number += value[pos];
            containsNumber = true;
        } else if (code === dot) {
            if (dotted) {
                break;
            }
            dotted = true;
            number += value[pos];
        } else if (code === plus || code === minus) {
            if (pos !== 0) {
                break;
            }
            number += value[pos];
        } else {
            break;
        }

        pos += 1;
    }

    return containsNumber ? {
        number: number,
        unit: value.slice(pos)
    } : false;
};

function ValueParser(value) {
    if (this instanceof ValueParser) {
        this.nodes = parse(value);
        return this;
    }
    return new ValueParser(value);
}

ValueParser.prototype.toString = function () {
    return Array.isArray(this.nodes) ? stringify_1(this.nodes) : '';
};

ValueParser.prototype.walk = function (cb, bubble) {
    walk(this.nodes, cb, bubble);
    return this;
};

ValueParser.unit = unit;

ValueParser.walk = walk;

ValueParser.stringify = stringify_1;

var lib = ValueParser;

function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var Transition = function () {
    function Transition(prefixes) {
        _classCallCheck$5(this, Transition);

        Object.defineProperty(this, 'props', {
            enumerable: true,
            writable: true,
            value: ['transition', 'transition-property']
        });

        this.prefixes = prefixes;
    }

    /**
     * Process transition and add prefies for all necessary properties
     */


    Transition.prototype.add = function add(decl, result) {
        var _this = this;

        var prefix = void 0,
            prop = void 0;
        var declPrefixes = this.prefixes.add[decl.prop] && this.prefixes.add[decl.prop].prefixes || [];

        var params = this.parse(decl.value);
        var names = params.map(function (i) {
            return _this.findProp(i);
        });
        var added = [];

        if (names.some(function (i) {
            return i[0] === '-';
        })) {
            return;
        }

        for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var param = _ref;

            prop = this.findProp(param);
            if (prop[0] === '-') {
                continue;
            }
            var prefixer = this.prefixes.add[prop];
            if (!prefixer || !prefixer.prefixes) {
                continue;
            }

            for (var _iterator3 = prefixer.prefixes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    prefix = _iterator3[_i3++];
                } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    prefix = _i3.value;
                }

                var prefixed = this.prefixes.prefixed(prop, prefix);
                if (prefixed !== '-ms-transform' && names.indexOf(prefixed) === -1) {
                    if (!this.disabled(prop, prefix)) {
                        added.push(this.clone(prop, prefixed, param));
                    }
                }
            }
        }

        params = params.concat(added);
        var value = this.stringify(params);

        var webkitClean = this.stringify(this.cleanFromUnprefixed(params, '-webkit-'));
        if (declPrefixes.indexOf('-webkit-') !== -1) {
            this.cloneBefore(decl, '-webkit-' + decl.prop, webkitClean);
        }
        this.cloneBefore(decl, decl.prop, webkitClean);
        if (declPrefixes.indexOf('-o-') !== -1) {
            var operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'));
            this.cloneBefore(decl, '-o-' + decl.prop, operaClean);
        }

        for (var _iterator2 = declPrefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                prefix = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                prefix = _i2.value;
            }

            if (prefix !== '-webkit-' && prefix !== '-o-') {
                var prefixValue = this.stringify(this.cleanOtherPrefixes(params, prefix));
                this.cloneBefore(decl, prefix + decl.prop, prefixValue);
            }
        }

        if (value !== decl.value && !this.already(decl, decl.prop, value)) {
            this.checkForWarning(result, decl);
            decl.cloneBefore();
            decl.value = value;
        }
    };

    /**
     * Find property name
     */


    Transition.prototype.findProp = function findProp(param) {
        var prop = param[0].value;
        if (/^\d/.test(prop)) {
            for (var i = 0; i < param.length; i++) {
                var token = param[i];
                if (i !== 0 && token.type === 'word') {
                    return token.value;
                }
            }
        }
        return prop;
    };

    /**
     * Does we aready have this declaration
     */


    Transition.prototype.already = function already(decl, prop, value) {
        return decl.parent.some(function (i) {
            return i.prop === prop && i.value === value;
        });
    };

    /**
     * Add declaration if it is not exist
     */


    Transition.prototype.cloneBefore = function cloneBefore(decl, prop, value) {
        if (!this.already(decl, prop, value)) {
            decl.cloneBefore({ prop: prop, value: value });
        }
    };

    /**
     * Show transition-property warning
     */


    Transition.prototype.checkForWarning = function checkForWarning(result, decl) {
        if (decl.prop !== 'transition-property') {
            return;
        }

        decl.parent.each(function (i) {
            if (i.type !== 'decl') {
                return undefined;
            }
            if (i.prop.indexOf('transition-') !== 0) {
                return undefined;
            }
            if (i.prop === 'transition-property') {
                return undefined;
            }

            if (list_1.comma(i.value).length > 1) {
                decl.warn(result, 'Replace transition-property to transition, ' + 'because Autoprefixer could not support ' + 'any cases of transition-property ' + 'and other transition-*');
            }
            return false;
        });
    };

    /**
     * Process transition and remove all unnecessary properties
     */


    Transition.prototype.remove = function remove(decl) {
        var _this2 = this;

        var params = this.parse(decl.value);
        params = params.filter(function (i) {
            var prop = _this2.prefixes.remove[_this2.findProp(i)];
            return !prop || !prop.remove;
        });
        var value = this.stringify(params);

        if (decl.value === value) {
            return;
        }

        if (params.length === 0) {
            decl.remove();
            return;
        }

        var double = decl.parent.some(function (i) {
            return i.prop === decl.prop && i.value === value;
        });
        var smaller = decl.parent.some(function (i) {
            return i !== decl && i.prop === decl.prop && i.value.length > value.length;
        });

        if (double || smaller) {
            decl.remove();
            return;
        }

        decl.value = value;
    };

    /**
     * Parse properties list to array
     */


    Transition.prototype.parse = function parse(value) {
        var ast = lib(value);
        var result = [];
        var param = [];
        for (var _iterator4 = ast.nodes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref2 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref2 = _i4.value;
            }

            var node = _ref2;

            param.push(node);
            if (node.type === 'div' && node.value === ',') {
                result.push(param);
                param = [];
            }
        }
        result.push(param);
        return result.filter(function (i) {
            return i.length > 0;
        });
    };

    /**
     * Return properties string from array
     */


    Transition.prototype.stringify = function stringify(params) {
        if (params.length === 0) {
            return '';
        }
        var nodes = [];
        for (var _iterator5 = params, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray5) {
                if (_i5 >= _iterator5.length) break;
                _ref3 = _iterator5[_i5++];
            } else {
                _i5 = _iterator5.next();
                if (_i5.done) break;
                _ref3 = _i5.value;
            }

            var param = _ref3;

            if (param[param.length - 1].type !== 'div') {
                param.push(this.div(params));
            }
            nodes = nodes.concat(param);
        }
        if (nodes[0].type === 'div') {
            nodes = nodes.slice(1);
        }
        if (nodes[nodes.length - 1].type === 'div') {
            nodes = nodes.slice(0, +-2 + 1 || undefined);
        }
        return lib.stringify({ nodes: nodes });
    };

    /**
     * Return new param array with different name
     */


    Transition.prototype.clone = function clone(origin, name, param) {
        var result = [];
        var changed = false;
        for (var _iterator6 = param, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray6) {
                if (_i6 >= _iterator6.length) break;
                _ref4 = _iterator6[_i6++];
            } else {
                _i6 = _iterator6.next();
                if (_i6.done) break;
                _ref4 = _i6.value;
            }

            var i = _ref4;

            if (!changed && i.type === 'word' && i.value === origin) {
                result.push({ type: 'word', value: name });
                changed = true;
            } else {
                result.push(i);
            }
        }
        return result;
    };

    /**
     * Find or create seperator
     */


    Transition.prototype.div = function div(params) {
        for (var _iterator7 = params, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
            var _ref5;

            if (_isArray7) {
                if (_i7 >= _iterator7.length) break;
                _ref5 = _iterator7[_i7++];
            } else {
                _i7 = _iterator7.next();
                if (_i7.done) break;
                _ref5 = _i7.value;
            }

            var param = _ref5;

            for (var _iterator8 = param, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
                var _ref6;

                if (_isArray8) {
                    if (_i8 >= _iterator8.length) break;
                    _ref6 = _iterator8[_i8++];
                } else {
                    _i8 = _iterator8.next();
                    if (_i8.done) break;
                    _ref6 = _i8.value;
                }

                var node = _ref6;

                if (node.type === 'div' && node.value === ',') {
                    return node;
                }
            }
        }
        return { type: 'div', value: ',', after: ' ' };
    };

    Transition.prototype.cleanOtherPrefixes = function cleanOtherPrefixes(params, prefix) {
        var _this3 = this;

        return params.filter(function (param) {
            var current = vendor_1.prefix(_this3.findProp(param));
            return current === '' || current === prefix;
        });
    };

    /**
     * Remove all non-webkit prefixes and unprefixed params if we have prefixed
     */


    Transition.prototype.cleanFromUnprefixed = function cleanFromUnprefixed(params, prefix) {
        var _this4 = this;

        var remove = params.map(function (i) {
            return _this4.findProp(i);
        }).filter(function (i) {
            return i.slice(0, prefix.length) === prefix;
        }).map(function (i) {
            return _this4.prefixes.unprefixed(i);
        });

        var result = [];
        for (var _iterator9 = params, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
            var _ref7;

            if (_isArray9) {
                if (_i9 >= _iterator9.length) break;
                _ref7 = _iterator9[_i9++];
            } else {
                _i9 = _iterator9.next();
                if (_i9.done) break;
                _ref7 = _i9.value;
            }

            var param = _ref7;

            var prop = this.findProp(param);
            var p = vendor_1.prefix(prop);
            if (remove.indexOf(prop) === -1 && (p === prefix || p === '')) {
                result.push(param);
            }
        }
        return result;
    };

    /**
     * Check property for disabled by option
     */


    Transition.prototype.disabled = function disabled(prop, prefix) {
        var other = ['order', 'justify-content', 'align-self', 'align-content'];
        if (prop.indexOf('flex') !== -1 || other.indexOf(prop) !== -1) {
            if (this.prefixes.options.flexbox === false) {
                return true;
            }

            if (this.prefixes.options.flexbox === 'no-2009') {
                return prefix.indexOf('2009') !== -1;
            }
        }
        return undefined;
    };

    return Transition;
}();

var transition = Transition;

function _classCallCheck$8(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var OldValue = function () {
    function OldValue(unprefixed, prefixed, string, regexp) {
        _classCallCheck$8(this, OldValue);

        this.unprefixed = unprefixed;
        this.prefixed = prefixed;
        this.string = string || prefixed;
        this.regexp = regexp || utils.regexp(prefixed);
    }

    /**
     * Check, that value contain old value
     */


    OldValue.prototype.check = function check(value) {
        if (value.indexOf(this.string) !== -1) {
            return !!value.match(this.regexp);
        }
        return false;
    };

    return OldValue;
}();

var oldValue = OldValue;

function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$2(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$2(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var Value = function (_Prefixer) {
    _inherits$2(Value, _Prefixer);

    function Value() {
        _classCallCheck$7(this, Value);

        return _possibleConstructorReturn$2(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Clone decl for each prefixed values
     */
    Value.save = function save(prefixes, decl) {
        var _this2 = this;

        var prop = decl.prop;
        var result = [];

        var _loop = function _loop(prefix) {
            var value = decl._autoprefixerValues[prefix];

            if (value === decl.value) {
                return 'continue';
            }

            var item = void 0;
            var propPrefix = vendor_1.prefix(prop);

            if (propPrefix === '-pie-') {
                return 'continue';
            }

            if (propPrefix === prefix) {
                item = decl.value = value;
                result.push(item);
                return 'continue';
            }

            var prefixed = prefixes.prefixed(prop, prefix);
            var rule = decl.parent;

            if (!rule.every(function (i) {
                return i.prop !== prefixed;
            })) {
                result.push(item);
                return 'continue';
            }

            var trimmed = value.replace(/\s+/, ' ');
            var already = rule.some(function (i) {
                return i.prop === decl.prop && i.value.replace(/\s+/, ' ') === trimmed;
            });

            if (already) {
                result.push(item);
                return 'continue';
            }

            var cloned = _this2.clone(decl, { value: value });
            item = decl.parent.insertBefore(decl, cloned);

            result.push(item);
        };

        for (var prefix in decl._autoprefixerValues) {
            var _ret = _loop(prefix);

            if (_ret === 'continue') continue;
        }

        return result;
    };

    /**
     * Is declaration need to be prefixed
     */


    Value.prototype.check = function check(decl) {
        var value = decl.value;
        if (value.indexOf(this.name) === -1) {
            return false;
        }

        return !!value.match(this.regexp());
    };

    /**
     * Lazy regexp loading
     */


    Value.prototype.regexp = function regexp() {
        return this.regexpCache || (this.regexpCache = utils.regexp(this.name));
    };

    /**
     * Add prefix to values in string
     */


    Value.prototype.replace = function replace(string, prefix) {
        return string.replace(this.regexp(), '$1' + prefix + '$2');
    };

    /**
     * Get value with comments if it was not changed
     */


    Value.prototype.value = function value(decl) {
        if (decl.raws.value && decl.raws.value.value === decl.value) {
            return decl.raws.value.raw;
        } else {
            return decl.value;
        }
    };

    /**
     * Save values with next prefixed token
     */


    Value.prototype.add = function add(decl, prefix) {
        if (!decl._autoprefixerValues) {
            decl._autoprefixerValues = {};
        }
        var value = decl._autoprefixerValues[prefix] || this.value(decl);
        value = this.replace(value, prefix);
        if (value) {
            decl._autoprefixerValues[prefix] = value;
        }
    };

    /**
     * Return function to fast find prefixed value
     */


    Value.prototype.old = function old(prefix) {
        return new oldValue(this.name, prefix + this.name);
    };

    return Value;
}(prefixer);

var value = Value;

function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var OLD_LINEAR = /(^|[^-])linear-gradient\(\s*(top|left|right|bottom)/i;
var OLD_RADIAL = /(^|[^-])radial-gradient\(\s*\d+(\w*|%)\s+\d+(\w*|%)\s*,/i;

var SIZES = ['width', 'height', 'min-width', 'max-width', 'min-height', 'max-height', 'inline-size', 'min-inline-size', 'max-inline-size', 'block-size', 'min-block-size', 'max-block-size'];

var Processor = function () {
    function Processor(prefixes) {
        _classCallCheck$6(this, Processor);

        this.prefixes = prefixes;
    }

    /**
     * Add necessary prefixes
     */


    Processor.prototype.add = function add(css, result) {
        var _this = this;

        // At-rules
        var resolution = this.prefixes.add['@resolution'];
        var keyframes = this.prefixes.add['@keyframes'];
        var viewport = this.prefixes.add['@viewport'];
        var supports = this.prefixes.add['@supports'];

        css.walkAtRules(function (rule) {
            if (rule.name === 'keyframes') {
                if (!_this.disabled(rule, result)) {
                    return keyframes && keyframes.process(rule);
                }
            } else if (rule.name === 'viewport') {
                if (!_this.disabled(rule, result)) {
                    return viewport && viewport.process(rule);
                }
            } else if (rule.name === 'supports') {
                if (_this.prefixes.options.supports !== false && !_this.disabled(rule, result)) {
                    return supports.process(rule);
                }
            } else if (rule.name === 'media' && rule.params.indexOf('-resolution') !== -1) {
                if (!_this.disabled(rule, result)) {
                    return resolution && resolution.process(rule);
                }
            }

            return undefined;
        });

        // Selectors
        css.walkRules(function (rule) {
            if (_this.disabled(rule, result)) return undefined;

            return _this.prefixes.add.selectors.map(function (selector) {
                return selector.process(rule, result);
            });
        });

        css.walkDecls(function (decl) {
            if (_this.disabledDecl(decl, result)) return undefined;

            if (decl.prop === 'display' && decl.value === 'box') {
                result.warn('You should write display: flex by final spec ' + 'instead of display: box', { node: decl });
                return undefined;
            }
            if (decl.value.indexOf('linear-gradient') !== -1) {
                if (OLD_LINEAR.test(decl.value)) {
                    result.warn('Gradient has outdated direction syntax. ' + 'New syntax is like `to left` instead of `right`.', { node: decl });
                }
            }
            if (decl.value.indexOf('radial-gradient') !== -1) {
                if (OLD_RADIAL.test(decl.value)) {
                    result.warn('Gradient has outdated direction syntax. ' + 'New syntax is like `closest-side at 0 0` ' + 'instead of `0 0, closest-side`.', { node: decl });
                }
            }
            if (decl.prop === 'text-emphasis-position') {
                if (decl.value === 'under' || decl.value === 'over') {
                    result.warn('You should use 2 values for text-emphasis-position ' + 'For example, `under left` instead of just `under`.', { node: decl });
                }
            }

            if (SIZES.indexOf(decl.prop) !== -1) {
                if (decl.value.indexOf('fill-available') !== -1) {
                    result.warn('Replace fill-available to stretch, ' + 'because spec had been changed', { node: decl });
                } else if (decl.value.indexOf('fill') !== -1) {
                    result.warn('Replace fill to stretch, ' + 'because spec had been changed', { node: decl });
                }
            }

            if (_this.prefixes.options.flexbox !== false) {
                if (decl.prop === 'grid-row-end' && decl.value.indexOf('span') === -1) {
                    result.warn('IE supports only grid-row-end with span. ' + 'You should add grid: false option to Autoprefixer ' + 'and use some JS grid polyfill for full spec support', { node: decl });
                }
                if (decl.prop === 'grid-row') {
                    if (decl.value.indexOf('/') !== -1 && decl.value.indexOf('span') === -1) {
                        result.warn('IE supports only grid-row with / and span. ' + 'You should add grid: false option ' + 'to Autoprefixer and use some JS grid polyfill ' + 'for full spec support', { node: decl });
                    }
                }
            }

            var prefixer = void 0;

            if (decl.prop === 'transition' || decl.prop === 'transition-property') {
                // Transition
                return _this.prefixes.transition.add(decl, result);
            } else if (decl.prop === 'align-self') {
                // align-self flexbox or grid
                var display = _this.displayType(decl);
                if (display !== 'grid' && _this.prefixes.options.flexbox !== false) {
                    prefixer = _this.prefixes.add['align-self'];
                    if (prefixer && prefixer.prefixes) {
                        prefixer.process(decl);
                    }
                }
                if (display !== 'flex' && _this.prefixes.options.grid !== false) {
                    prefixer = _this.prefixes.add['grid-row-align'];
                    if (prefixer && prefixer.prefixes) {
                        return prefixer.process(decl);
                    }
                }
            } else if (decl.prop === 'justify-self') {
                // justify-self flexbox or grid
                var _display = _this.displayType(decl);
                if (_display !== 'flex' && _this.prefixes.options.grid !== false) {
                    prefixer = _this.prefixes.add['grid-column-align'];
                    if (prefixer && prefixer.prefixes) {
                        return prefixer.process(decl);
                    }
                }
            } else {
                // Properties
                prefixer = _this.prefixes.add[decl.prop];
                if (prefixer && prefixer.prefixes) {
                    return prefixer.process(decl);
                }
            }

            return undefined;
        });

        // Values
        return css.walkDecls(function (decl) {
            if (_this.disabledValue(decl, result)) return;

            var unprefixed = _this.prefixes.unprefixed(decl.prop);
            for (var _iterator = _this.prefixes.values('add', unprefixed), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var value$$1 = _ref;

                value$$1.process(decl, result);
            }
            value.save(_this.prefixes, decl);
        });
    };

    /**
     * Remove unnecessary pefixes
     */


    Processor.prototype.remove = function remove(css, result) {
        var _this2 = this;

        // At-rules
        var resolution = this.prefixes.remove['@resolution'];

        css.walkAtRules(function (rule, i) {
            if (_this2.prefixes.remove['@' + rule.name]) {
                if (!_this2.disabled(rule, result)) {
                    rule.parent.removeChild(i);
                }
            } else if (rule.name === 'media' && rule.params.indexOf('-resolution') !== -1 && resolution) {
                resolution.clean(rule);
            }
        });

        // Selectors

        var _loop = function _loop(checker) {
            css.walkRules(function (rule, i) {
                if (checker.check(rule)) {
                    if (!_this2.disabled(rule, result)) {
                        rule.parent.removeChild(i);
                    }
                }
            });
        };

        for (var _iterator2 = this.prefixes.remove.selectors, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var checker = _ref2;

            _loop(checker);
        }

        return css.walkDecls(function (decl, i) {
            if (_this2.disabled(decl, result)) return;

            var rule = decl.parent;
            var unprefixed = _this2.prefixes.unprefixed(decl.prop);

            // Transition
            if (decl.prop === 'transition' || decl.prop === 'transition-property') {
                _this2.prefixes.transition.remove(decl);
            }

            // Properties
            if (_this2.prefixes.remove[decl.prop] && _this2.prefixes.remove[decl.prop].remove) {
                var notHack = _this2.prefixes.group(decl).down(function (other) {
                    return _this2.prefixes.normalize(other.prop) === unprefixed;
                });

                if (unprefixed === 'flex-flow') {
                    notHack = true;
                }

                if (notHack && !_this2.withHackValue(decl)) {
                    if (decl.raw('before').indexOf('\n') > -1) {
                        _this2.reduceSpaces(decl);
                    }
                    rule.removeChild(i);
                    return;
                }
            }

            // Values
            for (var _iterator3 = _this2.prefixes.values('remove', unprefixed), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                var _ref3;

                if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                }

                var checker = _ref3;

                if (!checker.check(decl.value)) {
                    continue;
                }

                unprefixed = checker.unprefixed;
                var _notHack = _this2.prefixes.group(decl).down(function (other) {
                    return other.value.indexOf(unprefixed) !== -1;
                });

                if (_notHack) {
                    rule.removeChild(i);
                    return;
                }

                if (checker.clean) {
                    checker.clean(decl);
                    return;
                }
            }
        });
    };

    /**
     * Some rare old values, which is not in standard
     */


    Processor.prototype.withHackValue = function withHackValue(decl) {
        return decl.prop === '-webkit-background-clip' && decl.value === 'text';
    };

    /**
     * Check for grid/flexbox options.
     */


    Processor.prototype.disabledValue = function disabledValue(node, result) {
        if (this.prefixes.options.grid === false && node.type === 'decl') {
            if (node.prop === 'display' && node.value.indexOf('grid') !== -1) {
                return true;
            }
        }
        if (this.prefixes.options.flexbox === false && node.type === 'decl') {
            if (node.prop === 'display' && node.value.indexOf('flex') !== -1) {
                return true;
            }
        }

        return this.disabled(node, result);
    };

    /**
     * Check for grid/flexbox options.
     */


    Processor.prototype.disabledDecl = function disabledDecl(node, result) {
        if (this.prefixes.options.grid === false && node.type === 'decl') {
            if (node.prop.indexOf('grid') !== -1 || node.prop === 'justify-items') {
                return true;
            }
        }
        if (this.prefixes.options.flexbox === false && node.type === 'decl') {
            var other = ['order', 'justify-content', 'align-items', 'align-content'];
            if (node.prop.indexOf('flex') !== -1 || other.indexOf(node.prop) !== -1) {
                return true;
            }
        }

        return this.disabled(node, result);
    };

    /**
     * Check for control comment and global options
     */


    Processor.prototype.disabled = function disabled(node, result) {
        if (node._autoprefixerDisabled !== undefined) {
            return node._autoprefixerDisabled;
        }

        if (node.nodes) {
            var status = undefined;
            node.each(function (i) {
                if (i.type !== 'comment') {
                    return undefined;
                }
                if (/(!\s*)?autoprefixer:\s*(off|on)/i.test(i.text)) {
                    if (typeof status !== 'undefined') {
                        result.warn('Second Autoprefixer control comment ' + 'was ignored. Autoprefixer applies control ' + 'comment to whole block, not to next rules.', { node: i });
                    } else {
                        status = /on/i.test(i.text);
                    }
                }
                return undefined;
            });

            var value$$1 = false;
            if (status !== undefined) {
                value$$1 = !status;
            } else if (node.parent) {
                value$$1 = this.disabled(node.parent, result);
            }

            node._autoprefixerDisabled = value$$1;
            return node._autoprefixerDisabled;
        }

        if (node.parent) {
            node._autoprefixerDisabled = this.disabled(node.parent, result);
            return node._autoprefixerDisabled;
        }

        // unknown state
        return false;
    };

    /**
     * Normalize spaces in cascade declaration group
     */


    Processor.prototype.reduceSpaces = function reduceSpaces(decl) {
        var stop = false;
        this.prefixes.group(decl).up(function () {
            stop = true;
            return true;
        });
        if (stop) {
            return;
        }

        var parts = decl.raw('before').split('\n');
        var prevMin = parts[parts.length - 1].length;
        var diff = false;

        this.prefixes.group(decl).down(function (other) {
            parts = other.raw('before').split('\n');
            var last = parts.length - 1;

            if (parts[last].length > prevMin) {
                if (diff === false) {
                    diff = parts[last].length - prevMin;
                }

                parts[last] = parts[last].slice(0, -diff);
                other.raws.before = parts.join('\n');
            }
        });
    };

    /**
     * Is it flebox or grid rule
     */


    Processor.prototype.displayType = function displayType(decl) {
        for (var _iterator4 = decl.parent.nodes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
            }

            var i = _ref4;

            if (i.prop !== 'display') {
                continue;
            }

            if (i.value.indexOf('flex') !== -1) {
                return 'flex';
            }

            if (i.value.indexOf('grid') !== -1) {
                return 'grid';
            }
        }

        return false;
    };

    return Processor;
}();

var processor = Processor;

var _typeof$2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var last = function last(array) {
    return array[array.length - 1];
};

var brackets = {

    /**
     * Parse string to nodes tree
     */
    parse: function parse(str) {
        var current = [''];
        var stack = [current];

        for (var i = 0; i < str.length; i++) {
            var sym = str[i];
            if (sym === '(') {
                current = [''];
                last(stack).push(current);
                stack.push(current);
                continue;
            }

            if (sym === ')') {
                stack.pop();
                current = last(stack);
                current.push('');
                continue;
            }

            current[current.length - 1] += sym;
        }

        return stack[0];
    },


    /**
     * Generate output string by nodes tree
     */
    stringify: function stringify(ast) {
        var result = '';
        for (var _iterator = ast, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var i = _ref;

            if ((typeof i === 'undefined' ? 'undefined' : _typeof$2(i)) === 'object') {
                result += '(' + brackets.stringify(i) + ')';
                continue;
            }

            result += i;
        }
        return result;
    }
};

var brackets_1 = brackets;

var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck$9(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var supported$2 = [];
var data = unpacker.feature(cssFeaturequeries);
for (var browser in data.stats) {
    var versions$2 = data.stats[browser];
    for (var version in versions$2) {
        var support = versions$2[version];
        if (/y/.test(support)) {
            supported$2.push(browser + ' ' + version);
        }
    }
}

var Supports = function () {
    function Supports(Prefixes, all) {
        _classCallCheck$9(this, Supports);

        this.Prefixes = Prefixes;
        this.all = all;
    }

    /**
     * Return prefixer only with @supports supported browsers
     */


    Supports.prototype.prefixer = function prefixer() {
        if (this.prefixerCache) {
            return this.prefixerCache;
        }

        var filtered = this.all.browsers.selected.filter(function (i) {
            return supported$2.indexOf(i) !== -1;
        });

        var browsers = new browsers$3(this.all.browsers.data, filtered, this.all.options);
        this.prefixerCache = new this.Prefixes(this.all.data, browsers, this.all.options);
        return this.prefixerCache;
    };

    /**
     * Parse string into declaration property and value
     */


    Supports.prototype.parse = function parse(str) {
        var _str$split = str.split(':'),
            prop = _str$split[0],
            value$$2 = _str$split[1];

        if (!value$$2) value$$2 = '';
        return [prop.trim(), value$$2.trim()];
    };

    /**
     * Create virtual rule to process it by prefixer
     */


    Supports.prototype.virtual = function virtual(str) {
        var _parse = this.parse(str),
            prop = _parse[0],
            value$$2 = _parse[1];

        var rule = postcss.parse('a{}').first;
        rule.append({ prop: prop, value: value$$2, raws: { before: '' } });
        return rule;
    };

    /**
     * Return array of Declaration with all necessary prefixes
     */


    Supports.prototype.prefixed = function prefixed(str) {
        var rule = this.virtual(str);
        if (this.disabled(rule.first)) {
            return rule.nodes;
        }

        var prefixer = this.prefixer().add[rule.first.prop];
        prefixer && prefixer.process && prefixer.process(rule.first);

        for (var _iterator = rule.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var decl = _ref;

            for (var _iterator2 = this.prefixer().values('add', rule.first.prop), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var value$$2 = _ref2;

                value$$2.process(decl);
            }
            value.save(this.all, decl);
        }

        return rule.nodes;
    };

    /**
     * Return true if brackets node is "not" word
     */


    Supports.prototype.isNot = function isNot(node) {
        return typeof node === 'string' && /not\s*/i.test(node);
    };

    /**
     * Return true if brackets node is "or" word
     */


    Supports.prototype.isOr = function isOr(node) {
        return typeof node === 'string' && /\s*or\s*/i.test(node);
    };

    /**
     * Return true if brackets node is (prop: value)
     */


    Supports.prototype.isProp = function isProp(node) {
        return (typeof node === 'undefined' ? 'undefined' : _typeof$1(node)) === 'object' && node.length === 1 && typeof node[0] === 'string';
    };

    /**
     * Return true if prefixed property has no unprefixed
     */


    Supports.prototype.isHack = function isHack(all, unprefixed) {
        var check = new RegExp('(\\(|\\s)' + utils.escapeRegexp(unprefixed) + ':');
        return !check.test(all);
    };

    /**
     * Return true if we need to remove node
     */


    Supports.prototype.toRemove = function toRemove(str, all) {
        var _parse2 = this.parse(str),
            prop = _parse2[0],
            value$$2 = _parse2[1];

        var unprefixed = this.all.unprefixed(prop);

        var cleaner = this.all.cleaner();

        if (cleaner.remove[prop] && cleaner.remove[prop].remove && !this.isHack(all, unprefixed)) {
            return true;
        }

        for (var _iterator3 = cleaner.values('remove', unprefixed), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
            } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
            }

            var checker = _ref3;

            if (checker.check(value$$2)) {
                return true;
            }
        }

        return false;
    };

    /**
     * Remove all unnecessary prefixes
     */


    Supports.prototype.remove = function remove(nodes, all) {
        var i = 0;
        while (i < nodes.length) {
            if (!this.isNot(nodes[i - 1]) && this.isProp(nodes[i]) && this.isOr(nodes[i + 1])) {
                if (this.toRemove(nodes[i][0], all)) {
                    nodes.splice(i, 2);
                    continue;
                }

                i += 2;
                continue;
            }

            if (_typeof$1(nodes[i]) === 'object') {
                nodes[i] = this.remove(nodes[i], all);
            }

            i += 1;
        }
        return nodes;
    };

    /**
     * Clean brackets with one child
     */


    Supports.prototype.cleanBrackets = function cleanBrackets(nodes) {
        var _this = this;

        return nodes.map(function (i) {
            if ((typeof i === 'undefined' ? 'undefined' : _typeof$1(i)) !== 'object') {
                return i;
            }

            if (i.length === 1 && _typeof$1(i[0]) === 'object') {
                return _this.cleanBrackets(i[0]);
            }

            return _this.cleanBrackets(i);
        });
    };

    /**
     * Add " or " between properties and convert it to brackets format
     */


    Supports.prototype.convert = function convert(progress) {
        var result = [''];
        for (var _iterator4 = progress, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
            }

            var i = _ref4;

            result.push([i.prop + ': ' + i.value]);
            result.push(' or ');
        }
        result[result.length - 1] = '';
        return result;
    };

    /**
     * Compress value functions into a string nodes
     */


    Supports.prototype.normalize = function normalize(nodes) {
        var _this2 = this;

        if ((typeof nodes === 'undefined' ? 'undefined' : _typeof$1(nodes)) !== 'object') {
            return nodes;
        }

        nodes = nodes.filter(function (i) {
            return i !== '';
        });
        if (typeof nodes[0] === 'string' && nodes[0].indexOf(':') !== -1) {
            return [brackets_1.stringify(nodes)];
        }

        return nodes.map(function (i) {
            return _this2.normalize(i);
        });
    };

    /**
     * Add prefixes
     */


    Supports.prototype.add = function add(nodes, all) {
        var _this3 = this;

        return nodes.map(function (i) {
            if (_this3.isProp(i)) {
                var prefixed = _this3.prefixed(i[0]);
                if (prefixed.length > 1) {
                    return _this3.convert(prefixed);
                }

                return i;
            }

            if ((typeof i === 'undefined' ? 'undefined' : _typeof$1(i)) === 'object') {
                return _this3.add(i, all);
            }

            return i;
        });
    };

    /**
     * Add prefixed declaration
     */


    Supports.prototype.process = function process(rule) {
        var ast = brackets_1.parse(rule.params);
        ast = this.normalize(ast);
        ast = this.remove(ast, rule.params);
        ast = this.add(ast, rule.params);
        ast = this.cleanBrackets(ast);
        rule.params = brackets_1.stringify(ast);
    };

    /**
     * Check global options
     */


    Supports.prototype.disabled = function disabled(node) {
        if (this.all.options.grid === false) {
            if (node.prop === 'display' && node.value.indexOf('grid') !== -1) {
                return true;
            }
            if (node.prop.indexOf('grid') !== -1 || node.prop === 'justify-items') {
                return true;
            }
        }

        if (this.all.options.flexbox === false) {
            if (node.prop === 'display' && node.value.indexOf('flex') !== -1) {
                return true;
            }
            var other = ['order', 'justify-content', 'align-items', 'align-content'];
            if (node.prop.indexOf('flex') !== -1 || other.indexOf(node.prop) !== -1) {
                return true;
            }
        }

        return false;
    };

    return Supports;
}();

var supports = Supports;

function _classCallCheck$11(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OldSelector = function () {
    function OldSelector(selector, prefix) {
        _classCallCheck$11(this, OldSelector);

        this.prefix = prefix;
        this.prefixed = selector.prefixed(this.prefix);
        this.regexp = selector.regexp(this.prefix);

        this.prefixeds = selector.possible().map(function (x) {
            return [selector.prefixed(x), selector.regexp(x)];
        });

        this.unprefixed = selector.name;
        this.nameRegexp = selector.regexp();
    }

    /**
     * Is rule a hack without unprefixed version bottom
     */


    OldSelector.prototype.isHack = function isHack(rule) {
        var index = rule.parent.index(rule) + 1;
        var rules = rule.parent.nodes;

        while (index < rules.length) {
            var before = rules[index].selector;
            if (!before) {
                return true;
            }

            if (before.indexOf(this.unprefixed) !== -1 && before.match(this.nameRegexp)) {
                return false;
            }

            var some = false;
            for (var _iterator = this.prefixeds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref2 = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref2 = _i.value;
                }

                var _ref = _ref2;
                var string = _ref[0];
                var regexp = _ref[1];

                if (before.indexOf(string) !== -1 && before.match(regexp)) {
                    some = true;
                    break;
                }
            }

            if (!some) {
                return true;
            }

            index += 1;
        }

        return true;
    };

    /**
     * Does rule contain an unnecessary prefixed selector
     */


    OldSelector.prototype.check = function check(rule) {
        if (rule.selector.indexOf(this.prefixed) === -1) {
            return false;
        }
        if (!rule.selector.match(this.regexp)) {
            return false;
        }
        if (this.isHack(rule)) {
            return false;
        }
        return true;
    };

    return OldSelector;
}();

var oldSelector = OldSelector;

function _classCallCheck$10(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$3(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$3(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var Selector = function (_Prefixer) {
    _inherits$3(Selector, _Prefixer);

    function Selector(name, prefixes, all) {
        _classCallCheck$10(this, Selector);

        var _this = _possibleConstructorReturn$3(this, _Prefixer.call(this, name, prefixes, all));

        _this.regexpCache = {};
        return _this;
    }

    /**
     * Is rule selectors need to be prefixed
     */


    Selector.prototype.check = function check(rule) {
        if (rule.selector.indexOf(this.name) !== -1) {
            return !!rule.selector.match(this.regexp());
        }

        return false;
    };

    /**
     * Return prefixed version of selector
     */


    Selector.prototype.prefixed = function prefixed(prefix) {
        return this.name.replace(/^([^\w]*)/, '$1' + prefix);
    };

    /**
     * Lazy loadRegExp for name
     */


    Selector.prototype.regexp = function regexp(prefix) {
        if (this.regexpCache[prefix]) {
            return this.regexpCache[prefix];
        }

        var name = prefix ? this.prefixed(prefix) : this.name;
        this.regexpCache[prefix] = new RegExp('(^|[^:"\'=])' + utils.escapeRegexp(name), 'gi');
        return this.regexpCache[prefix];
    };

    /**
     * All possible prefixes
     */


    Selector.prototype.possible = function possible() {
        return browsers$3.prefixes();
    };

    /**
     * Return all possible selector prefixes
     */


    Selector.prototype.prefixeds = function prefixeds(rule) {
        if (rule._autoprefixerPrefixeds) {
            return rule._autoprefixerPrefixeds;
        }

        var prefixeds = {};
        for (var _iterator = this.possible(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var prefix = _ref;

            prefixeds[prefix] = this.replace(rule.selector, prefix);
        }

        rule._autoprefixerPrefixeds = prefixeds;
        return rule._autoprefixerPrefixeds;
    };

    /**
     * Is rule already prefixed before
     */


    Selector.prototype.already = function already(rule, prefixeds, prefix) {
        var index = rule.parent.index(rule) - 1;

        while (index >= 0) {
            var before = rule.parent.nodes[index];

            if (before.type !== 'rule') {
                return false;
            }

            var some = false;
            for (var key in prefixeds) {
                var prefixed = prefixeds[key];
                if (before.selector === prefixed) {
                    if (prefix === key) {
                        return true;
                    } else {
                        some = true;
                        break;
                    }
                }
            }
            if (!some) {
                return false;
            }

            index -= 1;
        }

        return false;
    };

    /**
     * Replace selectors by prefixed one
     */


    Selector.prototype.replace = function replace(selector, prefix) {
        return selector.replace(this.regexp(), '$1' + this.prefixed(prefix));
    };

    /**
     * Clone and add prefixes for at-rule
     */


    Selector.prototype.add = function add(rule, prefix) {
        var prefixeds = this.prefixeds(rule);

        if (this.already(rule, prefixeds, prefix)) {
            return;
        }

        var cloned = this.clone(rule, { selector: prefixeds[prefix] });
        rule.parent.insertBefore(rule, cloned);
    };

    /**
     * Return function to fast find prefixed selector
     */


    Selector.prototype.old = function old(prefix) {
        return new oldSelector(this, prefix);
    };

    return Selector;
}(prefixer);

var selector = Selector;

function _classCallCheck$12(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$4(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$4(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var AtRule = function (_Prefixer) {
    _inherits$4(AtRule, _Prefixer);

    function AtRule() {
        _classCallCheck$12(this, AtRule);

        return _possibleConstructorReturn$4(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Clone and add prefixes for at-rule
     */
    AtRule.prototype.add = function add(rule, prefix) {
        var prefixed = prefix + rule.name;

        var already = rule.parent.some(function (i) {
            return i.name === prefixed && i.params === rule.params;
        });
        if (already) {
            return undefined;
        }

        var cloned = this.clone(rule, { name: prefixed });
        return rule.parent.insertBefore(rule, cloned);
    };

    /**
     * Clone node with prefixes
     */


    AtRule.prototype.process = function process(node) {
        var parent = this.parentPrefix(node);

        for (var _iterator = this.prefixes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var prefix = _ref;

            if (!parent || parent === prefix) {
                this.add(node, prefix);
            }
        }
    };

    return AtRule;
}(prefixer);

var atRule = AtRule;

function _classCallCheck$13(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$5(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$5(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var Fullscreen = function (_Selector) {
    _inherits$5(Fullscreen, _Selector);

    function Fullscreen() {
        _classCallCheck$13(this, Fullscreen);

        return _possibleConstructorReturn$5(this, _Selector.apply(this, arguments));
    }

    /**
     * Return different selectors depend on prefix
     */
    Fullscreen.prototype.prefixed = function prefixed(prefix) {
        if (prefix === '-webkit-') {
            return ':-webkit-full-screen';
        } else if (prefix === '-moz-') {
            return ':-moz-full-screen';
        } else {
            return ':' + prefix + 'fullscreen';
        }
    };

    return Fullscreen;
}(selector);

Object.defineProperty(Fullscreen, 'names', {
    enumerable: true,
    writable: true,
    value: [':fullscreen']
});


var fullscreen$3 = Fullscreen;

function _classCallCheck$14(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$6(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$6(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var Placeholder = function (_Selector) {
    _inherits$6(Placeholder, _Selector);

    function Placeholder() {
        _classCallCheck$14(this, Placeholder);

        return _possibleConstructorReturn$6(this, _Selector.apply(this, arguments));
    }

    /**
     * Add old mozilla to possible prefixes
     */
    Placeholder.prototype.possible = function possible() {
        return _Selector.prototype.possible.call(this).concat(['-moz- old', '-ms- old']);
    };

    /**
     * Return different selectors depend on prefix
     */


    Placeholder.prototype.prefixed = function prefixed(prefix) {
        if (prefix === '-webkit-') {
            return '::-webkit-input-placeholder';
        } else if (prefix === '-ms-') {
            return '::-ms-input-placeholder';
        } else if (prefix === '-ms- old') {
            return ':-ms-input-placeholder';
        } else if (prefix === '-moz- old') {
            return ':-moz-placeholder';
        } else {
            return '::' + prefix + 'placeholder';
        }
    };

    return Placeholder;
}(selector);

Object.defineProperty(Placeholder, 'names', {
    enumerable: true,
    writable: true,
    value: ['::placeholder']
});


var placeholder = Placeholder;

/**
 * Return flexbox spec versions by prefix
 */
var flexSpec = function (prefix) {
    var spec = void 0;
    if (prefix === '-webkit- 2009' || prefix === '-moz-') {
        spec = 2009;
    } else if (prefix === '-ms-') {
        spec = 2012;
    } else if (prefix === '-webkit-') {
        spec = 'final';
    }

    if (prefix === '-webkit- 2009') {
        prefix = '-webkit-';
    }

    return [spec, prefix];
};

function _classCallCheck$15(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$7(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$7(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var Flex = function (_Declaration) {
    _inherits$7(Flex, _Declaration);

    function Flex() {
        _classCallCheck$15(this, Flex);

        return _possibleConstructorReturn$7(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 spec
     */
    Flex.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-flex';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    Flex.prototype.normalize = function normalize() {
        return 'flex';
    };

    /**
     * Spec 2009 supports only first argument
     * Spec 2012 disallows unitless basis
     */


    Flex.prototype.set = function set(decl, prefix) {
        var spec = flexSpec(prefix)[0];
        if (spec === 2009) {
            decl.value = list_1.space(decl.value)[0];
            decl.value = Flex.oldValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else if (spec === 2012) {
            var components = list_1.space(decl.value);
            if (components.length === 3 && components[2] === '0') {
                decl.value = components.slice(0, 2).concat('0px').join(' ');
            }
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return Flex;
}(declaration);

Object.defineProperty(Flex, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex', 'box-flex']
});
Object.defineProperty(Flex, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        auto: '1',
        none: '0'
    }
});


var flex = Flex;

function _classCallCheck$16(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$8(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$8(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Order = function (_Declaration) {
    _inherits$8(Order, _Declaration);

    function Order() {
        _classCallCheck$16(this, Order);

        return _possibleConstructorReturn$8(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    Order.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-ordinal-group';
        } else if (spec === 2012) {
            return prefix + 'flex-order';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    Order.prototype.normalize = function normalize() {
        return 'order';
    };

    /**
     * Fix value for 2009 spec
     */


    Order.prototype.set = function set(decl, prefix) {
        var spec = flexSpec(prefix)[0];
        if (spec === 2009 && /\d/.test(decl.value)) {
            decl.value = (parseInt(decl.value) + 1).toString();
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
    };

    return Order;
}(declaration);

Object.defineProperty(Order, 'names', {
    enumerable: true,
    writable: true,
    value: ['order', 'flex-order', 'box-ordinal-group']
});


var order = Order;

function _classCallCheck$17(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$9(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$9(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var Filter = function (_Declaration) {
    _inherits$9(Filter, _Declaration);

    function Filter() {
        _classCallCheck$17(this, Filter);

        return _possibleConstructorReturn$9(this, _Declaration.apply(this, arguments));
    }

    /**
     * Check is it Internet Explorer filter
     */
    Filter.prototype.check = function check(decl) {
        var v = decl.value;
        return v.toLowerCase().indexOf('alpha(') === -1 && v.indexOf('DXImageTransform.Microsoft') === -1 && v.indexOf('data:image/svg+xml') === -1;
    };

    return Filter;
}(declaration);

Object.defineProperty(Filter, 'names', {
    enumerable: true,
    writable: true,
    value: ['filter']
});


var filter = Filter;

function _classCallCheck$18(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$10(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$10(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var GridEnd = function (_Declaration) {
    _inherits$10(GridEnd, _Declaration);

    function GridEnd() {
        _classCallCheck$18(this, GridEnd);

        return _possibleConstructorReturn$10(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefix for unsupported value in IE
     */
    GridEnd.prototype.check = function check(decl) {
        return decl.value.indexOf('span') !== -1;
    };

    /**
     * Return a final spec property
     */


    GridEnd.prototype.normalize = function normalize(prop) {
        return prop.replace(/(-span|-end)/, '');
    };

    /**
     * Change property name for IE
     */


    GridEnd.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-ms-') {
            return prefix + prop.replace('-end', '-span');
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Change repeating syntax for IE
     */


    GridEnd.prototype.set = function set(decl, prefix) {
        if (prefix === '-ms-') {
            decl.value = decl.value.replace(/span\s/i, '');
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return GridEnd;
}(declaration);

Object.defineProperty(GridEnd, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-row-end', 'grid-column-end', 'grid-row-span', 'grid-column-span']
});


var gridEnd = GridEnd;

function _classCallCheck$19(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$11(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$11(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var FlexFlow = function (_Declaration) {
    _inherits$11(FlexFlow, _Declaration);

    function FlexFlow() {
        _classCallCheck$19(this, FlexFlow);

        return _possibleConstructorReturn$11(this, _Declaration.apply(this, arguments));
    }

    /**
     * Use two properties for 2009 spec
     */
    FlexFlow.prototype.insert = function insert(decl, prefix, prefixes) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec !== 2009) {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        } else {
            var values = decl.value.split(/\s+/).filter(function (i) {
                return i !== 'wrap' && i !== 'nowrap' && 'wrap-reverse';
            });
            if (values.length === 0) {
                return undefined;
            }

            var already = decl.parent.some(function (i) {
                return i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction';
            });
            if (already) {
                return undefined;
            }

            var value = values[0];
            var orient = value.indexOf('row') !== -1 ? 'horizontal' : 'vertical';
            var dir = value.indexOf('reverse') !== -1 ? 'reverse' : 'normal';

            var cloned = this.clone(decl);
            cloned.prop = prefix + 'box-orient';
            cloned.value = orient;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            decl.parent.insertBefore(decl, cloned);

            cloned = this.clone(decl);
            cloned.prop = prefix + 'box-direction';
            cloned.value = dir;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            return decl.parent.insertBefore(decl, cloned);
        }
    };

    return FlexFlow;
}(declaration);

Object.defineProperty(FlexFlow, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-flow', 'box-direction', 'box-orient']
});


var flexFlow = FlexFlow;

function _classCallCheck$20(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$12(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$12(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Flex$1 = function (_Declaration) {
    _inherits$12(Flex, _Declaration);

    function Flex() {
        _classCallCheck$20(this, Flex);

        return _possibleConstructorReturn$12(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    Flex.prototype.normalize = function normalize() {
        return 'flex';
    };

    /**
     * Return flex property for 2009 and 2012 specs
     */


    Flex.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-flex';
        } else if (spec === 2012) {
            return prefix + 'flex-positive';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    return Flex;
}(declaration);

Object.defineProperty(Flex$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-grow', 'flex-positive']
});


var flexGrow = Flex$1;

function _classCallCheck$21(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$13(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$13(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var FlexWrap = function (_Declaration) {
    _inherits$13(FlexWrap, _Declaration);

    function FlexWrap() {
        _classCallCheck$21(this, FlexWrap);

        return _possibleConstructorReturn$13(this, _Declaration.apply(this, arguments));
    }

    /**
     * Don't add prefix for 2009 spec
     */
    FlexWrap.prototype.set = function set(decl, prefix) {
        var spec = flexSpec(prefix)[0];
        if (spec !== 2009) {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return FlexWrap;
}(declaration);

Object.defineProperty(FlexWrap, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-wrap']
});


var flexWrap = FlexWrap;

function _classCallCheck$22(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$14(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$14(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var GridStart = function (_Declaration) {
    _inherits$14(GridStart, _Declaration);

    function GridStart() {
        _classCallCheck$22(this, GridStart);

        return _possibleConstructorReturn$14(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefix for unsupported value in IE
     */
    GridStart.prototype.check = function check(decl) {
        return decl.value.indexOf('/') === -1 || decl.value.indexOf('span') !== -1;
    };

    /**
     * Return a final spec property
     */


    GridStart.prototype.normalize = function normalize(prop) {
        return prop.replace('-start', '');
    };

    /**
     * Change property name for IE
     */


    GridStart.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-ms-') {
            return prefix + prop.replace('-start', '');
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Split one value to two
     */


    GridStart.prototype.insert = function insert(decl, prefix, prefixes) {
        var parts = this.splitValue(decl, prefix);
        if (parts.length === 2) {
            decl.cloneBefore({
                prop: '-ms-' + decl.prop + '-span',
                value: parts[1]
            });
        }
        return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
    };

    /**
     * Change value for combine property
     */


    GridStart.prototype.set = function set(decl, prefix) {
        var parts = this.splitValue(decl, prefix);
        if (parts.length === 2) {
            decl.value = parts[0];
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    /**
     * If property contains start and end
     */


    GridStart.prototype.splitValue = function splitValue(decl, prefix) {
        if (prefix === '-ms-' && decl.prop.indexOf('-start') === -1) {
            var parts = decl.value.split(/\s*\/\s*span\s+/);
            if (parts.length === 2) {
                return parts;
            }
        }
        return false;
    };

    return GridStart;
}(declaration);

Object.defineProperty(GridStart, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-row-start', 'grid-column-start', 'grid-row', 'grid-column']
});


var gridStart = GridStart;

function _classCallCheck$23(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$15(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$15(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var AlignSelf = function (_Declaration) {
    _inherits$15(AlignSelf, _Declaration);

    function AlignSelf() {
        _classCallCheck$23(this, AlignSelf);

        return _possibleConstructorReturn$15(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2012 specs
     */
    AlignSelf.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-item-align';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    AlignSelf.prototype.normalize = function normalize() {
        return 'align-self';
    };

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */


    AlignSelf.prototype.set = function set(decl, prefix) {
        var spec = flexSpec(prefix)[0];
        if (spec === 2012) {
            decl.value = AlignSelf.oldValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else if (spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return AlignSelf;
}(declaration);

Object.defineProperty(AlignSelf, 'names', {
    enumerable: true,
    writable: true,
    value: ['align-self', 'flex-item-align']
});
Object.defineProperty(AlignSelf, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start'
    }
});


var alignSelf = AlignSelf;

function _classCallCheck$24(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$16(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$16(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Appearance = function (_Declaration) {
    _inherits$16(Appearance, _Declaration);

    function Appearance(name, prefixes, all) {
        _classCallCheck$24(this, Appearance);

        var _this = _possibleConstructorReturn$16(this, _Declaration.call(this, name, prefixes, all));

        if (_this.prefixes) {
            _this.prefixes = utils.uniq(_this.prefixes.map(function (i) {
                if (i === '-ms-') {
                    return '-webkit-';
                } else {
                    return i;
                }
            }));
        }
        return _this;
    }

    return Appearance;
}(declaration);

Object.defineProperty(Appearance, 'names', {
    enumerable: true,
    writable: true,
    value: ['appearance']
});


var appearance$1 = Appearance;

function _classCallCheck$25(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$17(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$17(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var FlexBasis = function (_Declaration) {
    _inherits$17(FlexBasis, _Declaration);

    function FlexBasis() {
        _classCallCheck$25(this, FlexBasis);

        return _possibleConstructorReturn$17(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    FlexBasis.prototype.normalize = function normalize() {
        return 'flex-basis';
    };

    /**
     * Return flex property for 2012 spec
     */


    FlexBasis.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-preferred-size';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Ignore 2009 spec and use flex property for 2012
     */


    FlexBasis.prototype.set = function set(decl, prefix) {
        var spec = void 0;

        var _flexSpec2 = flexSpec(prefix);

        spec = _flexSpec2[0];
        prefix = _flexSpec2[1];

        if (spec === 2012 || spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return FlexBasis;
}(declaration);

Object.defineProperty(FlexBasis, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-basis', 'flex-preferred-size']
});


var flexBasis = FlexBasis;

function _classCallCheck$26(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$18(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$18(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var MaskBorder = function (_Declaration) {
    _inherits$18(MaskBorder, _Declaration);

    function MaskBorder() {
        _classCallCheck$26(this, MaskBorder);

        return _possibleConstructorReturn$18(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    MaskBorder.prototype.normalize = function normalize() {
        return this.name.replace('box-image', 'border');
    };

    /**
     * Return flex property for 2012 spec
     */


    MaskBorder.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-webkit-') {
            return _Declaration.prototype.prefixed.call(this, prop, prefix).replace('border', 'box-image');
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    return MaskBorder;
}(declaration);

Object.defineProperty(MaskBorder, 'names', {
    enumerable: true,
    writable: true,
    value: ['mask-border', 'mask-border-source', 'mask-border-slice', 'mask-border-width', 'mask-border-outset', 'mask-border-repeat', 'mask-box-image', 'mask-box-image-source', 'mask-box-image-slice', 'mask-box-image-width', 'mask-box-image-outset', 'mask-box-image-repeat']
});


var maskBorder = MaskBorder;

function _classCallCheck$27(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$19(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$19(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var AlignItems = function (_Declaration) {
    _inherits$19(AlignItems, _Declaration);

    function AlignItems() {
        _classCallCheck$27(this, AlignItems);

        return _possibleConstructorReturn$19(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    AlignItems.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-align';
        } else if (spec === 2012) {
            return prefix + 'flex-align';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    AlignItems.prototype.normalize = function normalize() {
        return 'align-items';
    };

    /**
     * Change value for 2009 and 2012 specs
     */


    AlignItems.prototype.set = function set(decl, prefix) {
        var spec = flexSpec(prefix)[0];
        if (spec === 2009 || spec === 2012) {
            decl.value = AlignItems.oldValues[decl.value] || decl.value;
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return AlignItems;
}(declaration);

Object.defineProperty(AlignItems, 'names', {
    enumerable: true,
    writable: true,
    value: ['align-items', 'flex-align', 'box-align']
});
Object.defineProperty(AlignItems, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start'
    }
});


var alignItems = AlignItems;

function _classCallCheck$28(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$20(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$20(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var FlexShrink = function (_Declaration) {
    _inherits$20(FlexShrink, _Declaration);

    function FlexShrink() {
        _classCallCheck$28(this, FlexShrink);

        return _possibleConstructorReturn$20(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    FlexShrink.prototype.normalize = function normalize() {
        return 'flex-shrink';
    };

    /**
     * Return flex property for 2012 spec
     */


    FlexShrink.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-negative';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Ignore 2009 spec and use flex property for 2012
     */


    FlexShrink.prototype.set = function set(decl, prefix) {
        var spec = void 0;

        var _flexSpec2 = flexSpec(prefix);

        spec = _flexSpec2[0];
        prefix = _flexSpec2[1];

        if (spec === 2012 || spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return FlexShrink;
}(declaration);

Object.defineProperty(FlexShrink, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-shrink', 'flex-negative']
});


var flexShrink = FlexShrink;

function _classCallCheck$29(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$21(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$21(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var BreakProps = function (_Declaration) {
    _inherits$21(BreakProps, _Declaration);

    function BreakProps() {
        _classCallCheck$29(this, BreakProps);

        return _possibleConstructorReturn$21(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change name for -webkit- and -moz- prefix
     */
    BreakProps.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-webkit-') {
            return '-webkit-column-' + prop;
        } else if (prefix === '-moz-') {
            return 'page-' + prop;
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    BreakProps.prototype.normalize = function normalize(prop) {
        if (prop.indexOf('inside') !== -1) {
            return 'break-inside';
        } else if (prop.indexOf('before') !== -1) {
            return 'break-before';
        } else if (prop.indexOf('after') !== -1) {
            return 'break-after';
        }
        return undefined;
    };

    /**
     * Change prefixed value for avoid-column and avoid-page
     */


    BreakProps.prototype.set = function set(decl, prefix) {
        var v = decl.value;
        if (decl.prop === 'break-inside' && v === 'avoid-column' || v === 'avoid-page') {
            decl.value = 'avoid';
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    /**
     * Don’t prefix some values
     */


    BreakProps.prototype.insert = function insert(decl, prefix, prefixes) {
        if (decl.prop !== 'break-inside') {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        } else if (decl.value === 'avoid-region') {
            return undefined;
        } else if (decl.value === 'avoid-page' && prefix === '-webkit-') {
            return undefined;
        } else {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        }
    };

    return BreakProps;
}(declaration);

Object.defineProperty(BreakProps, 'names', {
    enumerable: true,
    writable: true,
    value: ['break-inside', 'page-break-inside', 'column-break-inside', 'break-before', 'page-break-before', 'column-break-before', 'break-after', 'page-break-after', 'column-break-after']
});


var breakProps = BreakProps;

function _classCallCheck$30(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$22(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$22(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var WritingMode = function (_Declaration) {
    _inherits$22(WritingMode, _Declaration);

    function WritingMode() {
        _classCallCheck$30(this, WritingMode);

        return _possibleConstructorReturn$22(this, _Declaration.apply(this, arguments));
    }

    WritingMode.prototype.set = function set(decl, prefix) {
        if (prefix === '-ms-') {
            decl.value = WritingMode.msValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
    };

    return WritingMode;
}(declaration);

Object.defineProperty(WritingMode, 'names', {
    enumerable: true,
    writable: true,
    value: ['writing-mode']
});
Object.defineProperty(WritingMode, 'msValues', {
    enumerable: true,
    writable: true,
    value: {
        'horizontal-tb': 'lr-tb',
        'vertical-rl': 'tb-rl',
        'vertical-lr': 'tb-lr'
    }
});


var writingMode$1 = WritingMode;

function _classCallCheck$31(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$23(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$23(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var BorderImage = function (_Declaration) {
    _inherits$23(BorderImage, _Declaration);

    function BorderImage() {
        _classCallCheck$31(this, BorderImage);

        return _possibleConstructorReturn$23(this, _Declaration.apply(this, arguments));
    }

    /**
     * Remove fill parameter for prefixed declarations
     */
    BorderImage.prototype.set = function set(decl, prefix) {
        decl.value = decl.value.replace(/\s+fill(\s)/, '$1');
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return BorderImage;
}(declaration);

Object.defineProperty(BorderImage, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-image']
});


var borderImage$2 = BorderImage;

function _classCallCheck$32(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$24(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$24(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var AlignContent = function (_Declaration) {
    _inherits$24(AlignContent, _Declaration);

    function AlignContent() {
        _classCallCheck$32(this, AlignContent);

        return _possibleConstructorReturn$24(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2012 spec
     */
    AlignContent.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-line-pack';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    AlignContent.prototype.normalize = function normalize() {
        return 'align-content';
    };

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */


    AlignContent.prototype.set = function set(decl, prefix) {
        var spec = flexSpec(prefix)[0];
        if (spec === 2012) {
            decl.value = AlignContent.oldValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else if (spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return AlignContent;
}(declaration);

Object.defineProperty(AlignContent, 'names', {
    enumerable: true,
    writable: true,
    value: ['align-content', 'flex-line-pack']
});
Object.defineProperty(AlignContent, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start',
        'space-between': 'justify',
        'space-around': 'distribute'
    }
});


var alignContent = AlignContent;

function _classCallCheck$33(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$25(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$25(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var BorderRadius = function (_Declaration) {
    _inherits$25(BorderRadius, _Declaration);

    function BorderRadius() {
        _classCallCheck$33(this, BorderRadius);

        return _possibleConstructorReturn$25(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change syntax, when add Mozilla prefix
     */
    BorderRadius.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-moz-') {
            return prefix + (BorderRadius.toMozilla[prop] || prop);
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return unprefixed version of property
     */


    BorderRadius.prototype.normalize = function normalize(prop) {
        return BorderRadius.toNormal[prop] || prop;
    };

    return BorderRadius;
}(declaration);

Object.defineProperty(BorderRadius, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-radius']
});
Object.defineProperty(BorderRadius, 'toMozilla', {
    enumerable: true,
    writable: true,
    value: {}
});
Object.defineProperty(BorderRadius, 'toNormal', {
    enumerable: true,
    writable: true,
    value: {}
});
var _arr = ['top', 'bottom'];


for (var _i = 0; _i < _arr.length; _i++) {
    var ver = _arr[_i];var _arr2 = ['left', 'right'];

    for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
        var hor = _arr2[_i2];
        var normal = 'border-' + ver + '-' + hor + '-radius';
        var mozilla = 'border-radius-' + ver + hor;

        BorderRadius.names.push(normal);
        BorderRadius.names.push(mozilla);

        BorderRadius.toMozilla[normal] = mozilla;
        BorderRadius.toNormal[mozilla] = normal;
    }
}

var borderRadius$2 = BorderRadius;

function _classCallCheck$34(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$26(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$26(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var BlockLogical = function (_Declaration) {
    _inherits$26(BlockLogical, _Declaration);

    function BlockLogical() {
        _classCallCheck$34(this, BlockLogical);

        return _possibleConstructorReturn$26(this, _Declaration.apply(this, arguments));
    }

    /**
     * Use old syntax for -moz- and -webkit-
     */
    BlockLogical.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + (prop.indexOf('-start') !== -1 ? prop.replace('-block-start', '-before') : prop.replace('-block-end', '-after'));
    };

    /**
     * Return property name by spec
     */


    BlockLogical.prototype.normalize = function normalize(prop) {
        if (prop.indexOf('-before') !== -1) {
            return prop.replace('-before', '-block-start');
        } else {
            return prop.replace('-after', '-block-end');
        }
    };

    return BlockLogical;
}(declaration);

Object.defineProperty(BlockLogical, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-block-start', 'border-block-end', 'margin-block-start', 'margin-block-end', 'padding-block-start', 'padding-block-end', 'border-before', 'border-after', 'margin-before', 'margin-after', 'padding-before', 'padding-after']
});


var blockLogical = BlockLogical;

function _classCallCheck$35(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$27(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$27(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var GridTemplate = function (_Declaration) {
    _inherits$27(GridTemplate, _Declaration);

    function GridTemplate() {
        _classCallCheck$35(this, GridTemplate);

        return _possibleConstructorReturn$27(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for IE
     */
    GridTemplate.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-ms-') {
            return prefix + prop.replace('template-', '');
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Change IE property back
     */


    GridTemplate.prototype.normalize = function normalize(prop) {
        return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');
    };

    /**
     * Recursive part of changeRepeat
     */


    GridTemplate.prototype.walkRepeat = function walkRepeat(node) {
        var fixed = [];
        for (var _iterator = node.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var i = _ref;

            if (i.nodes) {
                this.walkRepeat(i);
            }
            fixed.push(i);
            if (i.type === 'function' && i.value === 'repeat') {
                var first = i.nodes.shift();
                if (first) {
                    var count = first.value;
                    i.nodes.shift();
                    i.value = '';
                    fixed.push({ type: 'word', value: '[' + count + ']' });
                }
            }
        }
        node.nodes = fixed;
    };

    /**
     * IE repeating syntax
     */


    GridTemplate.prototype.changeRepeat = function changeRepeat(value) {
        var ast = lib(value);
        this.walkRepeat(ast);
        return ast.toString();
    };

    /**
     * Change repeating syntax for IE
     */


    GridTemplate.prototype.set = function set(decl, prefix) {
        if (prefix === '-ms-' && decl.value.indexOf('repeat(') !== -1) {
            decl.value = this.changeRepeat(decl.value);
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return GridTemplate;
}(declaration);

Object.defineProperty(GridTemplate, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns']
});


var gridTemplate = GridTemplate;

function _classCallCheck$36(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$28(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$28(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var InlineLogical = function (_Declaration) {
    _inherits$28(InlineLogical, _Declaration);

    function InlineLogical() {
        _classCallCheck$36(this, InlineLogical);

        return _possibleConstructorReturn$28(this, _Declaration.apply(this, arguments));
    }

    /**
     * Use old syntax for -moz- and -webkit-
     */
    InlineLogical.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + prop.replace('-inline', '');
    };

    /**
     * Return property name by spec
     */


    InlineLogical.prototype.normalize = function normalize(prop) {
        return prop.replace(/(margin|padding|border)-(start|end)/, '$1-inline-$2');
    };

    return InlineLogical;
}(declaration);

Object.defineProperty(InlineLogical, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-inline-start', 'border-inline-end', 'margin-inline-start', 'margin-inline-end', 'padding-inline-start', 'padding-inline-end', 'border-start', 'border-end', 'margin-start', 'margin-end', 'padding-start', 'padding-end']
});


var inlineLogical = InlineLogical;

function _classCallCheck$37(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$29(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$29(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var GridRowAlign = function (_Declaration) {
    _inherits$29(GridRowAlign, _Declaration);

    function GridRowAlign() {
        _classCallCheck$37(this, GridRowAlign);

        return _possibleConstructorReturn$29(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not prefix flexbox values
     */
    GridRowAlign.prototype.check = function check(decl) {
        return decl.value.indexOf('flex-') === -1 && decl.value !== 'baseline';
    };

    /**
     * Change property name for IE
     */


    GridRowAlign.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + 'grid-row-align';
    };

    /**
     * Change IE property back
     */


    GridRowAlign.prototype.normalize = function normalize() {
        return 'align-self';
    };

    return GridRowAlign;
}(declaration);

Object.defineProperty(GridRowAlign, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-row-align']
});


var gridRowAlign = GridRowAlign;

function _classCallCheck$38(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$30(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$30(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var TransformDecl = function (_Declaration) {
    _inherits$30(TransformDecl, _Declaration);

    function TransformDecl() {
        _classCallCheck$38(this, TransformDecl);

        return _possibleConstructorReturn$30(this, _Declaration.apply(this, arguments));
    }

    /**
     * Recursively check all parents for @keyframes
     */
    TransformDecl.prototype.keyframeParents = function keyframeParents(decl) {
        var parent = decl.parent;

        while (parent) {
            if (parent.type === 'atrule' && parent.name === 'keyframes') {
                return true;
            }
            var _parent = parent;
            parent = _parent.parent;
        }
        return false;
    };

    /**
     * Is transform caontain 3D commands
     */


    TransformDecl.prototype.contain3d = function contain3d(decl) {
        if (decl.prop === 'transform-origin') {
            return false;
        }

        for (var _iterator = TransformDecl.functions3d, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var func = _ref;

            if (decl.value.indexOf(func + '(') !== -1) {
                return true;
            }
        }

        return false;
    };

    /**
     * Replace rotateZ to rotate for IE 9
     */


    TransformDecl.prototype.set = function set(decl, prefix) {
        decl = _Declaration.prototype.set.call(this, decl, prefix);
        if (prefix === '-ms-') {
            decl.value = decl.value.replace(/rotateZ/gi, 'rotate');
        }
        return decl;
    };

    /**
     * Don't add prefix for IE in keyframes
     */


    TransformDecl.prototype.insert = function insert(decl, prefix, prefixes) {
        if (prefix === '-ms-') {
            if (!this.contain3d(decl) && !this.keyframeParents(decl)) {
                return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
            }
        } else if (prefix === '-o-') {
            if (!this.contain3d(decl)) {
                return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
            }
        } else {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        }
        return undefined;
    };

    return TransformDecl;
}(declaration);

Object.defineProperty(TransformDecl, 'names', {
    enumerable: true,
    writable: true,
    value: ['transform', 'transform-origin']
});
Object.defineProperty(TransformDecl, 'functions3d', {
    enumerable: true,
    writable: true,
    value: ['matrix3d', 'translate3d', 'translateZ', 'scale3d', 'scaleZ', 'rotate3d', 'rotateX', 'rotateY', 'perspective']
});


var transformDecl = TransformDecl;

function _classCallCheck$39(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$31(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$31(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var FlexDirection = function (_Declaration) {
    _inherits$31(FlexDirection, _Declaration);

    function FlexDirection() {
        _classCallCheck$39(this, FlexDirection);

        return _possibleConstructorReturn$31(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    FlexDirection.prototype.normalize = function normalize() {
        return 'flex-direction';
    };

    /**
     * Use two properties for 2009 spec
     */


    FlexDirection.prototype.insert = function insert(decl, prefix, prefixes) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec !== 2009) {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        } else {
            var already = decl.parent.some(function (i) {
                return i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction';
            });
            if (already) {
                return undefined;
            }

            var v = decl.value;
            var orient = void 0,
                dir = void 0;
            if (v === 'inherit' || v === 'initial' || v === 'unset') {
                orient = v;
                dir = v;
            } else {
                orient = v.indexOf('row') !== -1 ? 'horizontal' : 'vertical';
                dir = v.indexOf('reverse') !== -1 ? 'reverse' : 'normal';
            }

            var cloned = this.clone(decl);
            cloned.prop = prefix + 'box-orient';
            cloned.value = orient;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            decl.parent.insertBefore(decl, cloned);

            cloned = this.clone(decl);
            cloned.prop = prefix + 'box-direction';
            cloned.value = dir;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            return decl.parent.insertBefore(decl, cloned);
        }
    };

    /**
     * Clean two properties for 2009 spec
     */


    FlexDirection.prototype.old = function old(prop, prefix) {
        var spec = void 0;

        var _flexSpec2 = flexSpec(prefix);

        spec = _flexSpec2[0];
        prefix = _flexSpec2[1];

        if (spec === 2009) {
            return [prefix + 'box-orient', prefix + 'box-direction'];
        } else {
            return _Declaration.prototype.old.call(this, prop, prefix);
        }
    };

    return FlexDirection;
}(declaration);

Object.defineProperty(FlexDirection, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-direction', 'box-direction', 'box-orient']
});


var flexDirection = FlexDirection;

function _classCallCheck$40(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$32(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$32(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var ImageRendering = function (_Declaration) {
    _inherits$32(ImageRendering, _Declaration);

    function ImageRendering() {
        _classCallCheck$40(this, ImageRendering);

        return _possibleConstructorReturn$32(this, _Declaration.apply(this, arguments));
    }

    /**
     * Add hack only for crisp-edges
     */
    ImageRendering.prototype.check = function check(decl) {
        return decl.value === 'pixelated';
    };

    /**
     * Change property name for IE
     */


    ImageRendering.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-ms-') {
            return '-ms-interpolation-mode';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Change property and value for IE
     */


    ImageRendering.prototype.set = function set(decl, prefix) {
        if (prefix === '-ms-') {
            decl.prop = '-ms-interpolation-mode';
            decl.value = 'nearest-neighbor';
            return decl;
        } else {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
    };

    /**
     * Return property name by spec
     */


    ImageRendering.prototype.normalize = function normalize() {
        return 'image-rendering';
    };

    /**
     * Warn on old value
     */


    ImageRendering.prototype.process = function process(node, result) {
        return _Declaration.prototype.process.call(this, node, result);
    };

    return ImageRendering;
}(declaration);

Object.defineProperty(ImageRendering, 'names', {
    enumerable: true,
    writable: true,
    value: ['image-rendering', 'interpolation-mode']
});


var imageRendering = ImageRendering;

function _classCallCheck$41(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$33(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$33(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var BASIC = ['none', 'underline', 'overline', 'line-through', 'blink', 'inherit', 'initial', 'unset'];

var TextDecoration = function (_Declaration) {
    _inherits$33(TextDecoration, _Declaration);

    function TextDecoration() {
        _classCallCheck$41(this, TextDecoration);

        return _possibleConstructorReturn$33(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefixes for basic values.
     */
    TextDecoration.prototype.check = function check(decl) {
        return decl.value.split(/\s+/).some(function (i) {
            return BASIC.indexOf(i) === -1;
        });
    };

    return TextDecoration;
}(declaration);

Object.defineProperty(TextDecoration, 'names', {
    enumerable: true,
    writable: true,
    value: ['text-decoration']
});


var textDecoration$2 = TextDecoration;

function _classCallCheck$42(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$34(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$34(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var JustifyContent = function (_Declaration) {
    _inherits$34(JustifyContent, _Declaration);

    function JustifyContent() {
        _classCallCheck$42(this, JustifyContent);

        return _possibleConstructorReturn$34(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    JustifyContent.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-pack';
        } else if (spec === 2012) {
            return prefix + 'flex-pack';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    JustifyContent.prototype.normalize = function normalize() {
        return 'justify-content';
    };

    /**
     * Change value for 2009 and 2012 specs
     */


    JustifyContent.prototype.set = function set(decl, prefix) {
        var spec = flexSpec(prefix)[0];
        if (spec === 2009 || spec === 2012) {
            var value = JustifyContent.oldValues[decl.value] || decl.value;
            decl.value = value;
            if (spec !== 2009 || value !== 'distribute') {
                return _Declaration.prototype.set.call(this, decl, prefix);
            }
        } else if (spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return JustifyContent;
}(declaration);

Object.defineProperty(JustifyContent, 'names', {
    enumerable: true,
    writable: true,
    value: ['justify-content', 'flex-pack', 'box-pack']
});
Object.defineProperty(JustifyContent, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start',
        'space-between': 'justify',
        'space-around': 'distribute'
    }
});


var justifyContent = JustifyContent;

function _classCallCheck$43(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$35(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$35(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var BackgroundSize = function (_Declaration) {
    _inherits$35(BackgroundSize, _Declaration);

    function BackgroundSize() {
        _classCallCheck$43(this, BackgroundSize);

        return _possibleConstructorReturn$35(this, _Declaration.apply(this, arguments));
    }

    /**
     * Duplication parameter for -webkit- browsers
     */
    BackgroundSize.prototype.set = function set(decl, prefix) {
        var value = decl.value.toLowerCase();
        if (prefix === '-webkit-' && value.indexOf(' ') === -1 && value !== 'contain' && value !== 'cover') {
            decl.value = decl.value + ' ' + decl.value;
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return BackgroundSize;
}(declaration);

Object.defineProperty(BackgroundSize, 'names', {
    enumerable: true,
    writable: true,
    value: ['background-size']
});


var backgroundSize = BackgroundSize;

function _classCallCheck$44(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$36(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$36(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var GridColumnAlign = function (_Declaration) {
    _inherits$36(GridColumnAlign, _Declaration);

    function GridColumnAlign() {
        _classCallCheck$44(this, GridColumnAlign);

        return _possibleConstructorReturn$36(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not prefix flexbox values
     */
    GridColumnAlign.prototype.check = function check(decl) {
        return decl.value.indexOf('flex-') === -1 && decl.value !== 'baseline';
    };

    /**
     * Change property name for IE
     */


    GridColumnAlign.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + 'grid-column-align';
    };

    /**
     * Change IE property back
     */


    GridColumnAlign.prototype.normalize = function normalize() {
        return 'justify-self';
    };

    return GridColumnAlign;
}(declaration);

Object.defineProperty(GridColumnAlign, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-column-align']
});


var gridColumnAlign = GridColumnAlign;

function _classCallCheck$45(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$37(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$37(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var TextEmphasisPosition = function (_Declaration) {
    _inherits$37(TextEmphasisPosition, _Declaration);

    function TextEmphasisPosition() {
        _classCallCheck$45(this, TextEmphasisPosition);

        return _possibleConstructorReturn$37(this, _Declaration.apply(this, arguments));
    }

    TextEmphasisPosition.prototype.set = function set(decl, prefix) {
        if (prefix === '-webkit-') {
            decl.value = decl.value.replace(/\s*(right|left)\s*/i, '');
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
    };

    return TextEmphasisPosition;
}(declaration);

Object.defineProperty(TextEmphasisPosition, 'names', {
    enumerable: true,
    writable: true,
    value: ['text-emphasis-position']
});


var textEmphasisPosition = TextEmphasisPosition;

var _normalizeRange_0_1_2_normalizeRange = {
  wrap: wrapRange,
  limit: limitRange,
  validate: validateRange,
  test: testRange,
  curry: curry,
  name: name
};

function wrapRange(min, max, value) {
  var maxLessMin = max - min;
  return ((value - min) % maxLessMin + maxLessMin) % maxLessMin + min;
}

function limitRange(min, max, value) {
  return Math.max(min, Math.min(max, value));
}

function validateRange(min, max, value, minExclusive, maxExclusive) {
  if (!testRange(min, max, value, minExclusive, maxExclusive)) {
    throw new Error(value + ' is outside of range [' + min + ',' + max + ')');
  }
  return value;
}

function testRange(min, max, value, minExclusive, maxExclusive) {
  return !(
       value < min ||
       value > max ||
       (maxExclusive && (value === max)) ||
       (minExclusive && (value === min))
  );
}

function name(min, max, minExcl, maxExcl) {
  return (minExcl ? '(' : '[') + min + ',' + max + (maxExcl ? ')' : ']');
}

function curry(min, max, minExclusive, maxExclusive) {
  var boundNameFn = name.bind(null, min, max, minExclusive, maxExclusive);
  return {
    wrap: wrapRange.bind(null, min, max),
    limit: limitRange.bind(null, min, max),
    validate: function(value) {
      return validateRange(min, max, value, minExclusive, maxExclusive);
    },
    test: function(value) {
      return testRange(min, max, value, minExclusive, maxExclusive);
    },
    toString: boundNameFn,
    name: boundNameFn
  };
}

function _classCallCheck$46(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$38(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$38(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








var isDirection = /top|left|right|bottom/gi;

var Gradient = function (_Value) {
    _inherits$38(Gradient, _Value);

    function Gradient() {
        var _temp, _this, _ret;

        _classCallCheck$46(this, Gradient);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$38(this, _Value.call.apply(_Value, [this].concat(args))), _this), Object.defineProperty(_this, 'directions', {
            enumerable: true,
            writable: true,
            value: {
                top: 'bottom',
                left: 'right',
                bottom: 'top',
                right: 'left'
            }
        }), Object.defineProperty(_this, 'oldDirections', {
            enumerable: true,
            writable: true,
            value: {
                'top': 'left bottom, left top',
                'left': 'right top, left top',
                'bottom': 'left top, left bottom',
                'right': 'left top, right top',

                'top right': 'left bottom, right top',
                'top left': 'right bottom, left top',
                'right top': 'left bottom, right top',
                'right bottom': 'left top, right bottom',
                'bottom right': 'left top, right bottom',
                'bottom left': 'right top, left bottom',
                'left top': 'right bottom, left top',
                'left bottom': 'right top, left bottom'
            }
        }), _temp), _possibleConstructorReturn$38(_this, _ret);
    }

    // Direction to replace


    // Direction to replace


    /**
     * Change degrees for webkit prefix
     */
    Gradient.prototype.replace = function replace(string, prefix) {
        var ast = lib(string);
        for (var _iterator = ast.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var node = _ref;

            if (node.type === 'function' && node.value === this.name) {
                node.nodes = this.newDirection(node.nodes);
                node.nodes = this.normalize(node.nodes);
                if (prefix === '-webkit- old') {
                    var changes = this.oldWebkit(node);
                    if (!changes) {
                        return undefined;
                    }
                } else {
                    node.nodes = this.convertDirection(node.nodes);
                    node.value = prefix + node.value;
                }
            }
        }
        return ast.toString();
    };

    /**
     * Replace first token
     */


    Gradient.prototype.replaceFirst = function replaceFirst(params) {
        for (var _len2 = arguments.length, words = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            words[_key2 - 1] = arguments[_key2];
        }

        var prefix = words.map(function (i) {
            if (i === ' ') {
                return { type: 'space', value: i };
            } else {
                return { type: 'word', value: i };
            }
        });
        return prefix.concat(params.slice(1));
    };

    /**
     * Convert angle unit to deg
     */


    Gradient.prototype.normalizeUnit = function normalizeUnit(str, full) {
        var num = parseFloat(str);
        var deg = num / full * 360;
        return deg + 'deg';
    };

    /**
     * Normalize angle
     */


    Gradient.prototype.normalize = function normalize(nodes) {
        if (!nodes[0]) {
            return nodes;
        }

        if (/-?\d+(.\d+)?grad/.test(nodes[0].value)) {
            nodes[0].value = this.normalizeUnit(nodes[0].value, 400);
        } else if (/-?\d+(.\d+)?rad/.test(nodes[0].value)) {
            nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);
        } else if (/-?\d+(.\d+)?turn/.test(nodes[0].value)) {
            nodes[0].value = this.normalizeUnit(nodes[0].value, 1);
        } else if (nodes[0].value.indexOf('deg') !== -1) {
            var num = parseFloat(nodes[0].value);
            num = _normalizeRange_0_1_2_normalizeRange.wrap(0, 360, num);
            nodes[0].value = num + 'deg';
        }

        if (nodes[0].value === '0deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'top');
        } else if (nodes[0].value === '90deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'right');
        } else if (nodes[0].value === '180deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom');
        } else if (nodes[0].value === '270deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'left');
        }

        return nodes;
    };

    /**
     * Replace old direction to new
     */


    Gradient.prototype.newDirection = function newDirection(params) {
        if (params[0].value === 'to') {
            return params;
        }
        isDirection.lastIndex = 0; // reset search index of global regexp
        if (!isDirection.test(params[0].value)) {
            return params;
        }

        params.unshift({
            type: 'word',
            value: 'to'
        }, {
            type: 'space',
            value: ' '
        });

        for (var i = 2; i < params.length; i++) {
            if (params[i].type === 'div') {
                break;
            }
            if (params[i].type === 'word') {
                params[i].value = this.revertDirection(params[i].value);
            }
        }

        return params;
    };

    /**
     * Change new direction to old
     */


    Gradient.prototype.convertDirection = function convertDirection(params) {
        if (params.length > 0) {
            if (params[0].value === 'to') {
                this.fixDirection(params);
            } else if (params[0].value.indexOf('deg') !== -1) {
                this.fixAngle(params);
            } else if (params[2].value === 'at') {
                this.fixRadial(params);
            }
        }
        return params;
    };

    /**
     * Replace `to top left` to `bottom right`
     */


    Gradient.prototype.fixDirection = function fixDirection(params) {
        params.splice(0, 2);

        for (var _iterator2 = params, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var param = _ref2;

            if (param.type === 'div') {
                break;
            }
            if (param.type === 'word') {
                param.value = this.revertDirection(param.value);
            }
        }
    };

    /**
     * Add 90 degrees
     */


    Gradient.prototype.fixAngle = function fixAngle(params) {
        var first = params[0].value;
        first = parseFloat(first);
        first = Math.abs(450 - first) % 360;
        first = this.roundFloat(first, 3);
        params[0].value = first + 'deg';
    };

    /**
     * Fix radial direction syntax
     */


    Gradient.prototype.fixRadial = function fixRadial(params) {
        var first = params[0];
        var second = [];
        var i = void 0;

        var div = void 0;
        for (i = 4; i < params.length; i++) {
            if (params[i].type === 'div') {
                div = params[i];
                break;
            } else {
                second.push(params[i]);
            }
        }

        params.splice.apply(params, [0, i].concat(second, [div, first]));
    };

    Gradient.prototype.revertDirection = function revertDirection(word) {
        return this.directions[word.toLowerCase()] || word;
    };

    /**
     * Round float and save digits under dot
     */


    Gradient.prototype.roundFloat = function roundFloat(float, digits) {
        return parseFloat(float.toFixed(digits));
    };

    /**
     * Convert to old webkit syntax
     */


    Gradient.prototype.oldWebkit = function oldWebkit(node) {
        var nodes = node.nodes;

        var string = lib.stringify(node.nodes);

        if (this.name !== 'linear-gradient') {
            return false;
        }
        if (nodes[0] && nodes[0].value.indexOf('deg') !== -1) {
            return false;
        }
        if (string.indexOf('px') !== -1) {
            return false;
        }
        if (string.indexOf('-corner') !== -1) {
            return false;
        }
        if (string.indexOf('-side') !== -1) {
            return false;
        }

        var params = [[]];
        for (var _iterator3 = nodes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
            } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
            }

            var i = _ref3;

            params[params.length - 1].push(i);
            if (i.type === 'div' && i.value === ',') {
                params.push([]);
            }
        }

        this.oldDirection(params);
        this.colorStops(params);

        node.nodes = [];
        for (var _iterator4 = params, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
            }

            var param = _ref4;

            node.nodes = node.nodes.concat(param);
        }

        node.nodes.unshift({ type: 'word', value: 'linear' }, this.cloneDiv(node.nodes));
        node.value = '-webkit-gradient';

        return true;
    };

    /**
     * Change direction syntax to old webkit
     */


    Gradient.prototype.oldDirection = function oldDirection(params) {
        var div = this.cloneDiv(params[0]);

        if (params[0][0].value !== 'to') {
            return params.unshift([{ type: 'word', value: this.oldDirections.bottom }, div]);
        } else {
            var _words = [];
            for (var _iterator5 = params[0].slice(2), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                var _ref5;

                if (_isArray5) {
                    if (_i5 >= _iterator5.length) break;
                    _ref5 = _iterator5[_i5++];
                } else {
                    _i5 = _iterator5.next();
                    if (_i5.done) break;
                    _ref5 = _i5.value;
                }

                var node = _ref5;

                if (node.type === 'word') {
                    _words.push(node.value.toLowerCase());
                }
            }

            _words = _words.join(' ');
            var old = this.oldDirections[_words] || _words;

            params[0] = [{ type: 'word', value: old }, div];
            return params[0];
        }
    };

    /**
     * Get div token from exists parameters
     */


    Gradient.prototype.cloneDiv = function cloneDiv(params) {
        for (var _iterator6 = params, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
            var _ref6;

            if (_isArray6) {
                if (_i6 >= _iterator6.length) break;
                _ref6 = _iterator6[_i6++];
            } else {
                _i6 = _iterator6.next();
                if (_i6.done) break;
                _ref6 = _i6.value;
            }

            var i = _ref6;

            if (i.type === 'div' && i.value === ',') {
                return i;
            }
        }
        return { type: 'div', value: ',', after: ' ' };
    };

    /**
     * Change colors syntax to old webkit
     */


    Gradient.prototype.colorStops = function colorStops(params) {
        var result = [];
        for (var i = 0; i < params.length; i++) {
            var pos = void 0;
            var param = params[i];
            var item = void 0;
            if (i === 0) {
                continue;
            }

            var color = lib.stringify(param[0]);
            if (param[1] && param[1].type === 'word') {
                pos = param[1].value;
            } else if (param[2] && param[2].type === 'word') {
                pos = param[2].value;
            }

            var stop = void 0;
            if (i === 1 && (!pos || pos === '0%')) {
                stop = 'from(' + color + ')';
            } else if (i === params.length - 1 && (!pos || pos === '100%')) {
                stop = 'to(' + color + ')';
            } else if (pos) {
                stop = 'color-stop(' + pos + ', ' + color + ')';
            } else {
                stop = 'color-stop(' + color + ')';
            }

            var div = param[param.length - 1];
            params[i] = [{ type: 'word', value: stop }];
            if (div.type === 'div' && div.value === ',') {
                item = params[i].push(div);
            }
            result.push(item);
        }
        return result;
    };

    /**
     * Remove old WebKit gradient too
     */


    Gradient.prototype.old = function old(prefix) {
        if (prefix === '-webkit-') {
            var type = this.name === 'linear-gradient' ? 'linear' : 'radial';
            var string = '-gradient';
            var regexp = utils.regexp('-webkit-(' + type + '-gradient|gradient\\(\\s*' + type + ')', false);

            return new oldValue(this.name, prefix + this.name, string, regexp);
        } else {
            return _Value.prototype.old.call(this, prefix);
        }
    };

    /**
     * Do not add non-webkit prefixes for list-style and object
     */


    Gradient.prototype.add = function add(decl, prefix) {
        var p = decl.prop;
        if (p.indexOf('mask') !== -1) {
            if (prefix === '-webkit-' || prefix === '-webkit- old') {
                return _Value.prototype.add.call(this, decl, prefix);
            }
        } else if (p === 'list-style' || p === 'list-style-image' || p === 'content') {
            if (prefix === '-webkit-' || prefix === '-webkit- old') {
                return _Value.prototype.add.call(this, decl, prefix);
            }
        } else {
            return _Value.prototype.add.call(this, decl, prefix);
        }
        return undefined;
    };

    return Gradient;
}(value);

Object.defineProperty(Gradient, 'names', {
    enumerable: true,
    writable: true,
    value: ['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient']
});


var gradient = Gradient;

function _classCallCheck$47(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$39(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$39(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




function _regexp(name) {
    return new RegExp('(^|[\\s,(])(' + name + '($|[\\s),]))', 'gi');
}

var Intrinsic = function (_Value) {
    _inherits$39(Intrinsic, _Value);

    function Intrinsic() {
        _classCallCheck$47(this, Intrinsic);

        return _possibleConstructorReturn$39(this, _Value.apply(this, arguments));
    }

    Intrinsic.prototype.regexp = function regexp() {
        if (!this.regexpCache) this.regexpCache = _regexp(this.name);
        return this.regexpCache;
    };

    Intrinsic.prototype.isStretch = function isStretch() {
        return this.name === 'stretch' || this.name === 'fill' || this.name === 'fill-available';
    };

    Intrinsic.prototype.replace = function replace(string, prefix) {
        if (prefix === '-moz-' && this.isStretch()) {
            return string.replace(this.regexp(), '$1-moz-available$3');
        } else if (prefix === '-webkit-' && this.isStretch()) {
            return string.replace(this.regexp(), '$1-webkit-fill-available$3');
        } else {
            return _Value.prototype.replace.call(this, string, prefix);
        }
    };

    Intrinsic.prototype.old = function old(prefix) {
        var prefixed = prefix + this.name;
        if (this.isStretch()) {
            if (prefix === '-moz-') {
                prefixed = '-moz-available';
            } else if (prefix === '-webkit-') {
                prefixed = '-webkit-fill-available';
            }
        }
        return new oldValue(this.name, prefixed, prefixed, _regexp(prefixed));
    };

    Intrinsic.prototype.add = function add(decl, prefix) {
        if (decl.prop.indexOf('grid') !== -1 && prefix !== '-webkit-') {
            return undefined;
        }
        return _Value.prototype.add.call(this, decl, prefix);
    };

    return Intrinsic;
}(value);

Object.defineProperty(Intrinsic, 'names', {
    enumerable: true,
    writable: true,
    value: ['max-content', 'min-content', 'fit-content', 'fill', 'fill-available', 'stretch']
});


var intrinsic = Intrinsic;

function _classCallCheck$48(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$40(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$40(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var Pixelated = function (_Value) {
    _inherits$40(Pixelated, _Value);

    function Pixelated() {
        _classCallCheck$48(this, Pixelated);

        return _possibleConstructorReturn$40(this, _Value.apply(this, arguments));
    }

    /**
     * Use non-standard name for WebKit and Firefox
     */
    Pixelated.prototype.replace = function replace(string, prefix) {
        if (prefix === '-webkit-') {
            return string.replace(this.regexp(), '$1-webkit-optimize-contrast');
        } else if (prefix === '-moz-') {
            return string.replace(this.regexp(), '$1-moz-crisp-edges');
        } else {
            return _Value.prototype.replace.call(this, string, prefix);
        }
    };

    /**
     * Different name for WebKit and Firefox
     */


    Pixelated.prototype.old = function old(prefix) {
        if (prefix === '-webkit-') {
            return new oldValue(this.name, '-webkit-optimize-contrast');
        } else if (prefix === '-moz-') {
            return new oldValue(this.name, '-moz-crisp-edges');
        } else {
            return _Value.prototype.old.call(this, prefix);
        }
    };

    return Pixelated;
}(value);

Object.defineProperty(Pixelated, 'names', {
    enumerable: true,
    writable: true,
    value: ['pixelated']
});


var pixelated = Pixelated;

function _classCallCheck$49(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$41(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$41(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var ImageSet = function (_Value) {
    _inherits$41(ImageSet, _Value);

    function ImageSet() {
        _classCallCheck$49(this, ImageSet);

        return _possibleConstructorReturn$41(this, _Value.apply(this, arguments));
    }

    /**
     * Use non-standard name for WebKit and Firefox
     */
    ImageSet.prototype.replace = function replace(string, prefix) {
        if (prefix === '-webkit-') {
            return _Value.prototype.replace.call(this, string, prefix).replace(/("[^"]+"|'[^']+')(\s+\d+\w)/gi, 'url($1)$2');
        } else {
            return _Value.prototype.replace.call(this, string, prefix);
        }
    };

    return ImageSet;
}(value);

Object.defineProperty(ImageSet, 'names', {
    enumerable: true,
    writable: true,
    value: ['image-set']
});


var imageSet = ImageSet;

function _classCallCheck$50(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$42(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$42(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var CrossFade = function (_Value) {
    _inherits$42(CrossFade, _Value);

    function CrossFade() {
        _classCallCheck$50(this, CrossFade);

        return _possibleConstructorReturn$42(this, _Value.apply(this, arguments));
    }

    CrossFade.prototype.replace = function replace(string, prefix) {
        var _this2 = this;

        return list_1.space(string).map(function (value$$2) {
            if (value$$2.slice(0, +_this2.name.length + 1) !== _this2.name + '(') {
                return value$$2;
            }

            var close = value$$2.lastIndexOf(')');
            var after = value$$2.slice(close + 1);
            var args = value$$2.slice(_this2.name.length + 1, close);

            if (prefix === '-webkit-') {
                var match = args.match(/\d*.?\d+%?/);
                if (match) {
                    args = args.slice(match[0].length).trim();
                    args += ', ' + match[0];
                } else {
                    args += ', 0.5';
                }
            }
            return prefix + _this2.name + '(' + args + ')' + after;
        }).join(' ');
    };

    return CrossFade;
}(value);

Object.defineProperty(CrossFade, 'names', {
    enumerable: true,
    writable: true,
    value: ['cross-fade']
});


var crossFade = CrossFade;

function _classCallCheck$51(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$43(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$43(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }




var FlexValues = function (_Value) {
    _inherits$43(FlexValues, _Value);

    function FlexValues() {
        _classCallCheck$51(this, FlexValues);

        return _possibleConstructorReturn$43(this, _Value.apply(this, arguments));
    }

    /**
     * Return prefixed property name
     */
    FlexValues.prototype.prefixed = function prefixed(prefix) {
        return this.all.prefixed(this.name, prefix);
    };

    /**
     * Change property name to prefixed property name
     */


    FlexValues.prototype.replace = function replace(string, prefix) {
        return string.replace(this.regexp(), '$1' + this.prefixed(prefix) + '$3');
    };

    /**
     * Return function to fast prefixed property name
     */


    FlexValues.prototype.old = function old(prefix) {
        return new oldValue(this.name, this.prefixed(prefix));
    };

    return FlexValues;
}(value);

Object.defineProperty(FlexValues, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex', 'flex-grow', 'flex-shrink', 'flex-basis']
});


var flexValues = FlexValues;

function _classCallCheck$52(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$44(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$44(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var DisplayFlex = function (_Value) {
    _inherits$44(DisplayFlex, _Value);

    function DisplayFlex(name, prefixes) {
        _classCallCheck$52(this, DisplayFlex);

        var _this = _possibleConstructorReturn$44(this, _Value.call(this, name, prefixes));

        if (name === 'display-flex') {
            _this.name = 'flex';
        }
        return _this;
    }

    /**
     * Faster check for flex value
     */


    DisplayFlex.prototype.check = function check(decl) {
        return decl.prop === 'display' && decl.value === this.name;
    };

    /**
     * Return value by spec
     */


    DisplayFlex.prototype.prefixed = function prefixed(prefix) {
        var spec = void 0,
            value$$2 = void 0;

        var _flexSpec = flexSpec(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];


        if (spec === 2009) {
            if (this.name === 'flex') {
                value$$2 = 'box';
            } else {
                value$$2 = 'inline-box';
            }
        } else if (spec === 2012) {
            if (this.name === 'flex') {
                value$$2 = 'flexbox';
            } else {
                value$$2 = 'inline-flexbox';
            }
        } else if (spec === 'final') {
            value$$2 = this.name;
        }

        return prefix + value$$2;
    };

    /**
     * Add prefix to value depend on flebox spec version
     */


    DisplayFlex.prototype.replace = function replace(string, prefix) {
        return this.prefixed(prefix);
    };

    /**
     * Change value for old specs
     */


    DisplayFlex.prototype.old = function old(prefix) {
        var prefixed = this.prefixed(prefix);
        if (prefixed) {
            return new oldValue(this.name, prefixed);
        }
        return undefined;
    };

    return DisplayFlex;
}(value);

Object.defineProperty(DisplayFlex, 'names', {
    enumerable: true,
    writable: true,
    value: ['display-flex', 'inline-flex']
});


var displayFlex = DisplayFlex;

function _classCallCheck$53(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$45(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$45(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }



var DisplayGrid = function (_Value) {
    _inherits$45(DisplayGrid, _Value);

    function DisplayGrid(name, prefixes) {
        _classCallCheck$53(this, DisplayGrid);

        var _this = _possibleConstructorReturn$45(this, _Value.call(this, name, prefixes));

        if (name === 'display-grid') {
            _this.name = 'grid';
        }
        return _this;
    }

    /**
     * Faster check for flex value
     */


    DisplayGrid.prototype.check = function check(decl) {
        return decl.prop === 'display' && decl.value === this.name;
    };

    return DisplayGrid;
}(value);

Object.defineProperty(DisplayGrid, 'names', {
    enumerable: true,
    writable: true,
    value: ['display-grid', 'inline-grid']
});


var displayGrid = DisplayGrid;

function _classCallCheck$54(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$46(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$46(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





var OldFilterValue = function (_OldValue) {
    _inherits$46(OldFilterValue, _OldValue);

    function OldFilterValue() {
        _classCallCheck$54(this, OldFilterValue);

        return _possibleConstructorReturn$46(this, _OldValue.apply(this, arguments));
    }

    /**
     * Clean -webkit-filter from properties list
     */
    OldFilterValue.prototype.clean = function clean(decl) {
        var _this2 = this;

        decl.value = utils.editList(decl.value, function (props) {
            if (props.every(function (i) {
                return i.indexOf(_this2.unprefixed) !== 0;
            })) {
                return props;
            }
            return props.filter(function (i) {
                return i.indexOf(_this2.prefixed) === -1;
            });
        });
    };

    return OldFilterValue;
}(oldValue);

var FilterValue = function (_Value) {
    _inherits$46(FilterValue, _Value);

    function FilterValue(name, prefixes) {
        _classCallCheck$54(this, FilterValue);

        var _this3 = _possibleConstructorReturn$46(this, _Value.call(this, name, prefixes));

        if (name === 'filter-function') {
            _this3.name = 'filter';
        }
        return _this3;
    }

    /**
     * Use prefixed and unprefixed filter for WebKit
     */


    FilterValue.prototype.replace = function replace(value$$2, prefix) {
        if (prefix === '-webkit-' && value$$2.indexOf('filter(') === -1) {
            if (value$$2.indexOf('-webkit-filter') === -1) {
                return _Value.prototype.replace.call(this, value$$2, prefix) + ', ' + value$$2;
            } else {
                return value$$2;
            }
        } else {
            return _Value.prototype.replace.call(this, value$$2, prefix);
        }
    };

    /**
     * Clean -webkit-filter
     */


    FilterValue.prototype.old = function old(prefix) {
        return new OldFilterValue(this.name, prefix + this.name);
    };

    return FilterValue;
}(value);

Object.defineProperty(FilterValue, 'names', {
    enumerable: true,
    writable: true,
    value: ['filter', 'filter-function']
});


var filterValue = FilterValue;

function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }














selector.hack(fullscreen$3);
selector.hack(placeholder);

declaration.hack(flex);
declaration.hack(order);
declaration.hack(filter);
declaration.hack(gridEnd);
declaration.hack(flexFlow);
declaration.hack(flexGrow);
declaration.hack(flexWrap);
declaration.hack(gridStart);
declaration.hack(alignSelf);
declaration.hack(appearance$1);
declaration.hack(flexBasis);
declaration.hack(maskBorder);
declaration.hack(alignItems);
declaration.hack(flexShrink);
declaration.hack(breakProps);
declaration.hack(writingMode$1);
declaration.hack(borderImage$2);
declaration.hack(alignContent);
declaration.hack(borderRadius$2);
declaration.hack(blockLogical);
declaration.hack(gridTemplate);
declaration.hack(inlineLogical);
declaration.hack(gridRowAlign);
declaration.hack(transformDecl);
declaration.hack(flexDirection);
declaration.hack(imageRendering);
declaration.hack(textDecoration$2);
declaration.hack(justifyContent);
declaration.hack(backgroundSize);
declaration.hack(gridColumnAlign);
declaration.hack(textEmphasisPosition);

value.hack(gradient);
value.hack(intrinsic);
value.hack(pixelated);
value.hack(imageSet);
value.hack(crossFade);
value.hack(flexValues);
value.hack(displayFlex);
value.hack(displayGrid);
value.hack(filterValue);

var declsCache = {};

var Prefixes = function () {
    function Prefixes(data, browsers) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        _classCallCheck$1(this, Prefixes);

        this.data = data;
        this.browsers = browsers;
        this.options = options;

        var _preprocess = this.preprocess(this.select(this.data));

        this.add = _preprocess[0];
        this.remove = _preprocess[1];

        this.transition = new transition(this);
        this.processor = new processor(this);
    }

    /**
     * Return clone instance to remove all prefixes
     */


    Prefixes.prototype.cleaner = function cleaner() {
        if (this.cleanerCache) {
            return this.cleanerCache;
        }

        if (this.browsers.selected.length) {
            var empty = new browsers$3(this.browsers.data, []);
            this.cleanerCache = new Prefixes(this.data, empty, this.options);
        } else {
            return this;
        }

        return this.cleanerCache;
    };

    /**
     * Select prefixes from data, which is necessary for selected browsers
     */


    Prefixes.prototype.select = function select(list) {
        var _this = this;

        var selected = { add: {}, remove: {} };

        var _loop = function _loop(name) {
            var data = list[name];
            var add = data.browsers.map(function (i) {
                var params = i.split(' ');
                return {
                    browser: params[0] + ' ' + params[1],
                    note: params[2]
                };
            });

            var notes = add.filter(function (i) {
                return i.note;
            }).map(function (i) {
                return _this.browsers.prefix(i.browser) + ' ' + i.note;
            });
            notes = utils.uniq(notes);

            add = add.filter(function (i) {
                return _this.browsers.isSelected(i.browser);
            }).map(function (i) {
                var prefix = _this.browsers.prefix(i.browser);
                if (i.note) {
                    return prefix + ' ' + i.note;
                } else {
                    return prefix;
                }
            });
            add = _this.sort(utils.uniq(add));

            if (_this.options.flexbox === 'no-2009') {
                add = add.filter(function (i) {
                    return i.indexOf('2009') === -1;
                });
            }

            var all = data.browsers.map(function (i) {
                return _this.browsers.prefix(i);
            });
            if (data.mistakes) {
                all = all.concat(data.mistakes);
            }
            all = all.concat(notes);
            all = utils.uniq(all);

            if (add.length) {
                selected.add[name] = add;
                if (add.length < all.length) {
                    selected.remove[name] = all.filter(function (i) {
                        return add.indexOf(i) === -1;
                    });
                }
            } else {
                selected.remove[name] = all;
            }
        };

        for (var name in list) {
            _loop(name);
        }

        return selected;
    };

    /**
     * Sort vendor prefixes
     */


    Prefixes.prototype.sort = function sort(prefixes) {
        return prefixes.sort(function (a, b) {
            var aLength = utils.removeNote(a).length;
            var bLength = utils.removeNote(b).length;

            if (aLength === bLength) {
                return b.length - a.length;
            } else {
                return bLength - aLength;
            }
        });
    };

    /**
     * Cache prefixes data to fast CSS processing
     */


    Prefixes.prototype.preprocess = function preprocess(selected) {
        var add = {
            'selectors': [],
            '@supports': new supports(Prefixes, this)
        };
        for (var name in selected.add) {
            var prefixes = selected.add[name];
            if (name === '@keyframes' || name === '@viewport') {
                add[name] = new atRule(name, prefixes, this);
            } else if (name === '@resolution') {
                add[name] = new resolution(name, prefixes, this);
            } else if (this.data[name].selector) {
                add.selectors.push(selector.load(name, prefixes, this));
            } else {
                var props = this.data[name].props;

                if (props) {
                    var value$$1 = value.load(name, prefixes, this);
                    for (var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var prop = _ref;

                        if (!add[prop]) {
                            add[prop] = { values: [] };
                        }
                        add[prop].values.push(value$$1);
                    }
                } else {
                    var values = add[name] && add[name].values || [];
                    add[name] = declaration.load(name, prefixes, this);
                    add[name].values = values;
                }
            }
        }

        var remove = { selectors: [] };
        for (var _name in selected.remove) {
            var _prefixes = selected.remove[_name];
            if (this.data[_name].selector) {
                var selector$$1 = selector.load(_name, _prefixes);
                for (var _iterator2 = _prefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                    var _ref2;

                    if (_isArray2) {
                        if (_i2 >= _iterator2.length) break;
                        _ref2 = _iterator2[_i2++];
                    } else {
                        _i2 = _iterator2.next();
                        if (_i2.done) break;
                        _ref2 = _i2.value;
                    }

                    var prefix = _ref2;

                    remove.selectors.push(selector$$1.old(prefix));
                }
            } else if (_name === '@keyframes' || _name === '@viewport') {
                for (var _iterator3 = _prefixes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var _prefix = _ref3;

                    var prefixed = '@' + _prefix + _name.slice(1);
                    remove[prefixed] = { remove: true };
                }
            } else if (_name === '@resolution') {
                remove[_name] = new resolution(_name, _prefixes, this);
            } else {
                var _props = this.data[_name].props;
                if (_props) {
                    var _value = value.load(_name, [], this);
                    for (var _iterator4 = _prefixes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                        var _ref4;

                        if (_isArray4) {
                            if (_i4 >= _iterator4.length) break;
                            _ref4 = _iterator4[_i4++];
                        } else {
                            _i4 = _iterator4.next();
                            if (_i4.done) break;
                            _ref4 = _i4.value;
                        }

                        var _prefix2 = _ref4;

                        var old = _value.old(_prefix2);
                        if (old) {
                            for (var _iterator5 = _props, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                                var _ref5;

                                if (_isArray5) {
                                    if (_i5 >= _iterator5.length) break;
                                    _ref5 = _iterator5[_i5++];
                                } else {
                                    _i5 = _iterator5.next();
                                    if (_i5.done) break;
                                    _ref5 = _i5.value;
                                }

                                var _prop = _ref5;

                                if (!remove[_prop]) {
                                    remove[_prop] = {};
                                }
                                if (!remove[_prop].values) {
                                    remove[_prop].values = [];
                                }
                                remove[_prop].values.push(old);
                            }
                        }
                    }
                } else {
                    for (var _iterator6 = _prefixes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
                        var _ref6;

                        if (_isArray6) {
                            if (_i6 >= _iterator6.length) break;
                            _ref6 = _iterator6[_i6++];
                        } else {
                            _i6 = _iterator6.next();
                            if (_i6.done) break;
                            _ref6 = _i6.value;
                        }

                        var _prefix3 = _ref6;

                        var olds = this.decl(_name).old(_name, _prefix3);
                        if (_name === 'align-self') {
                            var a = add[_name] && add[_name].prefixes;
                            if (a) {
                                if (_prefix3 === '-webkit- 2009' && a.indexOf('-webkit-') !== -1) {
                                    continue;
                                } else if (_prefix3 === '-webkit-' && a.indexOf('-webkit- 2009') !== -1) {
                                    continue;
                                }
                            }
                        }
                        for (var _iterator7 = olds, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
                            var _ref7;

                            if (_isArray7) {
                                if (_i7 >= _iterator7.length) break;
                                _ref7 = _iterator7[_i7++];
                            } else {
                                _i7 = _iterator7.next();
                                if (_i7.done) break;
                                _ref7 = _i7.value;
                            }

                            var _prefixed = _ref7;

                            if (!remove[_prefixed]) {
                                remove[_prefixed] = {};
                            }
                            remove[_prefixed].remove = true;
                        }
                    }
                }
            }
        }

        return [add, remove];
    };

    /**
     * Declaration loader with caching
     */


    Prefixes.prototype.decl = function decl(prop) {
        var decl = declsCache[prop];

        if (decl) {
            return decl;
        } else {
            declsCache[prop] = declaration.load(prop);
            return declsCache[prop];
        }
    };

    /**
     * Return unprefixed version of property
     */


    Prefixes.prototype.unprefixed = function unprefixed(prop) {
        var value$$1 = this.normalize(vendor_1.unprefixed(prop));
        if (value$$1 === 'flex-direction') {
            value$$1 = 'flex-flow';
        }
        return value$$1;
    };

    /**
     * Normalize prefix for remover
     */


    Prefixes.prototype.normalize = function normalize(prop) {
        return this.decl(prop).normalize(prop);
    };

    /**
     * Return prefixed version of property
     */


    Prefixes.prototype.prefixed = function prefixed(prop, prefix) {
        prop = vendor_1.unprefixed(prop);
        return this.decl(prop).prefixed(prop, prefix);
    };

    /**
     * Return values, which must be prefixed in selected property
     */


    Prefixes.prototype.values = function values(type, prop) {
        var data = this[type];

        var global = data['*'] && data['*'].values;
        var values = data[prop] && data[prop].values;

        if (global && values) {
            return utils.uniq(global.concat(values));
        } else {
            return global || values || [];
        }
    };

    /**
     * Group declaration by unprefixed property to check them
     */


    Prefixes.prototype.group = function group(decl) {
        var _this2 = this;

        var rule = decl.parent;
        var index = rule.index(decl);
        var length = rule.nodes.length;

        var unprefixed = this.unprefixed(decl.prop);

        var checker = function checker(step, callback) {
            index += step;
            while (index >= 0 && index < length) {
                var other = rule.nodes[index];
                if (other.type === 'decl') {

                    if (step === -1 && other.prop === unprefixed) {
                        if (!browsers$3.withPrefix(other.value)) {
                            break;
                        }
                    }

                    if (_this2.unprefixed(other.prop) !== unprefixed) {
                        break;
                    } else if (callback(other) === true) {
                        return true;
                    }

                    if (step === +1 && other.prop === unprefixed) {
                        if (!browsers$3.withPrefix(other.value)) {
                            break;
                        }
                    }
                }

                index += step;
            }
            return false;
        };

        return {
            up: function up(callback) {
                return checker(-1, callback);
            },
            down: function down(callback) {
                return checker(+1, callback);
            }
        };
    };

    return Prefixes;
}();

var prefixes = Prefixes;

function capitalize(str) {
    return str.slice(0, 1).toUpperCase() + str.slice(1);
}

var names = {
    ie: 'IE',
    ie_mob: 'IE Mobile',
    ios_saf: 'iOS',
    op_mini: 'Opera Mini',
    op_mob: 'Opera Mobile',
    and_chr: 'Chrome for Android',
    and_ff: 'Firefox for Android',
    and_uc: 'UC for Android'
};

var prefix = function prefix(name, prefixes) {
    var out = '  ' + name + ': ';
    out += prefixes.map(function (i) {
        return i.replace(/^-(.*)-$/g, '$1');
    }).join(', ');
    out += '\n';
    return out;
};

var info = function (prefixes) {
    if (prefixes.browsers.selected.length === 0) {
        return 'No browsers selected';
    }

    var versions = {};
    for (var _iterator = prefixes.browsers.selected, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var browser = _ref;

        var _browser$split = browser.split(' '),
            name = _browser$split[0],
            version = _browser$split[1];

        name = names[name] || capitalize(name);
        if (versions[name]) {
            versions[name].push(version);
        } else {
            versions[name] = [version];
        }
    }

    var out = 'Browsers:\n';
    for (var _browser in versions) {
        var list = versions[_browser];
        list = list.sort(function (a, b) {
            return parseFloat(b) - parseFloat(a);
        });
        out += '  ' + _browser + ': ' + list.join(', ') + '\n';
    }

    var coverage = _browserslist_2_11_3_browserslist.coverage(prefixes.browsers.selected);
    var round = Math.round(coverage * 100) / 100.0;
    out += '\nThese browsers account for ' + round + '% of all users globally\n';

    var atrules = '';
    for (var name in prefixes.add) {
        var data = prefixes.add[name];
        if (name[0] === '@' && data.prefixes) {
            atrules += prefix(name, data.prefixes);
        }
    }
    if (atrules !== '') {
        out += '\nAt-Rules:\n' + atrules;
    }

    var selectors = '';
    for (var _iterator2 = prefixes.add.selectors, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
        } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
        }

        var selector = _ref2;

        if (selector.prefixes) {
            selectors += prefix(selector.name, selector.prefixes);
        }
    }
    if (selectors !== '') {
        out += '\nSelectors:\n' + selectors;
    }

    var values = '';
    var props = '';
    for (var _name in prefixes.add) {
        var _data = prefixes.add[_name];
        if (_name[0] !== '@' && _data.prefixes) {
            props += prefix(_name, _data.prefixes);
        }

        if (!_data.values) {
            continue;
        }
        for (var _iterator3 = _data.values, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
            } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
            }

            var value = _ref3;

            var string = prefix(value.name, value.prefixes);
            if (values.indexOf(string) === -1) {
                values += string;
            }
        }
    }

    if (props !== '') {
        out += '\nProperties:\n' + props;
    }
    if (values !== '') {
        out += '\nValues:\n' + values;
    }

    if (atrules === '' && selectors === '' && props === '' && values === '') {
        out += '\nAwesome! Your browsers don\'t require any vendor prefixes.' + '\nNow you can remove Autoprefixer from build steps.';
    }

    return out;
};

var unpack = unpacker.feature;

var browsersSort = function browsersSort(a, b) {
    a = a.split(' ');
    b = b.split(' ');
    if (a[0] > b[0]) {
        return 1;
    } else if (a[0] < b[0]) {
        return -1;
    } else {
        return Math.sign(parseFloat(a[1]) - parseFloat(b[1]));
    }
};

// Convert Can I Use data
function f(data, opts, callback) {
    data = unpack(data);

    if (!callback) {
        var _ref = [opts, {}];
        callback = _ref[0];
        opts = _ref[1];
    }

    var match = opts.match || /\sx($|\s)/;
    var need = [];

    for (var browser in data.stats) {
        var versions = data.stats[browser];
        for (var version in versions) {
            var support = versions[version];
            if (support.match(match)) {
                need.push(browser + ' ' + version);
            }
        }
    }

    callback(need.sort(browsersSort));
}

// Add data for all properties
var result = {};

var prefix$1 = function prefix(names, data) {
    for (var _iterator = names, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref2 = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref2 = _i.value;
        }

        var name = _ref2;

        result[name] = Object.assign({}, data);
    }
};

var add = function add(names, data) {
    for (var _iterator2 = names, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref3 = _iterator2[_i2++];
        } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref3 = _i2.value;
        }

        var name = _ref3;

        result[name].browsers = result[name].browsers.concat(data.browsers).sort(browsersSort);
    }
};

var prefixes$2 = result;

// Border Radius
f(borderRadius, function (browsers) {
    return prefix$1(['border-radius', 'border-top-left-radius', 'border-top-right-radius', 'border-bottom-right-radius', 'border-bottom-left-radius'], {
        mistakes: ['-khtml-', '-ms-', '-o-'],
        feature: 'border-radius',
        browsers: browsers
    });
});

// Box Shadow
f(cssBoxshadow, function (browsers) {
    return prefix$1(['box-shadow'], {
        mistakes: ['-khtml-'],
        feature: 'css-boxshadow',
        browsers: browsers
    });
});

// Animation
f(cssAnimation, function (browsers) {
    return prefix$1(['animation', 'animation-name', 'animation-duration', 'animation-delay', 'animation-direction', 'animation-fill-mode', 'animation-iteration-count', 'animation-play-state', 'animation-timing-function', '@keyframes'], {
        mistakes: ['-khtml-', '-ms-'],
        feature: 'css-animation',
        browsers: browsers
    });
});

// Transition
f(cssTransitions, function (browsers) {
    return prefix$1(['transition', 'transition-property', 'transition-duration', 'transition-delay', 'transition-timing-function'], {
        mistakes: ['-khtml-', '-ms-'],
        browsers: browsers,
        feature: 'css-transitions'
    });
});

// Transform 2D
f(transforms2d, function (browsers) {
    return prefix$1(['transform', 'transform-origin'], {
        feature: 'transforms2d',
        browsers: browsers
    });
});

// Transform 3D


f(transforms3d, function (browsers) {
    prefix$1(['perspective', 'perspective-origin'], {
        feature: 'transforms3d',
        browsers: browsers
    });
    return prefix$1(['transform-style'], {
        mistakes: ['-ms-', '-o-'],
        browsers: browsers,
        feature: 'transforms3d'
    });
});

f(transforms3d, { match: /y\sx|y\s#2/ }, function (browsers) {
    return prefix$1(['backface-visibility'], {
        mistakes: ['-ms-', '-o-'],
        feature: 'transforms3d',
        browsers: browsers
    });
});

// Gradients


f(cssGradients, { match: /y\sx/ }, function (browsers) {
    return prefix$1(['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        mistakes: ['-ms-'],
        feature: 'css-gradients',
        browsers: browsers
    });
});

f(cssGradients, { match: /a\sx/ }, function (browsers) {
    browsers = browsers.map(function (i) {
        if (/op/.test(i)) {
            return i;
        } else {
            return i + ' old';
        }
    });
    return add(['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'], {
        feature: 'css-gradients',
        browsers: browsers
    });
});

// Box sizing
f(css3Boxsizing, function (browsers) {
    return prefix$1(['box-sizing'], {
        feature: 'css3-boxsizing',
        browsers: browsers
    });
});

// Filter Effects
f(cssFilters, function (browsers) {
    return prefix$1(['filter'], {
        feature: 'css-filters',
        browsers: browsers
    });
});

// filter() function
f(cssFilterFunction, function (browsers) {
    return prefix$1(['filter-function'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        feature: 'css-filter-function',
        browsers: browsers
    });
});

// Backdrop-filter
f(cssBackdropFilter, function (browsers) {
    return prefix$1(['backdrop-filter'], {
        feature: 'css-backdrop-filter',
        browsers: browsers
    });
});

// element() function
f(cssElementFunction, function (browsers) {
    return prefix$1(['element'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        feature: 'css-element-function',
        browsers: browsers
    });
});

// Multicolumns
f(multicolumn, function (browsers) {
    prefix$1(['columns', 'column-width', 'column-gap', 'column-rule', 'column-rule-color', 'column-rule-width'], {
        feature: 'multicolumn',
        browsers: browsers
    });

    prefix$1(['column-count', 'column-rule-style', 'column-span', 'column-fill', 'break-before', 'break-after', 'break-inside'], {
        feature: 'multicolumn',
        browsers: browsers
    });
});

// User select
f(userSelectNone, function (browsers) {
    return prefix$1(['user-select'], {
        mistakes: ['-khtml-'],
        feature: 'user-select-none',
        browsers: browsers
    });
});

// Flexible Box Layout

f(flexbox, { match: /a\sx/ }, function (browsers) {
    browsers = browsers.map(function (i) {
        if (/ie|firefox/.test(i)) {
            return i;
        } else {
            return i + ' 2009';
        }
    });
    prefix$1(['display-flex', 'inline-flex'], {
        props: ['display'],
        feature: 'flexbox',
        browsers: browsers
    });
    prefix$1(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
        feature: 'flexbox',
        browsers: browsers
    });
    prefix$1(['flex-direction', 'flex-wrap', 'flex-flow', 'justify-content', 'order', 'align-items', 'align-self', 'align-content'], {
        feature: 'flexbox',
        browsers: browsers
    });
});

f(flexbox, { match: /y\sx/ }, function (browsers) {
    add(['display-flex', 'inline-flex'], {
        feature: 'flexbox',
        browsers: browsers
    });
    add(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
        feature: 'flexbox',
        browsers: browsers
    });
    add(['flex-direction', 'flex-wrap', 'flex-flow', 'justify-content', 'order', 'align-items', 'align-self', 'align-content'], {
        feature: 'flexbox',
        browsers: browsers
    });
});

// calc() unit
f(calc, function (browsers) {
    return prefix$1(['calc'], {
        props: ['*'],
        feature: 'calc',
        browsers: browsers
    });
});

// Background options
f(backgroundImgOpts, function (browsers) {
    return prefix$1(['background-clip', 'background-origin', 'background-size'], {
        feature: 'background-img-opts',
        browsers: browsers
    });
});

// Font feature settings
f(fontFeature, function (browsers) {
    return prefix$1(['font-feature-settings', 'font-variant-ligatures', 'font-language-override'], {
        feature: 'font-feature',
        browsers: browsers
    });
});

// CSS font-kerning property
f(fontKerning, function (browsers) {
    return prefix$1(['font-kerning'], {
        feature: 'font-kerning',
        browsers: browsers
    });
});

// Border image
f(borderImage, function (browsers) {
    return prefix$1(['border-image'], {
        feature: 'border-image',
        browsers: browsers
    });
});

// Selection selector
f(cssSelection, function (browsers) {
    return prefix$1(['::selection'], {
        selector: true,
        feature: 'css-selection',
        browsers: browsers
    });
});

// Placeholder selector
f(cssPlaceholder, function (browsers) {
    browsers = browsers.map(function (i) {
        var _i$split = i.split(' '),
            name = _i$split[0],
            version = _i$split[1];

        if (name === 'firefox' && parseFloat(version) <= 18) {
            return i + ' old';
        } else if (name === 'ie') {
            return i + ' old';
        } else {
            return i;
        }
    });

    prefix$1(['::placeholder'], {
        selector: true,
        feature: 'css-placeholder',
        browsers: browsers
    });
});

// Hyphenation
f(cssHyphens, function (browsers) {
    return prefix$1(['hyphens'], {
        feature: 'css-hyphens',
        browsers: browsers
    });
});

// Fullscreen selector


f(fullscreen, function (browsers) {
    return prefix$1([':fullscreen'], {
        selector: true,
        feature: 'fullscreen',
        browsers: browsers
    });
});

f(fullscreen, { match: /x(\s#2|$)/ }, function (browsers) {
    return prefix$1(['::backdrop'], {
        selector: true,
        feature: 'fullscreen',
        browsers: browsers
    });
});

// Tab size
f(css3Tabsize, function (browsers) {
    return prefix$1(['tab-size'], {
        feature: 'css3-tabsize',
        browsers: browsers
    });
});

// Intrinsic & extrinsic sizing
f(intrinsicWidth, function (browsers) {
    return prefix$1(['max-content', 'min-content', 'fit-content', 'fill', 'fill-available', 'stretch'], {
        props: ['width', 'min-width', 'max-width', 'height', 'min-height', 'max-height', 'inline-size', 'min-inline-size', 'max-inline-size', 'block-size', 'min-block-size', 'max-block-size', 'grid', 'grid-template', 'grid-template-rows', 'grid-template-columns', 'grid-auto-columns', 'grid-auto-rows'],
        feature: 'intrinsic-width',
        browsers: browsers
    });
});

// Zoom cursors
f(css3CursorsNewer, function (browsers) {
    return prefix$1(['zoom-in', 'zoom-out'], {
        props: ['cursor'],
        feature: 'css3-cursors-newer',
        browsers: browsers
    });
});

// Grab cursors
f(css3CursorsGrab, function (browsers) {
    return prefix$1(['grab', 'grabbing'], {
        props: ['cursor'],
        feature: 'css3-cursors-grab',
        browsers: browsers
    });
});

// Sticky position
f(cssSticky, function (browsers) {
    return prefix$1(['sticky'], {
        props: ['position'],
        feature: 'css-sticky',
        browsers: browsers
    });
});

// Pointer Events
f(pointer, function (browsers) {
    return prefix$1(['touch-action'], {
        feature: 'pointer',
        browsers: browsers
    });
});

// Text decoration


f(textDecoration, function (browsers) {
    return prefix$1(['text-decoration-style', 'text-decoration-color', 'text-decoration-line', 'text-decoration'], {
        feature: 'text-decoration',
        browsers: browsers
    });
});

f(textDecoration, { match: /x.*#[23]/ }, function (browsers) {
    return prefix$1(['text-decoration-skip'], {
        feature: 'text-decoration',
        browsers: browsers
    });
});

// Text Size Adjust
f(textSizeAdjust, function (browsers) {
    return prefix$1(['text-size-adjust'], {
        feature: 'text-size-adjust',
        browsers: browsers
    });
});

// CSS Masks
f(cssMasks, function (browsers) {
    prefix$1(['mask-clip', 'mask-composite', 'mask-image', 'mask-origin', 'mask-repeat', 'mask-border-repeat', 'mask-border-source'], {
        feature: 'css-masks',
        browsers: browsers
    });
    prefix$1(['mask', 'mask-position', 'mask-size', 'mask-border', 'mask-border-outset', 'mask-border-width', 'mask-border-slice'], {
        feature: 'css-masks',
        browsers: browsers
    });
});

// CSS clip-path property
f(cssClipPath, function (browsers) {
    return prefix$1(['clip-path'], {
        feature: 'css-clip-path',
        browsers: browsers
    });
});

// Fragmented Borders and Backgrounds
f(cssBoxdecorationbreak, function (browsers) {
    return prefix$1(['box-decoration-break'], {
        feature: 'css-boxdecorationbreak',
        browsers: browsers
    });
});

// CSS3 object-fit/object-position
f(objectFit, function (browsers) {
    return prefix$1(['object-fit', 'object-position'], {
        feature: 'object-fit',
        browsers: browsers
    });
});

// CSS Shapes
f(cssShapes, function (browsers) {
    return prefix$1(['shape-margin', 'shape-outside', 'shape-image-threshold'], {
        feature: 'css-shapes',
        browsers: browsers
    });
});

// CSS3 text-overflow
f(textOverflow, function (browsers) {
    return prefix$1(['text-overflow'], {
        feature: 'text-overflow',
        browsers: browsers
    });
});

// Viewport at-rule
f(cssDeviceadaptation, function (browsers) {
    return prefix$1(['@viewport'], {
        feature: 'css-deviceadaptation',
        browsers: browsers
    });
});

// Resolution Media Queries

f(cssMediaResolution, { match: /( x($| )|a #3)/ }, function (browsers) {
    return prefix$1(['@resolution'], {
        feature: 'css-media-resolution',
        browsers: browsers
    });
});

// CSS text-align-last
f(cssTextAlignLast, function (browsers) {
    return prefix$1(['text-align-last'], {
        feature: 'css-text-align-last',
        browsers: browsers
    });
});

// Crisp Edges Image Rendering Algorithm


f(cssCrispEdges, { match: /y x|a x #1/ }, function (browsers) {
    return prefix$1(['pixelated'], {
        props: ['image-rendering'],
        feature: 'css-crisp-edges',
        browsers: browsers
    });
});

f(cssCrispEdges, { match: /a x #2/ }, function (browsers) {
    return prefix$1(['image-rendering'], {
        feature: 'css-crisp-edges',
        browsers: browsers
    });
});

// Logical Properties


f(cssLogicalProps, function (browsers) {
    return prefix$1(['border-inline-start', 'border-inline-end', 'margin-inline-start', 'margin-inline-end', 'padding-inline-start', 'padding-inline-end'], {
        feature: 'css-logical-props',
        browsers: browsers
    });
});

f(cssLogicalProps, { match: /x\s#2/ }, function (browsers) {
    return prefix$1(['border-block-start', 'border-block-end', 'margin-block-start', 'margin-block-end', 'padding-block-start', 'padding-block-end'], {
        feature: 'css-logical-props',
        browsers: browsers
    });
});

// CSS appearance

f(cssAppearance, { match: /#2|x/ }, function (browsers) {
    return prefix$1(['appearance'], {
        feature: 'css-appearance',
        browsers: browsers
    });
});

// CSS Scroll snap points
f(cssSnappoints, function (browsers) {
    return prefix$1(['scroll-snap-type', 'scroll-snap-coordinate', 'scroll-snap-destination', 'scroll-snap-points-x', 'scroll-snap-points-y'], {
        feature: 'css-snappoints',
        browsers: browsers
    });
});

// CSS Regions
f(cssRegions, function (browsers) {
    return prefix$1(['flow-into', 'flow-from', 'region-fragment'], {
        feature: 'css-regions',
        browsers: browsers
    });
});

// CSS image-set
f(cssImageSet, function (browsers) {
    return prefix$1(['image-set'], {
        props: ['background', 'background-image', 'border-image', 'cursor', 'mask', 'mask-image', 'list-style', 'list-style-image', 'content'],
        feature: 'css-image-set',
        browsers: browsers
    });
});

// Writing Mode

f(cssWritingMode, { match: /a|x/ }, function (browsers) {
    return prefix$1(['writing-mode'], {
        feature: 'css-writing-mode',
        browsers: browsers
    });
});

// Cross-Fade Function
f(cssCrossFade, function (browsers) {
    return prefix$1(['cross-fade'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        feature: 'css-cross-fade',
        browsers: browsers
    });
});

// Read Only selector
f(cssReadOnlyWrite, function (browsers) {
    return prefix$1([':read-only', ':read-write'], {
        selector: true,
        feature: 'css-read-only-write',
        browsers: browsers
    });
});

// Text Emphasize
f(textEmphasis, function (browsers) {
    return prefix$1(['text-emphasis', 'text-emphasis-position', 'text-emphasis-style', 'text-emphasis-color'], {
        feature: 'text-emphasis',
        browsers: browsers
    });
});

// CSS Grid Layout


f(cssGrid, function (browsers) {
    prefix$1(['display-grid', 'inline-grid'], {
        props: ['display'],
        feature: 'css-grid',
        browsers: browsers
    });
    prefix$1(['grid-template-columns', 'grid-template-rows', 'grid-row-start', 'grid-column-start', 'grid-row-end', 'grid-column-end', 'grid-row', 'grid-column'], {
        feature: 'css-grid',
        browsers: browsers
    });
});

f(cssGrid, { match: /a x/ }, function (browsers) {
    return prefix$1(['grid-column-align', 'grid-row-align'], {
        feature: 'css-grid',
        browsers: browsers
    });
});

// CSS text-spacing
f(cssTextSpacing, function (browsers) {
    return prefix$1(['text-spacing'], {
        feature: 'css-text-spacing',
        browsers: browsers
    });
});

// :any-link selector
f(cssAnyLink, function (browsers) {
    return prefix$1([':any-link'], {
        selector: true,
        feature: 'css-any-link',
        browsers: browsers
    });
});

// unicode-bidi


f(cssUnicodeBidi, function (browsers) {
    return prefix$1(['isolate'], {
        props: ['unicode-bidi'],
        feature: 'css-unicode-bidi',
        browsers: browsers
    });
});

f(cssUnicodeBidi, { match: /y x|a x #2/ }, function (browsers) {
    return prefix$1(['plaintext'], {
        props: ['unicode-bidi'],
        feature: 'css-unicode-bidi',
        browsers: browsers
    });
});

f(cssUnicodeBidi, { match: /y x/ }, function (browsers) {
    return prefix$1(['isolate-override'], {
        props: ['unicode-bidi'],
        feature: 'css-unicode-bidi',
        browsers: browsers
    });
});

var autoprefixer = createCommonjsModule(function (module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };







function isPlainObject(obj) {
    return Object.prototype.toString.apply(obj) === '[object Object]';
}

var cache = {};

function timeCapsule(result, prefixes$$1) {
    if (prefixes$$1.browsers.selected.length === 0) {
        return;
    }
    if (prefixes$$1.add.selectors.length > 0) {
        return;
    }
    if (Object.keys(prefixes$$1.add).length > 2) {
        return;
    }

    result.warn('Greetings, time traveller. ' + 'We are in the golden age of prefix-less CSS, ' + 'where Autoprefixer is no longer needed for your stylesheet.');
}

module.exports = postcss.plugin('autoprefixer', function () {
    for (var _len = arguments.length, reqs = Array(_len), _key = 0; _key < _len; _key++) {
        reqs[_key] = arguments[_key];
    }

    var options = void 0;
    if (reqs.length === 1 && isPlainObject(reqs[0])) {
        options = reqs[0];
        reqs = undefined;
    } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) {
        reqs = undefined;
    } else if (reqs.length <= 2 && (reqs[0] instanceof Array || !reqs[0])) {
        options = reqs[1];
        reqs = reqs[0];
    } else if (_typeof(reqs[reqs.length - 1]) === 'object') {
        options = reqs.pop();
    }

    if (!options) {
        options = {};
    }

    if (options.browser) {
        throw new Error('Change `browser` option to `browsers` in Autoprefixer');
    } else if (options.browserslist) {
        throw new Error('Change `browserslist` option to `browsers` in Autoprefixer');
    }

    if (options.browsers) {
        reqs = options.browsers;
    }

    if (typeof options.grid === 'undefined') {
        options.grid = false;
    }

    var loadPrefixes = function loadPrefixes(opts) {
        var data = module.exports.data;
        var browsers = new browsers$3(data.browsers, reqs, opts, options.stats);
        var key = browsers.selected.join(', ') + JSON.stringify(options);

        if (!cache[key]) {
            cache[key] = new prefixes(data.prefixes, browsers, options);
        }

        return cache[key];
    };

    var plugin = function plugin(css, result) {
        var prefixes$$1 = loadPrefixes({
            from: css.source && css.source.input.file,
            env: options.env
        });
        timeCapsule(result, prefixes$$1);
        if (options.remove !== false) {
            prefixes$$1.processor.remove(css, result);
        }
        if (options.add !== false) {
            prefixes$$1.processor.add(css, result);
        }
    };

    plugin.options = options;

    plugin.info = function (opts) {
        return info(loadPrefixes(opts));
    };

    return plugin;
});

/**
 * Autoprefixer data
 */
module.exports.data = {
    browsers: unpacker.agents,
    prefixes: prefixes$2
};

/**
 * Autoprefixer default browsers
 */
module.exports.defaults = _browserslist_2_11_3_browserslist.defaults;

/**
 * Inspect with default Autoprefixer
 */
module.exports.info = function () {
    return module.exports().info();
};
});

var _postcssAlias_2_0_0_postcssAlias = postcss.plugin('postcss-alias', function () {
  return function (css) {

    var aliases = [];
    css.walkAtRules('alias', function(rule){

      rule.walkDecls(function(decl){
        aliases.push({ name: decl.prop, property: decl.value });
      });

      rule.remove();

    });

    /**
     * Alias expander, takes an alias and expands to the relevant decleration/value
     * @param  {string} alias The alias to expand
     */
    var expander = function(alias){

      css.walkDecls(function(decl){

        if (decl.prop === alias.name) {
          decl.replaceWith({ prop: alias.property, value: decl.value, important: decl.important });
        }

      });

    };

    // Loop over and expand every alias
    aliases.forEach(expander);

  };
});

var _postcssResponsiveType_1_0_0_postcssResponsiveType = postcss.plugin('postcss-responsive-type', function () {

  var rootSize = '16px',
      defaultParams = {
        'font-size': {
          minSize: '12px',
          maxSize: '21px',
          minWidth: '420px',
          maxWidth: '1280px'
        },
        'line-height': {
          minSize: '1.2em',
          maxSize: '1.8em',
          minWidth: '420px',
          maxWidth: '1280px'
        },
        'letter-spacing': {
          minSize: '0px',
          maxSize: '4px',
          minWidth: '420px',
          maxWidth: '1280px'
        }
      },
      paramRangeDecl = {
        'font-size': 'font-range',
        'line-height': 'line-height-range',
        'letter-spacing': 'letter-spacing-range'
      },
      paramDecls = {
        'font-size': {
          minSize: 'min-font-size',
          maxSize: 'max-font-size',
          minWidth: 'lower-font-range',
          maxWidth: 'upper-font-range'
        },
        'line-height': {
          minSize: 'min-line-height',
          maxSize: 'max-line-height',
          minWidth: 'lower-line-height-range',
          maxWidth: 'upper-line-height-range'
        },
        'letter-spacing': {
          minSize: 'min-letter-spacing',
          maxSize: 'max-letter-spacing',
          minWidth: 'lower-letter-spacing-range',
          maxWidth: 'upper-letter-spacing-range'
        }
      };

  function fetchResponsiveSizes(rule, declName, cb){
    rule.walkDecls(declName, function(decl){

      if (decl.value.indexOf('responsive') > -1) {
        var vals = decl.value.match(/-?\d*\.?\d+(?:\w+)?/g);
        if (vals) {
          cb(vals[0], vals[1]);
        }
      }

    });
  }

  function fetchRangeSizes(rule, declName, cb){
    rule.walkDecls(declName, function(decl){
      var vals = decl.value.split(/\s+/);
      cb(vals[0], vals[1]);
      decl.remove();
    });
  }

  /**
   * Fetch plugin parameters from css rules
   * @param  {object} rule CSS rule to parse
   */
  function fetchParams(rule, declName){
    var params = Object.assign({}, defaultParams[declName]),
        rangeDecl;

    // Fetch params from shorthand declName, i.e., font-size or line-height, etc
    fetchResponsiveSizes(rule, declName, function(minSize, maxSize) {
      params.minSize = minSize;
      params.maxSize = maxSize;
    });

    // Fetch params from shorthand font-range or line-height-range
    fetchRangeSizes(rule, paramRangeDecl[declName], function(minSize, maxSize){
      params.minWidth = minSize;
      params.maxWidth = maxSize;
    });

    // Fetch parameters from expanded properties
    rangeDecl = paramDecls[declName];
    Object.keys(rangeDecl).forEach(function(param){
      rule.walkDecls(rangeDecl[param], function(decl){
        params[param] = decl.value.trim();
        decl.remove();
      });
    });

    return params;
  }

  /**
   * Px -> Rem converter
   * @param  {String} px pixel value
   * @return {String}    rem value
   */
  function pxToRem(px) {
    return parseFloat(px) / parseFloat(rootSize) + 'rem';
  }

  /**
   * Extract the unit from a string
   * @param  {String} value value to extract unit from
   * @return {String}       unit
   */
  function getUnit(value) {
    var match = value.match(/px|rem|em/);

    if (match) {
      return match.toString();
    }
    return null; // unitless value
  }

  /**
   * Build new responsive type rules
   * @param  {object} rule     old CSS rule
   * @return {object}          object of new CSS rules
   */
  function buildRules(rule, declName, params, result) {
    var rules = {},
        minSize = params.minSize,
        maxSize = params.maxSize,
        minWidth,
        maxWidth,
        sizeUnit = getUnit(params.minSize),
        maxSizeUnit = getUnit(params.maxSize),
        widthUnit = getUnit(params.minWidth),
        maxWidthUnit = getUnit(params.maxWidth),
        sizeDiff,
        rangeDiff;

    if (sizeUnit === null) {
      throw rule.error('sizes with unitless values are not supported');
    }

    if (sizeUnit !== maxSizeUnit && widthUnit !== maxWidthUnit) {
      rule.warn(result, 'min/max unit types must match');
    }

    if (sizeUnit === 'rem' && widthUnit === 'px') {

      minWidth = pxToRem(params.minWidth);
      maxWidth = pxToRem(params.maxWidth);

    } else if (sizeUnit === widthUnit || sizeUnit === 'rem' && widthUnit === 'em') {

      minWidth = params.minWidth;
      maxWidth = params.maxWidth;

    } else {

      rule.warn(result, 'this combination of units is not supported');

    }

    // Build the responsive type decleration
    sizeDiff = parseFloat(maxSize) - parseFloat(minSize);
    rangeDiff = parseFloat(maxWidth) - parseFloat(minWidth);

    rules.responsive = 'calc(' + minSize + ' + ' + sizeDiff + ' * ((100vw - ' + minWidth + ') / ' + rangeDiff + '))';

    // Build the media queries
    rules.minMedia = postcss.atRule({
      name: 'media',
      params: 'screen and (max-width: ' + params.minWidth + ')'
    });

    rules.maxMedia = postcss.atRule({
      name: 'media',
      params: 'screen and (min-width: ' + params.maxWidth + ')'
    });

    // Add the required content to new media queries
    rules.minMedia.append({
        selector: rule.selector
    }).walkRules(function(selector){
      selector.append({
        prop: declName,
        value: params.minSize
      });
    });

    rules.maxMedia.append({
      selector: rule.selector
    }).walkRules(function(selector){
      selector.append({
        prop: declName,
        value: params.maxSize
      });
    });

    return rules;
  }

  // Do it!
  return function (css, result) {
    css.walkRules(function(rule){

      var thisRule,
          newRules;

      // Check root font-size (for rem units)
      if (rule.selector.indexOf('html') > -1){
        rule.walkDecls('font-size', function(decl){
          if (decl.value.indexOf('px') > -1){
            rootSize = decl.value;
          }
        });
      }

      rule.walkDecls(/^(font-size|line-height|letter-spacing)$/, function(decl){

        var params;

        // If decl doesn't contain responsve keyword, exit
        if (decl.value.indexOf('responsive') === -1) {
          return;
        }

        thisRule = decl.parent;

        params = fetchParams(thisRule, decl.prop);

        newRules = buildRules(thisRule, decl.prop, params, result);

        // Insert the base responsive decleration
        if (decl.value.indexOf('responsive') > -1) {
          decl.replaceWith({ prop: decl.prop, value: newRules.responsive });
        }

        // Insert the media queries
        thisRule.parent.insertAfter(thisRule, newRules.minMedia);
        thisRule.parent.insertAfter(thisRule, newRules.maxMedia);

      });
    });
  };

});

/**
 * Takes position declaration and expands it
 * @param  {Object} decl CSS declaration to handle
 * @return undefined
 */
var declExpander = function(decl) {

  var offsets = ['top', 'right', 'bottom', 'left'],
      outputVals = offsets.map(function(){
        return 0;
      }),
      inputVals = [],
      position;

  // Throw decl values into an array
  var re = /(([\+\-]?[0-9\.]+)(%|px|pt|em|in|cm|mm|ex|pc|vw)?)|(calc\(([^\)]+)\)|null|false|undefined|auto)/g,
    m = void 0;

  while ((m = re.exec(decl.value)) !== null) {
    if (m.index === re.lastIndex) {
      re.lastIndex++;
    }

   inputVals.push(m[0]);
  }

  // If there are no additional values on position, exit
  if (inputVals.length === 0) {
    return;
  }

  // Strip position from vals and store for safe keeping
  position = decl.value.match(/^static|absolute|fixed|relative|initial|inherit/).toString();

  // Transform input values into correct 4 outputs
  outputVals = (function(ins) {
    switch (ins.length) {
        case 1:
        return outputVals.map(function() {
          return ins[0];
        });
        case 2:
        return outputVals.map(function(v, k) {
          return ins[(k + 1) % 2 ? 0 : 1];
        });
        case 3:
        return outputVals.map(function(v, k) {
          return ins[k === 3 ? 1 : k];
        });
        case 4:
        return outputVals.map(function(v, k) {
          return ins[k];
        });
        default:
        return [];
    }
  })(inputVals);

  if (outputVals.length === 0) {
     outputVals = offsets.map(function() {
        return 0;
     });
  }

  // Create the position-type declaration
  decl.cloneBefore({ prop: 'position', value: position });

  // And each position offset
  offsets.forEach(function(offset, i){
    if (!/null|false|undefined/i.test(outputVals[i])) {
      decl.cloneBefore({prop: offset, value: outputVals[i] });
    }
  });

  decl.remove();

};

var _postcssPosition_1_0_0_postcssPosition = postcss.plugin('postcss-position', function () {
  return function(css, result) {

    css.walkDecls(function(decl){

      if (decl.prop === 'position') {
        declExpander(decl);
      }

      if (decl.prop.match(/^(static|absolute|fixed|relative|initial|inherit)$/)) {
        result.warn('This syntax is no longer supported, use position: type [offsets]; instead', { node: decl });
      }

    });

  };
});

var _balancedMatch_0_4_2_balancedMatch = balanced;
function balanced(a, b, str) {
  if (a instanceof RegExp) a = maybeMatch(a, str);
  if (b instanceof RegExp) b = maybeMatch(b, str);

  var r = range$1(a, b, str);

  return r && {
    start: r[0],
    end: r[1],
    pre: str.slice(0, r[0]),
    body: str.slice(r[0] + a.length, r[1]),
    post: str.slice(r[1] + b.length)
  };
}

function maybeMatch(reg, str) {
  var m = str.match(reg);
  return m ? m[0] : null;
}

balanced.range = range$1;
function range$1(a, b, str) {
  var begs, beg, left, right, result;
  var ai = str.indexOf(a);
  var bi = str.indexOf(b, ai + 1);
  var i = ai;

  if (ai >= 0 && bi > 0) {
    begs = [];
    left = str.length;

    while (i >= 0 && !result) {
      if (i == ai) {
        begs.push(i);
        ai = str.indexOf(a, i + 1);
      } else if (begs.length == 1) {
        result = [ begs.pop(), bi ];
      } else {
        beg = begs.pop();
        if (beg < left) {
          left = beg;
          right = bi;
        }

        bi = str.indexOf(b, i + 1);
      }

      i = ai < bi && ai >= 0 ? ai : bi;
    }

    if (begs.length) {
      result = [ left, right ];
    }
  }

  return result;
}

var dist = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /* eslint-disable no-param-reassign, no-use-before-define, consistent-return */



var _postcss2 = _interopRequireDefault(postcss);



var _balancedMatch2 = _interopRequireDefault(_balancedMatch_0_4_2_balancedMatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

exports.default = _postcss2.default.plugin('postcss-quantity-queries', function () {
  return function (css) {
    css.walk(function (node) {
      if (node.type === 'rule') {
        return processRule(node);
      }
      if (node.type === 'atrule') {
        return processAtRule(node);
      }
    });
  };
});


var rePseudo = /(.*)(?::{1,2})(at-(?:least|most)|between|exactly)/;
var reAtRule = /(at-(?:least|most)|between|exactly)/;

function processRule(rule) {
  if (!rePseudo.test(rule.selector)) return;

  rule.selectors = rule.selectors.map(function (s) {
    var _balanced = (0, _balancedMatch2.default)('(', ')', s),
        pre = _balanced.pre,
        body = _balanced.body;

    var args = postcss.list.comma(body);

    var _pre$split = pre.split(/:{1,2}/),
        _pre$split2 = _slicedToArray(_pre$split, 2),
        selector = _pre$split2[0],
        quantifier = _pre$split2[1];

    return quantifiers[quantifier].apply(quantifiers, _toConsumableArray(args))([selector]);
  });
}

function processAtRule(atRule) {
  if (!reAtRule.test(atRule.name)) return;

  var args = postcss.list.space(atRule.params);
  var parent = atRule.parent;
  var root = parent.root();
  var selectors = quantifiers[atRule.name].apply(quantifiers, _toConsumableArray(args))(parent.selectors);

  var newRule = _postcss2.default.rule({
    selectors,
    nodes: atRule.nodes,
    source: atRule.source,
    raws: {
      semicolon: true
    }
  });

  cleanIndent(newRule);

  root.insertAfter(parent, newRule);
  atRule.remove();

  if (!parent.nodes.length) parent.remove();
}

var cleanIndent = function cleanIndent(rule) {
  return rule.walkDecls(function (decl) {
    decl.raws.before = decl.raws.before.replace(/[^\S\x0a\x0d]{2,}/, '  ');
  });
};

var quantitySelectors = function quantitySelectors(quantifier, last) {
  return function (selectors) {
    return selectors.map(function (s) {
      return `${s}${quantifier}, ${s}${quantifier} ~ ${last || postcss.list.space(s).pop()}`;
    });
  };
};

var quantifiers = {

  'at-least': function atLeast(count, last) {
    return quantitySelectors(`:nth-last-child(n+${count})`, last);
  },

  'at-most': function atMost(count, last) {
    return quantitySelectors(`:nth-last-child(-n+${count}):first-child`, last);
  },

  between: function between(start, end, last) {
    return quantitySelectors(`:nth-last-child(n+${start}):nth-last-child(-n+${end}):first-child`, last);
  },

  exactly: function exactly(count, last) {
    return quantitySelectors(`:nth-last-child(${count}):first-child`, last);
  }

};
});

unwrapExports(dist);

var _postcssQuantityQueries_0_5_0_postcssQuantityQueries = dist.default;

// Map new selectors to outputs
var selectors = {
  rangeTrack: '::track',
  rangeThumb: '::thumb'
};

var pseudos = {
  rangeTrack: [
    '::-webkit-slider-runnable-track',
    '::-moz-range-track',
    '::-ms-track'
  ],

  rangeThumb: [
    '::-webkit-slider-thumb',
    '::-moz-range-thumb',
    '::-ms-thumb'
  ]
};

/**
 * Check if selector in array contains any of our psuedo elements
 * @param  {String} selector string to check for elements
 * @return {Boolean}         whether it contains pseudo
 */
var containsPseudo = function(selector) {
  return selector.match(/::track|::thumb/);
};

/**
 * Check if selector in array is free from our psuedo elements
 * @param  {String} selector string to check for elements
 * @return {Boolean}         whether it is free from pseudo
 */
var doesntContainPseudo = function(selector) {
  return selector.match(/^((?!(::thumb|::track)).)*$/);
};

/**
 * Extra processing for new range track rules
 * @param  {Object} rule CSS rule to process
 * @return undefined
 */
var processTracks = function(rule) {

  if (rule.selector.indexOf('::-webkit-slider-runnable-track') > -1) {
    rule.prepend({ prop: '-webkit-appearance', value: 'none' });
  }

  if (rule.selector.indexOf('::-moz-range-track') > -1) {
    rule.prepend({ prop: '-moz-appearance', value: 'none' });
  }

};

/**
 * Extra processing for new range thumb rules
 * @param  {Object} rule CSS rule to process
 * @return undefined
 */
var processThumbs = function(rule) {

  if (rule.selector.indexOf('::-webkit-slider-thumb') > -1) {
    rule.prepend({ prop: '-webkit-appearance', value: 'none' });
  }

  if (rule.selector.indexOf('::-moz-range-thumb') > -1) {
    rule.prepend({ prop: '-moz-appearance', value: 'none' });
  }

};


/**
 * Expand and process CSS rules
 * @param  {Object} rule CSS rule to transform
 * @return undefined
 */
var ruleHandler = function(rule) {

  // Loop over our selectors
  Object.keys(selectors).forEach(function(select){

    // If the rule doesn't contain our selector, exit
    if (rule.selector.indexOf(selectors[select]) === -1){
      return;
    }

    // Expand the pseudo selector
    pseudos[select].forEach(function(pseudo){

      // Create the new rule
      var newRule,
          newSelector;

      newRule = rule.cloneBefore();
      newSelector = newRule.selectors.filter(containsPseudo).map(function(selector){
        return selector.replace(selectors[select], pseudo);
      }).join(',\n');

      newRule.selector = newSelector;

      // Do extra processing on the new rules
      processTracks(newRule);
      processThumbs(newRule);

    });

    // Add necessary additional base rules
    var webkitRule = rule.cloneBefore();
    webkitRule.selector = 'input[type="range"]';
    webkitRule.removeAll().append({ prop: '-webkit-appearance', value: 'none' });

    var mozRule = rule.cloneBefore();
    mozRule.selector = 'input[type="range"]::-moz-focus-outer';
    mozRule.removeAll().append({ prop: 'border', value: '0' });

    // If the rule only contained our elements remove it, else clean it
    if (rule.selectors.every(containsPseudo)) {
      rule.remove();
    } else {
      rule.selector = rule.selectors.filter(doesntContainPseudo).join(',\n');
    }

  });

};

var _postcssInputStyle_1_0_0_postcssInputStyle = postcss.plugin('postcss-input-style', function () {
  return function (css) {

    css.walkRules(function(rule) {

      if (!containsPseudo(rule.selector)) {
        return;
      }

      // Handle dem rules
      ruleHandler(rule);

    });

  };
});

var DEFAULT_OPTIONS = {
      display: 'block'
    };

/**
 * Clear: fix; rule handler
 * @param  {string} decl  current decleration
 */
function clearFix(decl, opts) {

  var origRule = decl.parent,
      ruleSelectors = origRule.selectors,
      newRule;

  if (decl.value !== 'fix') {
    return;
  }

  ruleSelectors = ruleSelectors.map(function(ruleSelector){
      return ruleSelector + ':after';
    }).join(',\n');

  // Insert the :after rule before the original rule
  newRule = origRule.cloneAfter({
    selector: ruleSelectors
  }).removeAll();

  newRule.append({
    prop: 'content',
    value: '\'\'',
    source: decl.source
  }, {
    prop: 'display',
    value: opts.display,
    source: decl.source
  }, {
    prop: 'clear',
    value: 'both',
    source: decl.source
  });

  // If the original rule only had clear:fix in it, remove the whole rule
  if (decl.prev() === undefined && decl.next() === undefined) {
    origRule.remove();
  } else {
    // Otherwise just remove the delcl
    decl.remove();
  }

}

var _postcssClearfix_2_0_1_postcssClearfix = postcss.plugin('postcss-clearfix', function(opts) {
  opts = opts || {};
  opts = Object.assign({}, DEFAULT_OPTIONS, opts);

  return function(css) {

    css.walkDecls('clear', function(decl) {
      clearFix(decl, opts);
    });

  };
});

var punycode = createCommonjsModule(function (module, exports) {
/*! https://mths.be/punycode v1.3.2 by @mathias */
(function(root) {

	/** Detect free variables */
	var freeExports = 'object' == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = 'object' == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof undefined == 'function' &&
		typeof undefined.amd == 'object' &&
		undefined.amd
	) {
		undefined('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(commonjsGlobal));
});

var util = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var decode = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

var encode = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var _querystring_0_2_0_querystring = createCommonjsModule(function (module, exports) {
'use strict';

exports.decode = exports.parse = decode;
exports.encode = exports.stringify = encode;
});

var parse$3 = urlParse;
var resolve$2 = urlResolve;
var resolveObject = urlResolveObject;
var format = urlFormat;

var Url_1 = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i;
var portPattern = /:[0-9]*$/;
var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
var delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'];
var unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims);
var autoEscape = ['\''].concat(unwise);
var nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape);
var hostEndingChars = ['/', '?', '#'];
var hostnameMaxLen = 255;
var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
var unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    };
var hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    };
var slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    };

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = _querystring_0_2_0_querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = _querystring_0_2_0_querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = _querystring_0_2_0_querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

var url$2 = {
	parse: parse$3,
	resolve: resolve$2,
	resolveObject: resolveObject,
	format: format,
	Url: Url_1
};

var DEFAULT_OPTS = {
  checkFiles: false,
  ie8Fix: false,
  formats: [
    { type: 'embedded-opentype', ext: 'eot' },
    { type: 'woff2', ext: 'woff2' },
    { type: 'woff', ext: 'woff' },
    { type: 'truetype', ext: 'ttf' },
    { type: 'svg', ext: 'svg'}
  ]
};

var _postcssFontpath_1_0_0_postcssFontpath = postcss.plugin('postcss-fontpath', function(opts) {

  var config = Object.assign({}, DEFAULT_OPTS, opts || {});

  return function (css) {
    // Loop through each @rule
    css.walkAtRules('font-face', function(rule) {

      // Loop through each decleration in the rule
      rule.walkDecls('font-path', function(decl) {

        // Replace single and double quotes with nothing
        var fontPath = decl.value.replace(/"/g, '').replace(/'/g, ''),
          fonts = [],
          ieHack = false,
          ext = '';

        config.formats.forEach(function(format) {

          if (config.checkFiles) {
            // Best guess at where our fonts might be relative to
            var basePath = css.source.input.file || process.cwd(),
                absoluteFontPath = url$2.parse(path__default.resolve(path__default.dirname(basePath), fontPath) + '.' + format.ext).pathname;

            try {
              // Try to see if the font exists
              fs__default.accessSync(absoluteFontPath, fs__default.F_OK);
            } catch (err) {
              return;
            }
          }

          // Set the ext var
          ext = format.ext;

          if (ext === 'eot' && config.ie8Fix) {
            ieHack = true;
            ext = 'eot?#iefix';
          }

          // Add the font to the font-face decl
          fonts.push('url("' + fontPath + '.' + ext + '") format(\'' + format.type + '\')');
        });

        if (fonts.length > 0) {

          // If the EOT exists, add the fallback
          if (ieHack && config.ie8Fix) {
            decl.cloneBefore({
              prop: 'src',
              value: 'url("' + fontPath + '.eot")'
            });
          }

          // Implode the rest of the fonts
          decl.cloneBefore({
            prop: 'src',
            value: fonts.join(',\n       ')
          });
        }

        // Remove our custom decleration
        decl.remove();

      });

    });
  };
});

var _postcssHexrgba_1_0_0_postcssHexrgba = postcss.plugin('postcss-hexrgba', function () {

    /**
     * Hex to RGB converter
     * @param  {string} hex hexidecimal string without #
     * @return {array} RGB values
     */
    var hexRgb = function(hex){

      // If given shorthand, expand it
      var shorthandCheck = /^([a-f\d])([a-f\d])([a-f\d])$/i;
      hex = hex.replace(shorthandCheck, function(m, r, g, b) {
          return r + r + g + g + b + b;
      });

      // Extract full hex into an array
      var rgbRegex = /^([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
      var rgb = hex
        .replace(/^\s+|\s+$/g, '')
        .match(rgbRegex);

      // Convert it
      return rgb ? [
        parseInt(rgb[1], 16),
        parseInt(rgb[2], 16),
        parseInt(rgb[3], 16)
      ] : false;

    };

    /**
     * CSS rule handler
     * @param  {string} decl CSS delcaration
     */
    var ruleHandler = function(decl, result) {

      var input = decl.value,
          output = input,
          hexes = [];

      // Get the raw hex values out of the decl value and put them in an array
      input.replace(/rgba\(\#(.*?)\,/g, function(a, b){
        hexes.push(b);
      });

      // If there are no hexes in the value, exit
      if (!hexes.length) {
        return;
      }

      // Convert each hex to RGB
      hexes.forEach(function(hex) {
        var rgb = hexRgb(hex);

        // If conversion fails, warn and exit
        if (!rgb) {
          result.warn('not a valid hex', { node: decl });
          return;
        }

        rgb = rgb.toString();

        // Replace hex values in output string
        var matchHex = new RegExp('#' + hex);
        output = output.replace(matchHex, rgb);

      });

      decl.replaceWith({prop: decl.prop, value: output });

    };

    //  Do it!
    return function(css, result) {

      css.walkDecls(function(decl) {

        // Only process rgba declaration values
        if (typeof decl.value === 'undefined' || decl.value.indexOf('rgba') === -1) {
          return;
        }

        ruleHandler(decl, result);

      });

  };
});

var easings = {
    easeInSine:     'cubic-bezier(0.47, 0, 0.745, 0.715)',
    easeOutSine:    'cubic-bezier(0.39, 0.575, 0.565, 1)',
    easeInOutSine:  'cubic-bezier(0.445, 0.05, 0.55, 0.95)',
    easeInQuad:     'cubic-bezier(0.55, 0.085, 0.68, 0.53)',
    easeOutQuad:    'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
    easeInOutQuad:  'cubic-bezier(0.455, 0.03, 0.515, 0.955)',
    easeInCubic:    'cubic-bezier(0.55, 0.055, 0.675, 0.19)',
    easeOutCubic:   'cubic-bezier(0.215, 0.61, 0.355, 1)',
    easeInOutCubic: 'cubic-bezier(0.645, 0.045, 0.355, 1)',
    easeInQuart:    'cubic-bezier(0.895, 0.03, 0.685, 0.22)',
    easeOutQuart:   'cubic-bezier(0.165, 0.84, 0.44, 1)',
    easeInOutQuart: 'cubic-bezier(0.77, 0, 0.175, 1)',
    easeInQuint:    'cubic-bezier(0.755, 0.05, 0.855, 0.06)',
    easeOutQuint:   'cubic-bezier(0.23, 1, 0.32, 1)',
    easeInOutQuint: 'cubic-bezier(0.86, 0, 0.07, 1)',
    easeInExpo:     'cubic-bezier(0.95, 0.05, 0.795, 0.035)',
    easeOutExpo:    'cubic-bezier(0.19, 1, 0.22, 1)',
    easeInOutExpo:  'cubic-bezier(1, 0, 0, 1)',
    easeInCirc:     'cubic-bezier(0.6, 0.04, 0.98, 0.335)',
    easeOutCirc:    'cubic-bezier(0.075, 0.82, 0.165, 1)',
    easeInOutCirc:  'cubic-bezier(0.785, 0.135, 0.15, 0.86)',
    easeInBack:     'cubic-bezier(0.6, -0.28, 0.735, 0.045)',
    easeOutBack:    'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
    easeInOutBack:  'cubic-bezier(0.68, -0.55, 0.265, 1.55)'
};

var toSnake = function (str) {
    return str.replace(/[A-Z]/g, function (letter) {
        return '-' + letter.toLowerCase();
    });
};

var toCamel = function (str) {
    return str.replace(/-[a-z]/g, function (letter) {
        return letter[1].toUpperCase();
    });
};

var camels = Object.keys(easings);
for ( var i$1 = 0; i$1 < camels.length; i$1++ ) {
    var camel = camels[i$1];
    easings[toSnake(camel)] = easings[camel];
}

var _postcssEasings_1_0_1_postcssEasings = postcss.plugin('postcss-easings', function (opts) {
    if ( typeof opts === 'undefined' ) opts = { };

    var locals = { };
    if ( opts.easings ) {
        for ( var name in opts.easings ) {
            if ( !/^ease([\w-]+)$/.test(name) ) {
                throw new Error('Custom easing ' + name + ' has bad name. ' +
                                'Name should start from `ease` and contain ' +
                                'only letters and dashes');
            }
            locals[name] = opts.easings[name];
            if ( name.indexOf('-') !== -1 ) {
                locals[toCamel(name)] = opts.easings[name];
            } else if ( /[A-Z]/.test(name) ) {
                locals[toSnake(name)] = opts.easings[name];
            }
        }
    }

    return function (css) {
        css.walkDecls(function (decl) {
            if (decl.value.indexOf('ease') === -1) return;
            var root = lib(decl.value);
            root.nodes = root.nodes.map(function (node) {
                const value = node.value;
                if (node.type === 'word' && /^ease([\w-]+)$/.test(value)) {
                    node.value = locals[value] || easings[value] || node.value;
                }
                return node;
            });
            decl.value = root.toString();
        });
    };
});

var easings_1 = easings;

_postcssEasings_1_0_1_postcssEasings.easings = easings_1;

var _rgbHex_2_1_0_rgbHex = createCommonjsModule(function (module) {
'use strict';
/* eslint-disable no-mixed-operators */
module.exports = (red, green, blue, alpha) => {
	const isPercent = (red + (alpha || '')).toString().includes('%');

	if (typeof red === 'string') {
		const res = red.match(/(0?\.?\d{1,3})%?\b/g).map(Number);
		// TODO: use destructuring when targeting Node.js 6
		red = res[0];
		green = res[1];
		blue = res[2];
		alpha = res[3];
	} else if (alpha !== undefined) {
		alpha = parseFloat(alpha);
	}

	if (typeof red !== 'number' ||
		typeof green !== 'number' ||
		typeof blue !== 'number' ||
		red > 255 ||
		green > 255 ||
		blue > 255) {
		throw new TypeError('Expected three numbers below 256');
	}

	if (typeof alpha === 'number') {
		if (!isPercent && alpha >= 0 && alpha <= 1) {
			alpha = Math.round(255 * alpha);
		} else if (isPercent && alpha >= 0 && alpha <= 100) {
			alpha = Math.round(255 * alpha / 100);
		} else {
			throw new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);
		}
		alpha = (alpha | 1 << 8).toString(16).slice(1);
	} else {
		alpha = '';
	}

	return ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;
};
});

/**
 * Module dependencies.
 */




/**
 * Calculate the color of a chanel
 * based upon two 0-255 colors and a 0-1 alpha value
 */
function calcChannel(backgroundColor, foregroundColor, alpha) {
  var value = backgroundColor + (foregroundColor - backgroundColor) * alpha;
  return Math.round(value)
}

/**
 * Given a solid rgb background and a rgba foreground color
 * it calculates the color of the values combined into a single rgb array
 * If there is no background color
 *   strips off the alpha value from the foreground
 */
function calculateRGB(backgroundColor, foregroundColor) {
  if (backgroundColor) {
    return [
      calcChannel(backgroundColor[0], foregroundColor[0], foregroundColor[3]),
      calcChannel(backgroundColor[1], foregroundColor[1], foregroundColor[3]),
      calcChannel(backgroundColor[2], foregroundColor[2], foregroundColor[3]),
    ]
  }
  else {
    return [
      foregroundColor[0],
      foregroundColor[1],
      foregroundColor[2],
    ]
  }
}

/**
 * PostCSS plugin to transform rgba() to hexadecimal
 */
var _postcssColorRgbaFallback_3_0_0_postcssColorRgbaFallback = postcss.plugin("postcss-color-rgba-fallback",
function(options) {
  options = options || {};

  var properties = options.properties || [
    "background-color",
    "background",
    "color",
    "border",
    "border-color",
    "outline",
    "outline-color",
  ];

  var backgroundColor = options.backgroundColor || null;

  var oldie = options.oldie;
  if (oldie === true) {
    oldie = [
      "background-color",
      "background",
    ];
  }
  else if (!Array.isArray(oldie)) {
    oldie = false;
  }

  return function(style) {
    style.walkDecls(function(decl) {
      if (!decl.value ||
          decl.value.indexOf("rgba") === -1 ||
          properties.indexOf(decl.prop) === -1
      ) {
        return
      }

      // if previous prop equals current prop
      // no need fallback
      if (
        decl.prev() &&
        decl.prev().prop === decl.prop
      ) {
        return
      }

      var hex;
      var alpha;
      var RGB;
      var value = lib(decl.value).walk(function(node) {
        var nodes = node.nodes;
        if (node.type === "function" && node.value === "rgba") {
          try {
            alpha = parseFloat(nodes[6].value);
            RGB = calculateRGB(backgroundColor, [
              parseInt(nodes[0].value, 10),
              parseInt(nodes[2].value, 10),
              parseInt(nodes[4].value, 10),
              alpha,
            ]);
            hex = _rgbHex_2_1_0_rgbHex.apply(null, RGB);
            node.type = "word";
            node.value = "#" + hex;
          }
          catch (e) {
            return false
          }
          return false
        }
      }).toString();

      if (value !== decl.value) {
        decl.cloneBefore({value: value});

        if (
          oldie && oldie.indexOf(decl.prop) !== -1 &&
          0 < alpha && alpha < 1
        ) {
          hex = "#" + Math.round(alpha * 255).toString(16) + hex;
          var ieFilter = [
            "progid:DXImageTransform.Microsoft.gradient(startColorStr=",
            hex,
            ",endColorStr=",
            hex,
            ")",
          ].join("");
          var gteIE8 = postcss.decl({
            prop: "-ms-filter", value: "\"" + ieFilter + "\"",
          });
          var ltIE8 = postcss.decl({
            prop: "filter", value: ieFilter,
          });

          decl.parent.insertBefore(decl, gteIE8);
          decl.parent.insertBefore(decl, ltIE8);
        }
      }
    });
  }
});

var _postcssOpacity_5_0_0_postcssOpacity = postcss.plugin('postcss-opacity', function(opts) {
  opts = opts || {};
  opts.legacy = opts.legacy || false;

  var PROP = 'opacity';

  return function(css) {

    css.walkRules(function(rule) {
      // Search through props, ignore current and insert whats missing

      var propsToTestInsert = (function(def) {
        return def.concat((opts.legacy) ? [{ prop: 'filter', order: 1 }, { prop: '-moz-opacity', order: 2 }, { prop: '-khtml-opacity', order: 3 }] : []);
      })([{ prop: 'opacity', order: 4 }, { prop: '-ms-filter', order: 0 }]);

      var propsToInsert = [];

      propsToTestInsert.sort(function(a, b) {
        return a.order > b.order;
      }).forEach(function(v) {
        // find if prop based on legacy is found
        var isPropAlreadyPresent = false;
        rule.walkDecls(v.prop, function() {
          isPropAlreadyPresent = true;
        });

        if (!isPropAlreadyPresent) {
          propsToInsert.push(v.prop);
        }
      });

      propsToInsert.forEach(function(addProp) {
        rule.walkDecls(PROP, function(decl) {
          var value = void 0,
            subOne = decl.value,
            subHundred = Math.floor(subOne * 100);

          switch (addProp) {
            case 'opacity':
            case '-moz-opacity':
            case '-khtml-opacity':
              value = subOne;
              break;
            case 'filter':
              value = 'alpha(opacity=' + subHundred + ')';
              break;
            case '-ms-filter':
              value = '"progid:DXImageTransform.Microsoft.Alpha(Opacity=' + subHundred + ')"';
              break;
          }

          if (value) {
            // adds new property only if it's not present yet and we actually found a prop
            rule.insertBefore(decl, { prop: addProp, value: value });
          }
        });
      });
    });

  };
});

var _postcssPseudoelements_5_0_0_postcssPseudoelements = createCommonjsModule(function (module) {
module.exports = postcss.plugin('pseudoelements', (options) => {

  options = options || { single: true };

  var selectors = options.selectors || [
    'before',
    'after',
    'first-letter',
    'first-line'
  ];

  var replacements = new RegExp(':{1,}(' + selectors.join('|') + ')', 'gi');
	var replaceWith = options.single ? ':$1' : '::$1';

  return (css) => {
    css.walkRules((rule) => {
      rule.selector = rule.selector.replace(replacements, replaceWith);
  	});
  };
});
});

var _postcssVmin_3_0_0_postcssVmin = postcss.plugin("postcss-vmin", function (opts) {
    opts = opts || {};

    var REGEX = /(\d*\.?\d+)vmin/ig;

    return function (css) {

      // for each rules, each decl
      css.walkRules(function (rule) {
        rule.walkDecls(function (decl, i) {

          if (decl.value.indexOf('vmin') === -1) { return; }

          if (REGEX.exec(decl.value) !== null)  {
            var value = decl.value.replace(REGEX, function (_, number) {
              return number + 'vm';
            });
            rule.insertBefore(i, decl.clone({ value: value }));
          }

        });
      });

      return css;

    };
});

/*
 * Module dependencies
 */


/**
 * Expose `reduceFunctionCall`
 *
 * @type {Function}
 */
var _reduceFunctionCall_1_0_2_reduceFunctionCall = reduceFunctionCall;

/**
 * Walkthrough all expressions, evaluate them and insert them into the declaration
 *
 * @param {Array} expressions
 * @param {Object} declaration
 */

function reduceFunctionCall(string, functionRE, callback) {
  var call = string;
  return getFunctionCalls(string, functionRE).reduce(function(string, obj) {
    return string.replace(obj.functionIdentifier + "(" + obj.matches.body + ")", evalFunctionCall(obj.matches.body, obj.functionIdentifier, callback, call, functionRE))
  }, string)
}

/**
 * Parses expressions in a value
 *
 * @param {String} value
 * @returns {Array}
 * @api private
 */

function getFunctionCalls(call, functionRE) {
  var expressions = [];

  var fnRE = typeof functionRE === "string" ? new RegExp("\\b(" + functionRE + ")\\(") : functionRE;
  do {
    var searchMatch = fnRE.exec(call);
    if (!searchMatch) {
      return expressions
    }
    if (searchMatch[1] === undefined) {
      throw new Error("Missing the first couple of parenthesis to get the function identifier in " + functionRE)
    }
    var fn = searchMatch[1];
    var startIndex = searchMatch.index;
    var matches = _balancedMatch_0_4_2_balancedMatch("(", ")", call.substring(startIndex));

    if (!matches || matches.start !== searchMatch[0].length - 1) {
      throw new SyntaxError(fn + "(): missing closing ')' in the value '" + call + "'")
    }

    expressions.push({matches: matches, functionIdentifier: fn});
    call = matches.post;
  }
  while (fnRE.test(call))

  return expressions
}

/**
 * Evaluates an expression
 *
 * @param {String} expression
 * @returns {String}
 * @api private
 */

function evalFunctionCall (string, functionIdentifier, callback, call, functionRE) {
  // allow recursivity
  return callback(reduceFunctionCall(string, functionRE, callback), functionIdentifier, call)
}

var Mexp=function(parsed){
		this.value=parsed;

	};

	Mexp.math={
		isDegree:true, //mode of calculator
		acos:function(x){
			return (Mexp.math.isDegree?180/Math.PI*Math.acos(x):Math.acos(x));
		},
		add:function(a,b){
			return a+b;
		},
		asin:function(x){
			return (Mexp.math.isDegree?180/Math.PI*Math.asin(x):Math.asin(x));
		},
		atan:function(x){
			return (Mexp.math.isDegree?180/Math.PI*Math.atan(x):Math.atan(x));
		},
		acosh:function(x){
			return Math.log(x+Math.sqrt(x*x-1));
		},
		asinh:function(x){
			return Math.log(x+Math.sqrt(x*x+1));
		},
		atanh:function(x){
			return Math.log((1+x)/(1-x));
		},
		C:function(n,r){
			var pro=1,other=n-r,choice=r;
			if(choice<other){
			choice=other;
			other=r;
			}
			for(var i=choice+1;i<=n;i++)
				pro*=i;
			return pro/Mexp.math.fact(other);
		},
		changeSign:function(x){
			return -x;
		},
		cos:function(x){
			if(Mexp.math.isDegree)x=Mexp.math.toRadian(x);
			return Math.cos(x);
		},
		cosh:function(x){
			return (Math.pow(Math.E,x)+Math.pow(Math.E,-1*x))/2;
		},
		div:function(a,b){
		return a/b;
		},
		fact:function(n) {
		if(n%1!==0)return "NAN";
			var pro=1;
			for(var i=2;i<=n;i++)
				pro*=i;
			return pro;
		},
		inverse:function(x){
			return 1/x;
		},
		log:function(i){
			return Math.log(i)/Math.log(10);
		},
		mod:function(a,b){
		return a%b;
		},
		mul:function(a,b){
		return a*b;
		},
		P:function(n,r){var pro=1;
			 for(var i=Math.floor(n)-Math.floor(r)+1;i<=Math.floor(n);i++)
					pro*=i;
					return pro;

		},
		Pi:function(low,high,ex){
			var pro=1;
			for(var i=low;i<=high;i++){
				pro*=Number(ex.postfixEval({n:i}));
			}
			return pro;
		},
		pow10x:function(e){
			var x=1;
			while(e--){x*=10;}
			return x;
		},
		sigma:function(low,high,ex){
			var sum=0;
			for(var i=low;i<=high;i++){
				sum+=Number(ex.postfixEval({n:i}));
			}
			return sum;
		},
		sin:function(x){
			if(Mexp.math.isDegree)x=Mexp.math.toRadian(x);
			return Math.sin(x);
		},
		sinh:function(x){
			return (Math.pow(Math.E,x)-Math.pow(Math.E,-1*x))/2;
		},
		sub:function(a,b){
		return a-b;
		},
		tan:function(x){
			if(Mexp.math.isDegree)x=Mexp.math.toRadian(x);
			return Math.tan(x);
		},
		tanh:function(x){
			return Mexp.sinha(x)/Mexp.cosha(x);
		},
		toRadian:function(x){
			return x*Math.PI/180;
		}
	};
	Mexp.exception=function(message){
		this.message=message;
	};
    var math_function=Mexp;

function inc(arr,val){
		for(var i=0;i<arr.length;i++)
			arr[i]+=val;
		return arr;
	}
	var token=['sin','cos','tan','pi','(',')','P','C',
		  'asin','acos','atan','7','8','9','int',
		  'cosh','acosh','ln','^','root','4','5','6','/','!',
		  'tanh','atanh','Mod','1','2','3','*',
		  'sinh','asinh','e','log','0','.','+','-',',','Sigma','n','Pi','pow'];
	var show=['sin','cos','tan','&pi;','(',')','P','C',
		'asin','acos','atan','7','8','9','Int',
		'cosh','acosh',' ln','^','root','4','5','6','&divide;','!',
		'tanh','atanh',' Mod ','1','2','3','&times;',
		'sinh','asinh','e',' log','0','.','+','-',',','&Sigma;','n','&Pi;','pow'];
	var eva=[math_function.math.sin,math_function.math.cos,math_function.math.tan,'PI','(',')',math_function.math.P,math_function.math.C,
		math_function.math.asin,math_function.math.acos,math_function.math.atan,'7','8','9',Math.floor,
		math_function.math.cosh,math_function.math.acosh,Math.log,Math.pow,Math.sqrt,'4','5','6',math_function.math.div,math_function.math.fact,
		math_function.math.tanh,math_function.math.atanh,math_function.math.mod,'1','2','3',math_function.math.mul,
		math_function.math.sinh,math_function.math.asinh,'E',math_function.math.log,'0','.',math_function.math.add,math_function.math.sub,',',math_function.math.sigma,'n',math_function.math.Pi,Math.pow];
	var preced={0:11,1:0,2:3,3:0,4:0,5:0,6:0,7:11,8:11,9:1,10:10,11:0,12:11,13:0};
	var type=[0,0,0,3,4,5,10,10,
		0,0,0,1,1,1,0,
		0,0,0,10,0,1,1,1,2,7,
		0,0,2,1,1,1,2,
		0,0,3,0,1,6,9,9,11,12,13,12,8];
	 /*
	0 : function with syntax function_name(Maths_exp)
	1 : numbers
	2 : binary operators like * / Mod left associate and same precedence
	3 : Math constant values like e,pi,Cruncher ans
	4 : opening bracket
	5 : closing bracket
	6 : decimal
	7 : function with syntax (Math_exp)function_name
	8: function with syntax function_name(Math_exp1,Math_exp2)
	9 : binary operator like +,-
	10: binary operator like P C or ^
	11: ,
	12: function with , seperated three parameters
	13: variable of Sigma function
	 */
	var type0={0:true,1:true,3:true,4:true,6:true,8:true,9:true,12:true,13:true};
	var type1={0:true,1:true,2:true,3:true,4:true,5:true,6:true,7:true,8:true,9:true,10:true,11:true,12:true,13:true};
	var type_1={0:true,3:true,4:true,8:true,12:true,13:true};
	var empty={};
	var type_3={0:true,1:true,3:true,4:true,6:true,8:true,12:true,13:true};
	var type6={1:true};
	var newAr=[[],
			["1","2","3","7","8","9","4","5","6","+","-","*","/","(",")","^","!","P","C","e","0",".",",","n"],
			["pi","ln","Pi"],
			["sin","cos","tan","Del","int","Mod","log","pow"],
			["asin","acos","atan","cosh","root","tanh","sinh"],
			["acosh","atanh","asinh","Sigma"]];
	function match(str1,str2,i,x){
		for(var f=0;f<x;f++){
			if (str1[i+f]!==str2[f])
				return false;
		}
		return true;
	}
	math_function.addToken=function(tokens){
		for(i=0;i<tokens.length;i++){
			x=tokens[i].token.length;
			var temp=-1;

			//newAr is a specially designed data structure in which 1D array at location one of 2d array has all string with length 1 2 with 2 and so on

			if (x<newAr.length)	//match to check if token is really huge and not existing
								//if not checked it will break in next line as undefined index
				for(y=0;y<newAr[x].length;y++){
					if (tokens[i].token===newAr[x][y]){
						temp=token.indexOf(newAr[x][y]);
						break;
					}
				}
			if (temp===-1) {
				token.push(tokens[i].token);
				type.push(tokens[i].type);
				if(newAr.length<=tokens[i].token.length)
					newAr[tokens[i].token.length]=[];
				newAr[tokens[i].token.length].push(tokens[i].token);
				eva.push(tokens[i].value);
				show.push(tokens[i].show);
			}
			else {
				token[temp]=tokens[i].token;
				type[temp]=tokens[i].type;
				eva[temp]=tokens[i].value;
				show[temp]=tokens[i].show;
			}
		}
	};
	math_function.lex=function(inp,tokens){
		'use strict';
		var str=[{type:4,value:"(",show:"(",pre:0}];
		var ptc=[];	//Parenthesis to close at the beginning is after one token
		var inpStr=inp;
		var key;
        var pcounter=0;
		var allowed=type0;
		var bracToClose=0;
		var asterick=empty;
		var prevKey='';
		var i,x,y;
		if(typeof tokens!=="undefined")
			math_function.addToken(tokens);
		var obj={};
		for(i=0;i<inpStr.length;i++){
			if (inpStr[i]==' ') {
				continue;
			}
			key='';
			sec:for(x=(inpStr.length-i>(newAr.length-2)?newAr.length-1:inpStr.length-i);x>0;x--){
				for(y=0;y<newAr[x].length;y++){
					if (match(inpStr,newAr[x][y],i,x)){
						key=newAr[x][y];
						break sec;
					}
				}
			}
			i+=key.length-1;
			if(key===''){
				throw(new math_function.exception("Can't understand after "+inpStr.slice(i)));
			}
			var index=token.indexOf(key);
			var cToken=key;
			var cType=type[index];
			var cEv=eva[index];
			var cPre=preced[cType];
			var	cShow=show[index];
			var pre=str[str.length-1];
			for(j=ptc.length;j--;){	//loop over ptc
				if(ptc[j]===0){
					if([0,2,3,5,9,11,12,13].indexOf(cType)!==-1){
						if(allowed[cType]!==true){
							throw(new math_function.exception(key+" is not allowed after "+prevKey));
						}
						str.push({value:")",type:5,pre:0,show:")"});
						allowed=type1;
						asterick=type_3;
						inc(ptc,-1).pop();
					}
				}
			}
			if(allowed[cType]!==true){
				throw(new math_function.exception(key+" is not allowed after "+prevKey));
			}
			if(asterick[cType]===true){
				cType=2;
				cEv=math_function.math.mul;
				cShow="&times;";
				cPre=3;
				i=i-key.length;
		 	}
			obj={value:cEv,type:cType,pre:cPre,show:cShow};
			if(cType===0){
				allowed=type0;
				asterick=empty;
				inc(ptc,2).push(2);
				str.push(obj);
				str.push({value:"(",type:4,pre:0,show:"("});
			}
			else if(cType===1){
				if(pre.type===1){
					pre.value+=cEv;
					inc(ptc,1);
				}
				else {
					str.push(obj);
				}
				allowed=type1;
				asterick=type_1;
			}
			else if(cType===2){
				allowed=type0;
				asterick=empty;
				inc(ptc,2);
				str.push(obj);
			}
			else if(cType===3){//constant
				str.push(obj);
				allowed=type1;
				asterick=type_3;
			}
			else if(cType===4){
                pcounter+=ptc.length;
                ptc=[];
				bracToClose++;
				allowed=type0;
				asterick=empty;
				str.push(obj);
			}
			else if(cType===5){
				if(!bracToClose){
					throw(new math_function.exception("Closing parenthesis are more than opening one, wait What!!!"));
				}
                while(pcounter--){	//loop over ptc
    						str.push({value:")",type:5,pre:0,show:")"});
    			}
                pcounter=0;
				bracToClose--;
				allowed=type1;
				asterick=type_3;
				str.push(obj);
			}
			else if(cType===6){
				if(pre.hasDec){
					throw(new math_function.exception("Two decimals are not allowed in one number"));
				}
				if(pre.type!==1){
					pre={value:0,type:1,pre:0};	//pre needs to be changed as it will the last value now to be safe in later code
					str.push(pre);
					inc(ptc,-1);
				}
				allowed=type6;
				inc(ptc,1);
				asterick=empty;
				pre.value+=cEv;
				pre.hasDec=true;
			}
			else if(cType===7){
				allowed=type1;
				asterick=type_3;
				inc(ptc,1);
				str.push(obj);
			}
			if(cType===8){
				allowed=type0;
				asterick=empty;
				inc(ptc,4).push(4);
				str.push(obj);
				str.push({value:"(",type:4,pre:0,show:"("});
			}
			else if(cType===9){
				if(pre.type===9){
					if(pre.value===math_function.math.add){
						pre.value=cEv;
						pre.show=cShow;
						inc(ptc,1);
					}
					else if(pre.value===math_function.math.sub&&cShow==='-'){
						pre.value=math_function.math.add;
						pre.show='+';
						inc(ptc,1);
					}
				}
				else if(pre.type!==5&&pre.type!==7&&pre.type!==1&&pre.type!==3&&pre.type!==13){//changesign only when negative is found
					if(cToken==='-'){//do nothing for + token
									//don't add with the above if statement as that will run the else statement of parent if on Ctoken +
						allowed=type0;
						asterick=empty;
						inc(ptc,2).push(2);
						str.push({value:math_function.math.changeSign,type:0,pre:21,show:"-"});
						str.push({value:"(",type:4,pre:0,show:"("});
					}
				}
				else{
					str.push(obj);
					inc(ptc,2);
				}
				allowed=type0;
				asterick=empty;
			}
			else if(cType===10){
				allowed=type0;
				asterick=empty;
				inc(ptc,2);
				str.push(obj);
			}
			else if(cType===11){
				allowed=type0;
				asterick=empty;
				str.push(obj);
			}
			else if(cType===12){
				allowed=type0;
				asterick=empty;
				inc(ptc,6).push(6);
				str.push(obj);
				str.push({value:"(",type:4,pre:0});
			}
			else if(cType===13){
				allowed=type1;
				asterick=type_3;
				str.push(obj);
			}
			inc(ptc,-1);
			prevKey=key;
		}
		for(var j=ptc.length;j--;){	//loop over ptc
			if(ptc[j]===0){

				str.push({value:")",show:")",type:5,pre:3});
				inc(ptc,-1).pop();
			}
		}
		if (allowed[5]!==true) {
			throw(new math_function.exception("complete the expression"));
		}
		while(bracToClose--)
			str.push({value:")",show:")",type:5,pre:3});

		str.push({type:5,value:")",show:")",pre:0});
//        console.log(str);
		return new math_function(str);
	};
    var lexer=math_function;

lexer.prototype.toPostfix = function () {
		'use strict';
		var post=[],elem,popped,prep,pre,ele;
    	var stack=[{value:"(",type:4,pre:0}];
		var arr=this.value;
		for (var i=1; i < arr.length; i++) {
			if(arr[i].type===1||arr[i].type===3||arr[i].type===13){	//if token is number,constant,or n(which is also a special constant in our case)
				if(arr[i].type===1)
					arr[i].value=Number(arr[i].value);
				post.push(arr[i]);
			}
			else if(arr[i].type===4){
				stack.push(arr[i]);
			}
			else if(arr[i].type===5){
				while((popped=stack.pop()).type!==4){
					post.push(popped);
				}
			}
			else if(arr[i].type===11){
				while((popped=stack.pop()).type!==4){
					post.push(popped);
				}
				stack.push(popped);
			}
			else {
				elem=arr[i];
				pre=elem.pre;
				ele=stack[stack.length-1];
				prep=ele.pre;
				var flag=ele.value=='Math.pow'&&elem.value=='Math.pow';
				if(pre>prep)stack.push(elem);
				else {
					while(prep>=pre&&!flag||flag&&pre<prep){
						popped=stack.pop();
						ele=stack[stack.length-1];
						post.push(popped);
						prep=ele.pre;
						flag=elem.value=='Math.pow'&&ele.value=='Math.pow';
					}
					stack.push(elem);
				}
			}
		}
		return new lexer(post);
	};
    var postfix=lexer;

postfix.prototype.postfixEval = function (UserDefined) {
	'use strict';
	UserDefined=UserDefined||{};
	UserDefined.PI=Math.PI;
	UserDefined.E=Math.E;
	var stack=[],pop1,pop2,pop3;
	var disp=[];
	var temp='';
	var arr=this.value;
	var bool=(typeof UserDefined.n!=="undefined");
	for(var i=0;i<arr.length;i++){
		if(arr[i].type===1){
			stack.push({value:arr[i].value,type:1});
		}
		else if(arr[i].type===3){
			stack.push({value:UserDefined[arr[i].value],type:1});
		}
		else if(arr[i].type===0){
			if(typeof stack[stack.length-1].type==="undefined"){
				stack[stack.length-1].value.push(arr[i]);
			}
			else stack[stack.length-1].value=arr[i].value(stack[stack.length-1].value);
		}
		else if(arr[i].type===7){
			if(typeof stack[stack.length-1].type==="undefined"){
				stack[stack.length-1].value.push(arr[i]);
			}
			else stack[stack.length-1].value=arr[i].value(stack[stack.length-1].value);
		}
		else if(arr[i].type===8){
			pop1=stack.pop();
			pop2=stack.pop();
			stack.push({type:1,value:arr[i].value(pop2.value,pop1.value)});
		}
		else if(arr[i].type===10){
			pop1=stack.pop();
			pop2=stack.pop();
			if(typeof pop2.type==="undefined"){
				pop2.value=pop2.concat(pop1);
				pop2.value.push(arr[i]);
				stack.push(pop2);
			}
			else if (typeof pop1.type==="undefined") {
				pop1.unshift(pop2);
				pop1.push(arr[i]);
				stack.push(pop1);
			}
			else{
				stack.push({type:1,value:arr[i].value(pop2.value,pop1.value)});
            }
		}
		else if(arr[i].type===2||arr[i].type===9){
			pop1=stack.pop();
			pop2=stack.pop();
			if(typeof pop2.type==="undefined"){
                console.log(pop2);
				pop2=pop2.concat(pop1);
				pop2.push(arr[i]);
				stack.push(pop2);
			}
			else if (typeof pop1.type==="undefined") {
				pop1.unshift(pop2);
				pop1.push(arr[i]);
				stack.push(pop1);
			}
			else{
				stack.push({type:1,value:arr[i].value(pop2.value,pop1.value)});
			}
		}
		else if(arr[i].type===12){
			pop1=stack.pop();
			if (typeof pop1.type!=="undefined") {
				pop1=[pop1];
			}
			pop2=stack.pop();
			pop3=stack.pop();
			stack.push({type:1,value:arr[i].value(pop3.value,pop2.value,new postfix(pop1))});
		}
		else if(arr[i].type===13){
			if(bool){
				stack.push({value:UserDefined[arr[i].value],type:3});
			}
			else stack.push([arr[i]]);
		}
	}
	if (stack.length>1) {
		throw(new postfix.exception("Uncaught Syntax error"));
	}
	return stack[0].value>1000000000000000?"Infinity":parseFloat(stack[0].value.toFixed(15));
};
postfix.eval=function(str,tokens,obj){
	if (typeof tokens==="undefined") {
		return this.lex(str).toPostfix().postfixEval();
	}
	else if (typeof obj==="undefined") {
		if (typeof tokens.length!=="undefined") 
			return this.lex(str,tokens).toPostfix().postfixEval();
		else
			return this.lex(str).toPostfix().postfixEval(tokens);
	}
	else
		return this.lex(str,tokens).toPostfix().postfixEval(obj);
};
var postfix_evaluator=postfix;

postfix_evaluator.prototype.formulaEval = function () {
	"use strict";
	var stack=[],pop1,pop2,pop3;
	var disp=[];
	var temp='';
	var arr=this.value;
	for(var i=0;i<arr.length;i++){
		if(arr[i].type===1||arr[i].type===3){
			disp.push({value:arr[i].type===3?arr[i].show:arr[i].value,type:1});
		}
		else if(arr[i].type===13){
			disp.push({value:arr[i].show,type:1});
		}
		else if(arr[i].type===0){
			disp[disp.length-1]={value:arr[i].show+(arr[i].show!="-"?"(":"")+disp[disp.length-1].value+(arr[i].show!="-"?")":""),type:0};
		}
		else if(arr[i].type===7){
			disp[disp.length-1]={value:(disp[disp.length-1].type!=1?"(":"")+disp[disp.length-1].value+(disp[disp.length-1].type!=1?")":"")+arr[i].show,type:7};
		}
		else if(arr[i].type===10){
			pop1=disp.pop();
			pop2=disp.pop();
			if(arr[i].show==='P'||arr[i].show==='C')disp.push({value:"<sup>"+pop2.value+"</sup>"+arr[i].show+"<sub>"+pop1.value+"</sub>",type:10});
			else disp.push({value:(pop2.type!=1?"(":"")+pop2.value+(pop2.type!=1?")":"")+"<sup>"+pop1.value+"</sup>",type:1});
		}
		else if(arr[i].type===2||arr[i].type===9){
			pop1=disp.pop();
			pop2=disp.pop();
			disp.push({value:(pop2.type!=1?"(":"")+pop2.value+(pop2.type!=1?")":"")+arr[i].show+(pop1.type!=1?"(":"")+pop1.value+(pop1.type!=1?")":""),type:arr[i].type});
		}
		else if(arr[i].type===12){
			pop1=disp.pop();
			pop2=disp.pop();
			pop3=disp.pop();
			disp.push({value:arr[i].show+"("+pop3.value+","+pop2.value+","+pop1.value+")",type:12});
		}
	}
	return disp[0].value;
};
var formula_evaluator=postfix_evaluator;

/**
 * Module dependencies
 */




/**
 * Constantes
 */
var MAX_STACK = 100; // should be enough for a single calc()...
var NESTED_CALC_RE = /(\+|\-|\*|\\|[^a-z]|)(\s*)(\()/g;

/**
 * Global variables
 */
var stack;

/**
 * Expose reduceCSSCalc plugin
 *
 * @type {Function}
 */
var _reduceCssCalc_1_3_0_reduceCssCalc = reduceCSSCalc;

/**
 * Reduce CSS calc() in a string, whenever it's possible
 *
 * @param {String} value css input
 */
function reduceCSSCalc(value, decimalPrecision) {
  stack = 0;
  decimalPrecision = Math.pow(10, decimalPrecision === undefined ? 5 : decimalPrecision);

  // Allow calc() on multiple lines
  value = value.replace(/\n+/g, " ");

  /**
   * Evaluates an expression
   *
   * @param {String} expression
   * @returns {String}
   */
  function evaluateExpression (expression, functionIdentifier, call) {
    if (stack++ > MAX_STACK) {
      stack = 0;
      throw new Error("Call stack overflow for " + call)
    }

    if (expression === "") {
      throw new Error(functionIdentifier + "(): '" + call + "' must contain a non-whitespace string")
    }

    expression = evaluateNestedExpression(expression, call);

    var units = getUnitsInExpression(expression);

    // If the expression contains multiple units or CSS variables,
    // then let the expression be (i.e. browser calc())
    if (units.length > 1 || expression.indexOf("var(") > -1) {
      return functionIdentifier + "(" + expression + ")"
    }

    var unit = units[0] || "";

    if (unit === "%") {
      // Convert percentages to numbers, to handle expressions like: 50% * 50% (will become: 25%):
      // console.log(expression)
      expression = expression.replace(/\b[0-9\.]+%/g, function(percent) {
        return parseFloat(percent.slice(0, -1)) * 0.01
      });
    }

    // Remove units in expression:
    var toEvaluate = expression.replace(new RegExp(unit, "gi"), "");
    var result;

    try {
      result = formula_evaluator.eval(toEvaluate);
    }
    catch (e) {
      return functionIdentifier + "(" + expression + ")"
    }

    // Transform back to a percentage result:
    if (unit === "%") {
      result *= 100;
    }

    // adjust rounding shit
    // (0.1 * 0.2 === 0.020000000000000004)
    if (functionIdentifier.length || unit === "%") {
      result = Math.round(result * decimalPrecision) / decimalPrecision;
    }

    // Add unit
    result += unit;

    return result
  }

  /**
   * Evaluates nested expressions
   *
   * @param {String} expression
   * @returns {String}
   */
  function evaluateNestedExpression(expression, call) {
    // Remove the calc part from nested expressions to ensure
    // better browser compatibility
    expression = expression.replace(/((?:\-[a-z]+\-)?calc)/g, "");
    var evaluatedPart = "";
    var nonEvaluatedPart = expression;
    var matches;
    while ((matches = NESTED_CALC_RE.exec(nonEvaluatedPart))) {
      if (matches[0].index > 0) {
        evaluatedPart += nonEvaluatedPart.substring(0, matches[0].index);
      }

      var balancedExpr = _balancedMatch_0_4_2_balancedMatch("(", ")", nonEvaluatedPart.substring([0].index));
      if (balancedExpr.body === "") {
        throw new Error("'" + expression + "' must contain a non-whitespace string")
      }

      var evaluated = evaluateExpression(balancedExpr.body, "", call);

      evaluatedPart += balancedExpr.pre + evaluated;
      nonEvaluatedPart = balancedExpr.post;
    }

    return evaluatedPart + nonEvaluatedPart
  }

  return _reduceFunctionCall_1_0_2_reduceFunctionCall(value, /((?:\-[a-z]+\-)?calc)\(/, evaluateExpression)
}

/**
 * Checks what units are used in an expression
 *
 * @param {String} expression
 * @returns {Array}
 */

function getUnitsInExpression(expression) {
  var uniqueUnits = [];
  var uniqueLowerCaseUnits = [];
  var unitRegEx = /[\.0-9]([%a-z]+)/gi;
  var matches = unitRegEx.exec(expression);

  while (matches) {
    if (!matches || !matches[1]) {
      continue
    }

    if (uniqueLowerCaseUnits.indexOf(matches[1].toLowerCase()) === -1) {
      uniqueUnits.push(matches[1]);
      uniqueLowerCaseUnits.push(matches[1].toLowerCase());
    }

    matches = unitRegEx.exec(expression);
  }

  return uniqueUnits
}

var REGEX = /(\d*\.?\d+)rem/ig;
var BASE_FONT_SIZE = 16;
var PROPS = /^(background-size|border-image|border-radius|box-shadow|clip-path|column|grid|mask|object|perspective|scroll|shape|size|stroke|transform)/;
var VALUES = /(calc|gradient)\(/;

var pixrem = postcss.plugin('pixrem', function (opts) {

  opts = opts || {};

  return function (css, result) {

    var options = {};
    options.rootValue     = (opts.rootValue     !== undefined) ? opts.rootValue     : BASE_FONT_SIZE;
    options.replace       = (opts.replace       !== undefined) ? opts.replace       : false;
    options.atrules       = (opts.atrules       !== undefined) ? opts.atrules       : false;
    options.html          = (opts.html          !== undefined) ? opts.html          : true;
    options.unitPrecision = (opts.unitPrecision !== undefined) ? opts.unitPrecision : 3;
    options.browsers      = (opts.browsers      !== undefined) ? opts.browsers      : 'ie <= 8';
    options.browsers      = _browserslist_2_11_3_browserslist(options.browsers);

    var isIElte8, isIEgte9, isIE9_10;
    if (detectBrowser(options.browsers, 'ie <= 8')) {
      isIElte8 = true;
    }
    if (detectBrowser(options.browsers, 'ie >= 9')) {
      isIEgte9 = true;
    }
    if (detectBrowser(options.browsers, 'ie 9, ie 10')) {
      isIE9_10 = true;
    }
    // no IE versions needed, skip
    if (!isIElte8 && !isIEgte9 && !isIE9_10) { return; }

    if (options.html) {
      // First, check root font-size
      css.walkRules(function (rule) {
        if (rule.parent && rule.parent.type === 'atrule') { return; }
        if (/^(html|:root)$/.test(rule.selectors)) {
          rule.walkDecls(function (decl) {
            if (decl.prop === 'font-size') {
              options.rootValue = decl.value;
            } else if (decl.prop === 'font' && decl.value.match(/\d/)) {
              options.rootValue = decl.value.match(/.*?([\d\.]*(em|px|rem|%|pt|pc))/)[1];
            }
          });
        }
      });
    }

    css.walkRules(function (rule) {

      // if options.at-rules is false AND it's not IE9-10: skip @rules
      if (!options.atrules && !isIE9_10) {
        if (rule.type === 'atrule' || (rule.parent && rule.parent.type === 'atrule')) { return; }
      }

      var isPseudoElement = (rule.selector.search(/:(after|before)/gi) !== -1);

      rule.each(function (decl, i) {

        if (decl.type !== 'decl') { return; }

        var value = decl.value;

        if (value.indexOf('rem') !== -1) {

          var prop = vendor_1.unprefixed(decl.prop);
          var isFontShorthand = (prop === 'font');
          var isSpecialCaseIE9_10 = (isIE9_10 && (isPseudoElement || isFontShorthand));
          var isUseless = (VALUES.test(value) || PROPS.test(prop));
          var isNotUseless = ((isIElte8 || !isIE9_10) && !isUseless);

          if ( isSpecialCaseIE9_10 || isNotUseless ) {

            value = value.replace(REGEX, function ($1) {
              return rounded(parseFloat($1) * toPx(options.rootValue, decl, result), options.unitPrecision) + 'px';
            });

            if (options.replace) {
              decl.value = value;
            } else {
              var clone = decl.clone({ value: value });
              if (decl.raws.before) {
                clone.raws.before = decl.raws.before;
                decl.raws.before = reduceLineBreaks(decl.raws.before);
              }
              rule.insertBefore(i, clone);
            }

          }

        }

      });

    });

  };

});

// Detect if one browser from the browserQuery is in browsers
function detectBrowser (browsers, browserQuery) {
  var b = false;
  browserQuery = _browserslist_2_11_3_browserslist(browserQuery);
  for (var i = 0; i < browsers.length; i++) {
    for (var j = 0; j < browserQuery.length; j++) {
      if (browsers[i] === browserQuery[j]) {
        b = true;
        break;
      }
    }
    if (b) { break; }
  }
  return b;
}

// Return a unitless pixel value from any root font-size value.
function toPx (value, decl, result) {
  value = (typeof value === 'string' && value.indexOf('calc(') !== -1) ? _reduceCssCalc_1_3_0_reduceCssCalc(value) : value;
  var parts = /^(\d*\.?\d+)([a-zA-Z%]*)$/.exec(value);
  if (parts !== null) {
    var number = parts[1];
    var unit   = parts[2];

    if (unit === 'px' || unit === '') {
      return parseFloat(number);
    }
    else if (unit === 'em' || unit === 'rem') {
      return parseFloat(number) * BASE_FONT_SIZE;
    }
    else if (unit === '%') {
      return (parseFloat(number) / 100) * BASE_FONT_SIZE;
    } else {
      // other units: vw, ex, ch, etc...
      result.warn('Unit cannot be used for conversion, so 16px is used.');
      return BASE_FONT_SIZE;
    }
  } else {
    throw decl.error('Root font-size is invalid', {plugin: 'pixrem'});
  }
}

// Reduce line breaks
function reduceLineBreaks (value) {
  return value.replace(/(\r*\n|\r)+/g, '$1');
}

// Round values based on precision
// rounded down to match webkit and opera behavior:
// http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
function rounded (value, precision) {
  precision = Math.pow(10, precision);
  return Math.floor(value * precision) / precision;
}

var _postcssWillChange_2_0_0_postcssWillChange = postcss.plugin('postcss-will-change', function () {
    return function (css) {
        css.walkDecls('will-change', function (decl) {
            var already = decl.parent.some(function (i) {
                return i.type === 'decl' && i.prop === 'backface-visibility';
            });
            if ( already ) return;
            decl.cloneBefore({ prop: 'backface-visibility', value: 'hidden' });
        });
    };
});

var lodash = createCommonjsModule(function (module, exports) {
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.5';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    return key == '__proto__'
      ? undefined
      : object[key];
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path$$1) {
      path$$1 = castPath(path$$1, object);

      var index = 0,
          length = path$$1.length;

      while (object != null && index < length) {
        object = object[toKey(path$$1[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path$$1, args) {
      path$$1 = castPath(path$$1, object);
      object = parent(object, path$$1);
      var func = object == null ? object : object[toKey(last(path$$1))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path$$1, srcValue) {
      if (isKey(path$$1) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path$$1), srcValue);
      }
      return function(object) {
        var objValue = get(object, path$$1);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path$$1)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path$$1) {
        return hasIn(object, path$$1);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path$$1 = paths[index],
            value = baseGet(object, path$$1);

        if (predicate(value, path$$1)) {
          baseSet(result, castPath(path$$1, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path$$1) {
      return function(object) {
        return baseGet(object, path$$1);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path$$1, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path$$1 = castPath(path$$1, object);

      var index = -1,
          length = path$$1.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path$$1[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path$$1[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path$$1) {
      path$$1 = castPath(path$$1, object);
      object = parent(object, path$$1);
      return object == null || delete object[toKey(last(path$$1))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path$$1, updater, customizer) {
      return baseSet(object, path$$1, updater(baseGet(object, path$$1)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path$$1, hasFunc) {
      path$$1 = castPath(path$$1, object);

      var index = -1,
          length = path$$1.length,
          result = false;

      while (++index < length) {
        var key = toKey(path$$1[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path$$1) {
      return path$$1.length < 2 ? object : baseGet(object, baseSlice(path$$1, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path$$1, args) {
      var index = -1,
          isFunc = typeof path$$1 == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path$$1, value, args) : baseInvoke(value, path$$1, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path$$1, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path$$1);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path$$1) {
      return object != null && hasPath(object, path$$1, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path$$1) {
      return object != null && hasPath(object, path$$1, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path$$1) {
        path$$1 = castPath(path$$1, object);
        isDeep || (isDeep = path$$1.length > 1);
        return path$$1;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path$$1) {
        return predicate(value, path$$1[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path$$1, defaultValue) {
      path$$1 = castPath(path$$1, object);

      var index = -1,
          length = path$$1.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path$$1[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path$$1, value) {
      return object == null ? object : baseSet(object, path$$1, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path$$1, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path$$1, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path$$1) {
      return object == null ? true : baseUnset(object, path$$1);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path$$1, updater) {
      return object == null ? object : baseUpdate(object, path$$1, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path$$1, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path$$1, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path$$1, srcValue) {
      return baseMatchesProperty(path$$1, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path$$1, args) {
      return function(object) {
        return baseInvoke(object, path$$1, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path$$1) {
        return baseInvoke(object, path$$1, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path$$1) {
      return isKey(path$$1) ? baseProperty(toKey(path$$1)) : basePropertyDeep(path$$1);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path$$1) {
        return object == null ? undefined : baseGet(object, path$$1);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path$$1, args) {
      if (typeof path$$1 == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path$$1, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof undefined == 'function' && typeof undefined.amd == 'object' && undefined.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    undefined(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(commonjsGlobal));
});

const isSupported = process.platform !== 'win32' || process.env.CI || process.env.TERM === 'xterm-256color';

const main = {
	info: chalk.blue('ℹ'),
	success: chalk.green('✔'),
	warning: chalk.yellow('⚠'),
	error: chalk.red('✖')
};

const fallbacks = {
	info: chalk.blue('i'),
	success: chalk.green('√'),
	warning: chalk.yellow('‼'),
	error: chalk.red('×')
};

var _logSymbols_2_2_0_logSymbols = isSupported ? main : fallbacks;

var getLocation = function(message) {
  var messageNode = message.node;

  var location = {
    line: message.line,
    column: message.column,
  };

  var messageInput = lodash.get(messageNode, 'source.input');

  if (!messageInput) return location;

  var originLocation = messageInput.origin && messageInput.origin(message.line, message.column);
  if (originLocation) return originLocation

  location.file = messageInput.file || messageInput.id;
  return location;
};

var util$3 = {
	getLocation: getLocation
};

var formatter = function(opts) {
  var options = opts || {};
  var sortByPosition = (typeof options.sortByPosition !== 'undefined') ? options.sortByPosition : true;
  var positionless = options.positionless || 'first';

  return function(input) {
    var messages = input.messages;
    var source = input.source;

    if (!messages.length) return '';

    var orderedMessages = lodash.sortBy(
      messages,
      function(m) {
        if (!m.line) return 1;
        if (positionless === 'any') return 1;
        if (positionless === 'first') return 2;
        if (positionless === 'last') return 0;
      },
      function(m) {
        if (!sortByPosition) return 1;
        return m.line;
      },
      function(m) {
        if (!sortByPosition) return 1;
        return m.column;
      }
    );

    var output = '\n';

    if (source) {
      output += chalk.bold.underline(logFrom(source)) + '\n';
    }

    orderedMessages.forEach(function(w) {
      output += messageToString(w) + '\n';
    });

    return output;

    function messageToString(message) {
      var location = util$3.getLocation(message);
      var str = '';

      if (location.line) {
        str += chalk.bold(location.line);
      }

      if (location.column) {
        str += chalk.bold(':' + location.column);
      }

      if (location.line || location.column) {
        str += '\t';
      }

      if (!options.noIcon && message.type === 'warning') {
        str += chalk.yellow(_logSymbols_2_2_0_logSymbols.warning + '  ');
      }

      str += message.text;
      if (!options.noPlugin) {
        str += chalk.yellow(' [' + message.plugin + ']');
      }
      return str;
    }

    function logFrom(fromValue) {
      if (fromValue.charAt(0) === '<') return fromValue;
      return path__default.relative(process.cwd(), fromValue).split(path__default.sep).join('/');
    }
  };
};

var reporter = function(opts) {
  var options = opts || {};

  var formatter$$1 = options.formatter || formatter({
    sortByPosition: (typeof options.sortByPosition !== 'undefined') ? options.sortByPosition : true,
    positionless: options.positionless || 'first',
    noIcon: options.noIcon,
    noPlugin: options.noPlugin,
  });

  var pluginFilter;
  if (!options.plugins) {
    // Every plugin
    pluginFilter = function() { return true; };
  } else if (options.plugins.every(function(plugin) { return plugin[0] === '!'; })) {
    // Blacklist
    pluginFilter = function(message) {
      return options.plugins.indexOf('!' + message.plugin) === -1;
    };
  } else {
    // Whitelist
    pluginFilter = function(message) {
      return options.plugins.indexOf(message.plugin) !== -1;
    };
  }

  var messageFilter = options.filter || function(message) { return (message.type === 'warning'); };

  return function(css, result) {
    var messagesToLog = result.messages
      .filter(pluginFilter)
      .filter(messageFilter);

    var resultSource = (!result.root.source) ? ''
      : result.root.source.input.file || result.root.source.input.id;

    var sourceGroupedMessages = lodash.groupBy(messagesToLog, function(message) {
      return util$3.getLocation(message).file || resultSource;
    });

    var report = '';
    lodash.forOwn(sourceGroupedMessages, function(messages, source) {
      report += formatter$$1({
        messages: messages,
        source: source,
      });
    });

    if (options.clearReportedMessages) {
      result.messages = lodash.difference(result.messages, messagesToLog);
    }

    if (options.clearAllMessages) {
      var messagesToClear = result.messages.filter(pluginFilter);
      result.messages = lodash.difference(result.messages, messagesToClear);
    }


    if (!report) return;

    console.log(report);

    if (options.throwError && shouldThrowError()) {
      throw new Error(chalk.red.bold('\n** postcss-reporter: warnings or errors were found **'));
    }

    function shouldThrowError() {
      return (
        messagesToLog.length
        && messagesToLog.some(function(message) {
          return message.type === 'warning' || message.type === 'error';
        })
      );
    }
  };
};

var _postcssReporter_5_0_0_postcssReporter = postcss.plugin('postcss-reporter', reporter);

var _laggard_2_0_1_laggard = createCommonjsModule(function (module) {
'use strict';



const PLUGINS = [
  {
    option: 'rgba',
    module: _postcssColorRgbaFallback_3_0_0_postcssColorRgbaFallback
  },
  {
    option: 'opacity',
    module: _postcssOpacity_5_0_0_postcssOpacity
  },
  {
    option: 'pseudo',
    module: _postcssPseudoelements_5_0_0_postcssPseudoelements
  },
  {
    option: 'vmin',
    module: _postcssVmin_3_0_0_postcssVmin
  },
  {
    option: 'pixrem',
    module: pixrem
  },
  {
    option: 'willchange',
    module: _postcssWillChange_2_0_0_postcssWillChange
  },
  {
    option: 'reporter',
    module: _postcssReporter_5_0_0_postcssReporter
  },
  ],
  DEFAULTS = {
    rgba: true,
    opacity: true,
    pseudo: true,
    vmin: true,
    pixrem: true,
    willchange: true,
    reporter: false
  };

// Export PostCSS bundle
module.exports = postcss.plugin('laggard', options => {
  options = options || {};

  let config = Object.assign({}, DEFAULTS, options),
    bundle = postcss();

  PLUGINS.forEach(plugin => {
    config[plugin.option] && bundle.use(plugin.module);
  });

  return bundle;
});
});

var list$2 = postcss.list;

var utils$3 = {

    /**
     * Throw special error, to tell beniary,
     * that this error is from Autoprefixer.
     */
    error: function error(text) {
        var err = new Error(text);
        err.autoprefixer = true;
        throw err;
    },


    /**
     * Return array, that doesn’t contain duplicates.
     */
    uniq: function uniq(array) {
        var filtered = [];
        for (var _iterator = array, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var i = _ref;

            if (filtered.indexOf(i) === -1) {
                filtered.push(i);
            }
        }
        return filtered;
    },


    /**
     * Return "-webkit-" on "-webkit- old"
     */
    removeNote: function removeNote(string) {
        if (string.indexOf(' ') === -1) {
            return string;
        }

        return string.split(' ')[0];
    },


    /**
     * Escape RegExp symbols
     */
    escapeRegexp: function escapeRegexp(string) {
        return string.replace(/[.?*+\^\$\[\]\\(){}|\-]/g, '\\$&');
    },


    /**
     * Return regexp to check, that CSS string contain word
     */
    regexp: function regexp(word) {
        var escape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (escape) {
            word = this.escapeRegexp(word);
        }
        return new RegExp('(^|[\\s,(])(' + word + '($|[\\s(,]))', 'gi');
    },


    /**
     * Change comma list
     */
    editList: function editList(value, callback) {
        var origin = list$2.comma(value);
        var changed = callback(origin, []);

        if (origin === changed) {
            return value;
        }

        var join = value.match(/,\s*/);
        join = join ? join[0] : ', ';
        return changed.join(join);
    }
};

function _classCallCheck$55(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var Browsers$2 = function () {

    /**
     * Return all prefixes for default browser data
     */
    Browsers.prefixes = function prefixes() {
        if (this.prefixesCache) {
            return this.prefixesCache;
        }

        var data = unpacker.agents;

        this.prefixesCache = [];
        for (var name in data) {
            this.prefixesCache.push('-' + data[name].prefix + '-');
        }

        this.prefixesCache = utils$3.uniq(this.prefixesCache).sort(function (a, b) {
            return b.length - a.length;
        });

        return this.prefixesCache;
    };

    /**
     * Check is value contain any possibe prefix
     */


    Browsers.withPrefix = function withPrefix(value) {
        if (!this.prefixesRegexp) {
            this.prefixesRegexp = new RegExp(this.prefixes().join('|'));
        }

        return this.prefixesRegexp.test(value);
    };

    function Browsers(data, requirements, options, stats) {
        _classCallCheck$55(this, Browsers);

        this.data = data;
        this.options = options || {};
        this.stats = stats;
        this.selected = this.parse(requirements);
    }

    /**
     * Return browsers selected by requirements
     */


    Browsers.prototype.parse = function parse(requirements) {
        return _browserslist_2_11_3_browserslist(requirements, {
            stats: this.stats,
            path: this.options.from,
            env: this.options.env
        });
    };

    /**
     * Return prefix for selected browser
     */


    Browsers.prototype.prefix = function prefix(browser) {
        var _browser$split = browser.split(' '),
            name = _browser$split[0],
            version = _browser$split[1];

        var data = this.data[name];

        var prefix = data.prefix_exceptions && data.prefix_exceptions[version];
        if (!prefix) {
            prefix = data.prefix;
        }
        return '-' + prefix + '-';
    };

    /**
     * Is browser is selected by requirements
     */


    Browsers.prototype.isSelected = function isSelected(browser) {
        return this.selected.indexOf(browser) !== -1;
    };

    return Browsers;
}();

var browsers$5 = Browsers$2;

var _typeof$3 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck$58(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var vendor$3 = postcss.vendor;

/**
 * Recursivly clone objects
 */
function _clone$1(obj, parent) {
    var cloned = new obj.constructor();

    for (var _iterator = Object.keys(obj || {}), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var i = _ref;

        var value = obj[i];
        if (i === 'parent' && (typeof value === 'undefined' ? 'undefined' : _typeof$3(value)) === 'object') {
            if (parent) {
                cloned[i] = parent;
            }
        } else if (i === 'source' || i === null) {
            cloned[i] = value;
        } else if (value instanceof Array) {
            cloned[i] = value.map(function (x) {
                return _clone$1(x, cloned);
            });
        } else if (i !== '_autoprefixerPrefix' && i !== '_autoprefixerValues') {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof$3(value)) === 'object' && value !== null) {
                value = _clone$1(value, cloned);
            }
            cloned[i] = value;
        }
    }

    return cloned;
}

var Prefixer$2 = function () {

    /**
     * Add hack to selected names
     */
    Prefixer.hack = function hack(klass) {
        var _this = this;

        if (!this.hacks) {
            this.hacks = {};
        }
        return klass.names.map(function (name) {
            _this.hacks[name] = klass;
            return _this.hacks[name];
        });
    };

    /**
     * Load hacks for some names
     */


    Prefixer.load = function load(name, prefixes, all) {
        var Klass = this.hacks && this.hacks[name];
        if (Klass) {
            return new Klass(name, prefixes, all);
        } else {
            return new this(name, prefixes, all);
        }
    };

    /**
     * Clone node and clean autprefixer custom caches
     */


    Prefixer.clone = function clone(node, overrides) {
        var cloned = _clone$1(node);
        for (var name in overrides) {
            cloned[name] = overrides[name];
        }
        return cloned;
    };

    function Prefixer(name, prefixes, all) {
        _classCallCheck$58(this, Prefixer);

        this.name = name;
        this.prefixes = prefixes;
        this.all = all;
    }

    /**
     * Find prefix in node parents
     */


    Prefixer.prototype.parentPrefix = function parentPrefix(node) {
        var prefix = void 0;

        if (typeof node._autoprefixerPrefix !== 'undefined') {
            prefix = node._autoprefixerPrefix;
        } else if (node.type === 'decl' && node.prop[0] === '-') {
            prefix = vendor$3.prefix(node.prop);
        } else if (node.type === 'root') {
            prefix = false;
        } else if (node.type === 'rule' && node.selector.indexOf(':-') !== -1 && /:(-\w+-)/.test(node.selector)) {
            prefix = node.selector.match(/:(-\w+-)/)[1];
        } else if (node.type === 'atrule' && node.name[0] === '-') {
            prefix = vendor$3.prefix(node.name);
        } else {
            prefix = this.parentPrefix(node.parent);
        }

        if (browsers$5.prefixes().indexOf(prefix) === -1) {
            prefix = false;
        }

        node._autoprefixerPrefix = prefix;

        return node._autoprefixerPrefix;
    };

    /**
     * Clone node with prefixes
     */


    Prefixer.prototype.process = function process(node, result) {
        if (!this.check(node)) {
            return undefined;
        }

        var parent = this.parentPrefix(node);

        var prefixes = this.prefixes.filter(function (prefix) {
            return !parent || parent === utils$3.removeNote(prefix);
        });

        var added = [];
        for (var _iterator2 = prefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var prefix = _ref2;

            if (this.add(node, prefix, added.concat([prefix]), result)) {
                added.push(prefix);
            }
        }

        return added;
    };

    /**
     * Shortcut for Prefixer.clone
     */


    Prefixer.prototype.clone = function clone(node, overrides) {
        return Prefixer.clone(node, overrides);
    };

    return Prefixer;
}();

var prefixer$2 = Prefixer$2;

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$57(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$47(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$47(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }





var Declaration$2 = function (_Prefixer) {
    _inherits$47(Declaration, _Prefixer);

    function Declaration() {
        _classCallCheck$57(this, Declaration);

        return _possibleConstructorReturn$47(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Always true, because we already get prefixer by property name
     */
    Declaration.prototype.check = function check() /* decl */{
        return true;
    };

    /**
     * Return prefixed version of property
     */


    Declaration.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + prop;
    };

    /**
     * Return unprefixed version of property
     */


    Declaration.prototype.normalize = function normalize(prop) {
        return prop;
    };

    /**
     * Check `value`, that it contain other prefixes, rather than `prefix`
     */


    Declaration.prototype.otherPrefixes = function otherPrefixes(value, prefix) {
        for (var _iterator = browsers$5.prefixes(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var other = _ref;

            if (other === prefix) {
                continue;
            }
            if (value.indexOf(other) !== -1) {
                return true;
            }
        }
        return false;
    };

    /**
     * Set prefix to declaration
     */


    Declaration.prototype.set = function set(decl, prefix) {
        decl.prop = this.prefixed(decl.prop, prefix);
        return decl;
    };

    /**
     * Should we use visual cascade for prefixes
     */


    Declaration.prototype.needCascade = function needCascade(decl) {
        if (!decl._autoprefixerCascade) {
            decl._autoprefixerCascade = this.all.options.cascade !== false && decl.raw('before').indexOf('\n') !== -1;
        }
        return decl._autoprefixerCascade;
    };

    /**
     * Return maximum length of possible prefixed property
     */


    Declaration.prototype.maxPrefixed = function maxPrefixed(prefixes, decl) {
        if (decl._autoprefixerMax) {
            return decl._autoprefixerMax;
        }

        var max = 0;
        for (var _iterator2 = prefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var prefix = _ref2;

            prefix = utils$3.removeNote(prefix);
            if (prefix.length > max) {
                max = prefix.length;
            }
        }
        decl._autoprefixerMax = max;

        return decl._autoprefixerMax;
    };

    /**
     * Calculate indentation to create visual cascade
     */


    Declaration.prototype.calcBefore = function calcBefore(prefixes, decl) {
        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

        var max = this.maxPrefixed(prefixes, decl);
        var diff = max - utils$3.removeNote(prefix).length;

        var before = decl.raw('before');
        if (diff > 0) {
            before += Array(diff).fill(' ').join('');
        }

        return before;
    };

    /**
     * Remove visual cascade
     */


    Declaration.prototype.restoreBefore = function restoreBefore(decl) {
        var lines = decl.raw('before').split('\n');
        var min = lines[lines.length - 1];

        this.all.group(decl).up(function (prefixed) {
            var array = prefixed.raw('before').split('\n');
            var last = array[array.length - 1];
            if (last.length < min.length) {
                min = last;
            }
        });

        lines[lines.length - 1] = min;
        decl.raws.before = lines.join('\n');
    };

    /**
     * Clone and insert new declaration
     */


    Declaration.prototype.insert = function insert(decl, prefix, prefixes) {
        var cloned = this.set(this.clone(decl), prefix);
        if (!cloned) return undefined;

        var already = decl.parent.some(function (i) {
            return i.prop === cloned.prop && i.value === cloned.value;
        });
        if (already) {
            return undefined;
        }

        if (this.needCascade(decl)) {
            cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
        }
        return decl.parent.insertBefore(decl, cloned);
    };

    /**
     * Did this declaration has this prefix above
     */


    Declaration.prototype.isAlready = function isAlready(decl, prefixed) {
        var already = this.all.group(decl).up(function (i) {
            return i.prop === prefixed;
        });
        if (!already) {
            already = this.all.group(decl).down(function (i) {
                return i.prop === prefixed;
            });
        }
        return already;
    };

    /**
     * Clone and add prefixes for declaration
     */


    Declaration.prototype.add = function add(decl, prefix, prefixes, result) {
        var prefixed = this.prefixed(decl.prop, prefix);
        if (this.isAlready(decl, prefixed) || this.otherPrefixes(decl.value, prefix)) {
            return undefined;
        }
        return this.insert(decl, prefix, prefixes, result);
    };

    /**
     * Add spaces for visual cascade
     */


    Declaration.prototype.process = function process(decl, result) {
        if (!this.needCascade(decl)) {
            _Prefixer.prototype.process.call(this, decl, result);
            return;
        }

        var prefixes = _Prefixer.prototype.process.call(this, decl, result);

        if (!prefixes || !prefixes.length) {
            return;
        }

        this.restoreBefore(decl);
        decl.raws.before = this.calcBefore(prefixes, decl);
    };

    /**
     * Return list of prefixed properties to clean old prefixes
     */


    Declaration.prototype.old = function old(prop, prefix) {
        return [this.prefixed(prop, prefix)];
    };

    return Declaration;
}(prefixer$2);

var declaration$2 = Declaration$2;

function _defaults$1(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$59(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$48(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$48(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$1(subClass, superClass); }






var regexp$1 = /(min|max)-resolution\s*:\s*\d*\.?\d+(dppx|dpi)/gi;
var split$1 = /(min|max)-resolution(\s*:\s*)(\d*\.?\d+)(dppx|dpi)/i;

var Resolution$2 = function (_Prefixer) {
    _inherits$48(Resolution, _Prefixer);

    function Resolution() {
        _classCallCheck$59(this, Resolution);

        return _possibleConstructorReturn$48(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Return prefixed query name
     */
    Resolution.prototype.prefixName = function prefixName(prefix, name) {
        var newName = prefix === '-moz-' ? name + '--moz-device-pixel-ratio' : prefix + name + '-device-pixel-ratio';
        return newName;
    };

    /**
     * Return prefixed query
     */


    Resolution.prototype.prefixQuery = function prefixQuery(prefix, name, colon, value, units) {
        if (units === 'dpi') {
            value = Number(value / 96);
        }
        if (prefix === '-o-') {
            value = _num2fraction_1_2_2_num2fraction(value);
        }
        return this.prefixName(prefix, name) + colon + value;
    };

    /**
     * Remove prefixed queries
     */


    Resolution.prototype.clean = function clean(rule) {
        var _this2 = this;

        if (!this.bad) {
            this.bad = [];
            for (var _iterator = this.prefixes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var prefix = _ref;

                this.bad.push(this.prefixName(prefix, 'min'));
                this.bad.push(this.prefixName(prefix, 'max'));
            }
        }

        rule.params = utils$3.editList(rule.params, function (queries) {
            return queries.filter(function (query) {
                return _this2.bad.every(function (i) {
                    return query.indexOf(i) === -1;
                });
            });
        });
    };

    /**
     * Add prefixed queries
     */


    Resolution.prototype.process = function process(rule) {
        var _this3 = this;

        var parent = this.parentPrefix(rule);
        var prefixes = parent ? [parent] : this.prefixes;

        rule.params = utils$3.editList(rule.params, function (origin, prefixed) {
            for (var _iterator2 = origin, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var query = _ref2;

                if (query.indexOf('min-resolution') === -1 && query.indexOf('max-resolution') === -1) {
                    prefixed.push(query);
                    continue;
                }

                var _loop = function _loop(prefix) {
                    var processed = query.replace(regexp$1, function (str) {
                        var parts = str.match(split$1);
                        return _this3.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);
                    });
                    prefixed.push(processed);
                };

                for (var _iterator3 = prefixes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var prefix = _ref3;

                    _loop(prefix);
                }
                prefixed.push(query);
            }

            return utils$3.uniq(prefixed);
        });
    };

    return Resolution;
}(prefixer$2);

var resolution$2 = Resolution$2;

function _classCallCheck$60(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }


var vendor$4 = postcss.vendor;
var list$3 = postcss.list;

var Transition$2 = function () {
    function Transition(prefixes) {
        _classCallCheck$60(this, Transition);

        Object.defineProperty(this, 'props', {
            enumerable: true,
            writable: true,
            value: ['transition', 'transition-property']
        });

        this.prefixes = prefixes;
    }

    /**
     * Process transition and add prefies for all necessary properties
     */


    Transition.prototype.add = function add(decl, result) {
        var _this = this;

        var prefix = void 0,
            prop = void 0;
        var declPrefixes = this.prefixes.add[decl.prop] && this.prefixes.add[decl.prop].prefixes || [];

        var params = this.parse(decl.value);
        var names = params.map(function (i) {
            return _this.findProp(i);
        });
        var added = [];

        if (names.some(function (i) {
            return i[0] === '-';
        })) {
            return;
        }

        for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var param = _ref;

            prop = this.findProp(param);
            if (prop[0] === '-') continue;

            var prefixer = this.prefixes.add[prop];
            if (!prefixer || !prefixer.prefixes) continue;

            for (var _iterator3 = prefixer.prefixes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    prefix = _iterator3[_i3++];
                } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    prefix = _i3.value;
                }

                var prefixed = this.prefixes.prefixed(prop, prefix);
                if (prefixed !== '-ms-transform' && names.indexOf(prefixed) === -1) {
                    if (!this.disabled(prop, prefix)) {
                        added.push(this.clone(prop, prefixed, param));
                    }
                }
            }
        }

        params = params.concat(added);
        var value = this.stringify(params);

        var webkitClean = this.stringify(this.cleanFromUnprefixed(params, '-webkit-'));
        if (declPrefixes.indexOf('-webkit-') !== -1) {
            this.cloneBefore(decl, '-webkit-' + decl.prop, webkitClean);
        }
        this.cloneBefore(decl, decl.prop, webkitClean);
        if (declPrefixes.indexOf('-o-') !== -1) {
            var operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'));
            this.cloneBefore(decl, '-o-' + decl.prop, operaClean);
        }

        for (var _iterator2 = declPrefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                prefix = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                prefix = _i2.value;
            }

            if (prefix !== '-webkit-' && prefix !== '-o-') {
                var prefixValue = this.stringify(this.cleanOtherPrefixes(params, prefix));
                this.cloneBefore(decl, prefix + decl.prop, prefixValue);
            }
        }

        if (value !== decl.value && !this.already(decl, decl.prop, value)) {
            this.checkForWarning(result, decl);
            decl.cloneBefore();
            decl.value = value;
        }
    };

    /**
     * Find property name
     */


    Transition.prototype.findProp = function findProp(param) {
        var prop = param[0].value;
        if (/^\d/.test(prop)) {
            for (var i = 0; i < param.length; i++) {
                var token = param[i];
                if (i !== 0 && token.type === 'word') {
                    return token.value;
                }
            }
        }
        return prop;
    };

    /**
     * Does we aready have this declaration
     */


    Transition.prototype.already = function already(decl, prop, value) {
        return decl.parent.some(function (i) {
            return i.prop === prop && i.value === value;
        });
    };

    /**
     * Add declaration if it is not exist
     */


    Transition.prototype.cloneBefore = function cloneBefore(decl, prop, value) {
        if (!this.already(decl, prop, value)) {
            decl.cloneBefore({ prop: prop, value: value });
        }
    };

    /**
     * Show transition-property warning
     */


    Transition.prototype.checkForWarning = function checkForWarning(result, decl) {
        if (decl.prop !== 'transition-property') {
            return;
        }

        decl.parent.each(function (i) {
            if (i.type !== 'decl') {
                return undefined;
            }
            if (i.prop.indexOf('transition-') !== 0) {
                return undefined;
            }
            if (i.prop === 'transition-property') {
                return undefined;
            }

            if (list$3.comma(i.value).length > 1) {
                decl.warn(result, 'Replace transition-property to transition, ' + 'because Autoprefixer could not support ' + 'any cases of transition-property ' + 'and other transition-*');
            }
            return false;
        });
    };

    /**
     * Process transition and remove all unnecessary properties
     */


    Transition.prototype.remove = function remove(decl) {
        var _this2 = this;

        var params = this.parse(decl.value);
        params = params.filter(function (i) {
            var prop = _this2.prefixes.remove[_this2.findProp(i)];
            return !prop || !prop.remove;
        });
        var value = this.stringify(params);

        if (decl.value === value) {
            return;
        }

        if (params.length === 0) {
            decl.remove();
            return;
        }

        var double = decl.parent.some(function (i) {
            return i.prop === decl.prop && i.value === value;
        });
        var smaller = decl.parent.some(function (i) {
            return i !== decl && i.prop === decl.prop && i.value.length > value.length;
        });

        if (double || smaller) {
            decl.remove();
            return;
        }

        decl.value = value;
    };

    /**
     * Parse properties list to array
     */


    Transition.prototype.parse = function parse(value) {
        var ast = lib(value);
        var result = [];
        var param = [];
        for (var _iterator4 = ast.nodes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref2 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref2 = _i4.value;
            }

            var node = _ref2;

            param.push(node);
            if (node.type === 'div' && node.value === ',') {
                result.push(param);
                param = [];
            }
        }
        result.push(param);
        return result.filter(function (i) {
            return i.length > 0;
        });
    };

    /**
     * Return properties string from array
     */


    Transition.prototype.stringify = function stringify(params) {
        if (params.length === 0) {
            return '';
        }
        var nodes = [];
        for (var _iterator5 = params, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray5) {
                if (_i5 >= _iterator5.length) break;
                _ref3 = _iterator5[_i5++];
            } else {
                _i5 = _iterator5.next();
                if (_i5.done) break;
                _ref3 = _i5.value;
            }

            var param = _ref3;

            if (param[param.length - 1].type !== 'div') {
                param.push(this.div(params));
            }
            nodes = nodes.concat(param);
        }
        if (nodes[0].type === 'div') {
            nodes = nodes.slice(1);
        }
        if (nodes[nodes.length - 1].type === 'div') {
            nodes = nodes.slice(0, +-2 + 1 || undefined);
        }
        return lib.stringify({ nodes: nodes });
    };

    /**
     * Return new param array with different name
     */


    Transition.prototype.clone = function clone(origin, name, param) {
        var result = [];
        var changed = false;
        for (var _iterator6 = param, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray6) {
                if (_i6 >= _iterator6.length) break;
                _ref4 = _iterator6[_i6++];
            } else {
                _i6 = _iterator6.next();
                if (_i6.done) break;
                _ref4 = _i6.value;
            }

            var i = _ref4;

            if (!changed && i.type === 'word' && i.value === origin) {
                result.push({ type: 'word', value: name });
                changed = true;
            } else {
                result.push(i);
            }
        }
        return result;
    };

    /**
     * Find or create seperator
     */


    Transition.prototype.div = function div(params) {
        for (var _iterator7 = params, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
            var _ref5;

            if (_isArray7) {
                if (_i7 >= _iterator7.length) break;
                _ref5 = _iterator7[_i7++];
            } else {
                _i7 = _iterator7.next();
                if (_i7.done) break;
                _ref5 = _i7.value;
            }

            var param = _ref5;

            for (var _iterator8 = param, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator]();;) {
                var _ref6;

                if (_isArray8) {
                    if (_i8 >= _iterator8.length) break;
                    _ref6 = _iterator8[_i8++];
                } else {
                    _i8 = _iterator8.next();
                    if (_i8.done) break;
                    _ref6 = _i8.value;
                }

                var node = _ref6;

                if (node.type === 'div' && node.value === ',') {
                    return node;
                }
            }
        }
        return { type: 'div', value: ',', after: ' ' };
    };

    Transition.prototype.cleanOtherPrefixes = function cleanOtherPrefixes(params, prefix) {
        var _this3 = this;

        return params.filter(function (param) {
            var current = vendor$4.prefix(_this3.findProp(param));
            return current === '' || current === prefix;
        });
    };

    /**
     * Remove all non-webkit prefixes and unprefixed params if we have prefixed
     */


    Transition.prototype.cleanFromUnprefixed = function cleanFromUnprefixed(params, prefix) {
        var _this4 = this;

        var remove = params.map(function (i) {
            return _this4.findProp(i);
        }).filter(function (i) {
            return i.slice(0, prefix.length) === prefix;
        }).map(function (i) {
            return _this4.prefixes.unprefixed(i);
        });

        var result = [];
        for (var _iterator9 = params, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator]();;) {
            var _ref7;

            if (_isArray9) {
                if (_i9 >= _iterator9.length) break;
                _ref7 = _iterator9[_i9++];
            } else {
                _i9 = _iterator9.next();
                if (_i9.done) break;
                _ref7 = _i9.value;
            }

            var param = _ref7;

            var prop = this.findProp(param);
            var p = vendor$4.prefix(prop);
            if (remove.indexOf(prop) === -1 && (p === prefix || p === '')) {
                result.push(param);
            }
        }
        return result;
    };

    /**
     * Check property for disabled by option
     */


    Transition.prototype.disabled = function disabled(prop, prefix) {
        var other = ['order', 'justify-content', 'align-self', 'align-content'];
        if (prop.indexOf('flex') !== -1 || other.indexOf(prop) !== -1) {
            if (this.prefixes.options.flexbox === false) {
                return true;
            }

            if (this.prefixes.options.flexbox === 'no-2009') {
                return prefix.indexOf('2009') !== -1;
            }
        }
        return undefined;
    };

    return Transition;
}();

var transition$2 = Transition$2;

function _classCallCheck$63(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var OldValue$2 = function () {
    function OldValue(unprefixed, prefixed, string, regexp) {
        _classCallCheck$63(this, OldValue);

        this.unprefixed = unprefixed;
        this.prefixed = prefixed;
        this.string = string || prefixed;
        this.regexp = regexp || utils$3.regexp(prefixed);
    }

    /**
     * Check, that value contain old value
     */


    OldValue.prototype.check = function check(value) {
        if (value.indexOf(this.string) !== -1) {
            return !!value.match(this.regexp);
        }
        return false;
    };

    return OldValue;
}();

var oldValue$2 = OldValue$2;

function _defaults$2(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$62(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$49(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$49(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$2(subClass, superClass); }





var vendor$5 = postcss.vendor;

var Value$2 = function (_Prefixer) {
    _inherits$49(Value, _Prefixer);

    function Value() {
        _classCallCheck$62(this, Value);

        return _possibleConstructorReturn$49(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Clone decl for each prefixed values
     */
    Value.save = function save(prefixes, decl) {
        var _this2 = this;

        var prop = decl.prop;
        var result = [];

        var _loop = function _loop(prefix) {
            var value = decl._autoprefixerValues[prefix];

            if (value === decl.value) {
                return 'continue';
            }

            var item = void 0;
            var propPrefix = vendor$5.prefix(prop);

            if (propPrefix === '-pie-') {
                return 'continue';
            }

            if (propPrefix === prefix) {
                item = decl.value = value;
                result.push(item);
                return 'continue';
            }

            var prefixed = prefixes.prefixed(prop, prefix);
            var rule = decl.parent;

            if (!rule.every(function (i) {
                return i.prop !== prefixed;
            })) {
                result.push(item);
                return 'continue';
            }

            var trimmed = value.replace(/\s+/, ' ');
            var already = rule.some(function (i) {
                return i.prop === decl.prop && i.value.replace(/\s+/, ' ') === trimmed;
            });

            if (already) {
                result.push(item);
                return 'continue';
            }

            var cloned = _this2.clone(decl, { value: value });
            item = decl.parent.insertBefore(decl, cloned);

            result.push(item);
        };

        for (var prefix in decl._autoprefixerValues) {
            var _ret = _loop(prefix);

            if (_ret === 'continue') continue;
        }

        return result;
    };

    /**
     * Is declaration need to be prefixed
     */


    Value.prototype.check = function check(decl) {
        var value = decl.value;
        if (value.indexOf(this.name) === -1) {
            return false;
        }

        return !!value.match(this.regexp());
    };

    /**
     * Lazy regexp loading
     */


    Value.prototype.regexp = function regexp() {
        return this.regexpCache || (this.regexpCache = utils$3.regexp(this.name));
    };

    /**
     * Add prefix to values in string
     */


    Value.prototype.replace = function replace(string, prefix) {
        return string.replace(this.regexp(), '$1' + prefix + '$2');
    };

    /**
     * Get value with comments if it was not changed
     */


    Value.prototype.value = function value(decl) {
        if (decl.raws.value && decl.raws.value.value === decl.value) {
            return decl.raws.value.raw;
        } else {
            return decl.value;
        }
    };

    /**
     * Save values with next prefixed token
     */


    Value.prototype.add = function add(decl, prefix) {
        if (!decl._autoprefixerValues) {
            decl._autoprefixerValues = {};
        }
        var value = decl._autoprefixerValues[prefix] || this.value(decl);

        var before = void 0;
        do {
            before = value;
            value = this.replace(value, prefix);
            if (value === false) return;
        } while (value !== before);

        decl._autoprefixerValues[prefix] = value;
    };

    /**
     * Return function to fast find prefixed value
     */


    Value.prototype.old = function old(prefix) {
        return new oldValue$2(this.name, prefix + this.name);
    };

    return Value;
}(prefixer$2);

var value$2 = Value$2;

function _classCallCheck$61(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }



var OLD_LINEAR$1 = /(^|[^-])linear-gradient\(\s*(top|left|right|bottom)/i;
var OLD_RADIAL$1 = /(^|[^-])radial-gradient\(\s*\d+(\w*|%)\s+\d+(\w*|%)\s*,/i;

var SIZES$1 = ['width', 'height', 'min-width', 'max-width', 'min-height', 'max-height', 'inline-size', 'min-inline-size', 'max-inline-size', 'block-size', 'min-block-size', 'max-block-size'];

var Processor$2 = function () {
    function Processor(prefixes) {
        _classCallCheck$61(this, Processor);

        this.prefixes = prefixes;
    }

    /**
     * Add necessary prefixes
     */


    Processor.prototype.add = function add(css, result) {
        var _this = this;

        // At-rules
        var resolution = this.prefixes.add['@resolution'];
        var keyframes = this.prefixes.add['@keyframes'];
        var viewport = this.prefixes.add['@viewport'];
        var supports = this.prefixes.add['@supports'];

        css.walkAtRules(function (rule) {
            if (rule.name === 'keyframes') {
                if (!_this.disabled(rule, result)) {
                    return keyframes && keyframes.process(rule);
                }
            } else if (rule.name === 'viewport') {
                if (!_this.disabled(rule, result)) {
                    return viewport && viewport.process(rule);
                }
            } else if (rule.name === 'supports') {
                if (_this.prefixes.options.supports !== false && !_this.disabled(rule, result)) {
                    return supports.process(rule);
                }
            } else if (rule.name === 'media' && rule.params.indexOf('-resolution') !== -1) {
                if (!_this.disabled(rule, result)) {
                    return resolution && resolution.process(rule);
                }
            }

            return undefined;
        });

        // Selectors
        css.walkRules(function (rule) {
            if (_this.disabled(rule, result)) return undefined;

            return _this.prefixes.add.selectors.map(function (selector) {
                return selector.process(rule, result);
            });
        });

        css.walkDecls(function (decl) {
            if (_this.disabledDecl(decl, result)) return undefined;

            if (decl.prop === 'display' && decl.value === 'box') {
                result.warn('You should write display: flex by final spec ' + 'instead of display: box', { node: decl });
                return undefined;
            }
            if (decl.value.indexOf('linear-gradient') !== -1) {
                if (OLD_LINEAR$1.test(decl.value)) {
                    result.warn('Gradient has outdated direction syntax. ' + 'New syntax is like `to left` instead of `right`.', { node: decl });
                }
            }
            if (decl.value.indexOf('radial-gradient') !== -1) {
                if (OLD_RADIAL$1.test(decl.value)) {
                    result.warn('Gradient has outdated direction syntax. ' + 'New syntax is like `closest-side at 0 0` ' + 'instead of `0 0, closest-side`.', { node: decl });
                } else if (/[^-]cover/.test(decl.value)) {
                    result.warn('Gradient has outdated direction syntax. ' + 'Replace `cover` to `farthest-corner`.', { node: decl });
                } else if (/[^-]contain/.test(decl.value)) {
                    result.warn('Gradient has outdated direction syntax. ' + 'Replace `contain` to `closest-side`.', { node: decl });
                }
            }
            if (decl.prop === 'text-emphasis-position') {
                if (decl.value === 'under' || decl.value === 'over') {
                    result.warn('You should use 2 values for text-emphasis-position ' + 'For example, `under left` instead of just `under`.', { node: decl });
                }
            }

            if (SIZES$1.indexOf(decl.prop) !== -1) {
                if (decl.value.indexOf('fill-available') !== -1) {
                    result.warn('Replace fill-available to stretch, ' + 'because spec had been changed', { node: decl });
                } else if (decl.value.indexOf('fill') !== -1) {
                    result.warn('Replace fill to stretch, ' + 'because spec had been changed', { node: decl });
                }
            }

            var prefixer = void 0;

            if (decl.prop === 'transition' || decl.prop === 'transition-property') {
                // Transition
                return _this.prefixes.transition.add(decl, result);
            } else if (decl.prop === 'align-self') {
                // align-self flexbox or grid
                var display = _this.displayType(decl);
                if (display !== 'grid' && _this.prefixes.options.flexbox !== false) {
                    prefixer = _this.prefixes.add['align-self'];
                    if (prefixer && prefixer.prefixes) {
                        prefixer.process(decl);
                    }
                }
                if (display !== 'flex' && _this.prefixes.options.grid !== false) {
                    prefixer = _this.prefixes.add['grid-row-align'];
                    if (prefixer && prefixer.prefixes) {
                        return prefixer.process(decl, result);
                    }
                }
            } else if (decl.prop === 'justify-self') {
                // justify-self flexbox or grid
                var _display = _this.displayType(decl);
                if (_display !== 'flex' && _this.prefixes.options.grid !== false) {
                    prefixer = _this.prefixes.add['grid-column-align'];
                    if (prefixer && prefixer.prefixes) {
                        return prefixer.process(decl, result);
                    }
                }
            } else {
                // Properties
                prefixer = _this.prefixes.add[decl.prop];
                if (prefixer && prefixer.prefixes) {
                    return prefixer.process(decl, result);
                }
            }

            return undefined;
        });

        // Values
        return css.walkDecls(function (decl) {
            if (_this.disabledValue(decl, result)) return;

            var unprefixed = _this.prefixes.unprefixed(decl.prop);
            for (var _iterator = _this.prefixes.values('add', unprefixed), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var value = _ref;

                value.process(decl, result);
            }
            value$2.save(_this.prefixes, decl);
        });
    };

    /**
     * Remove unnecessary pefixes
     */


    Processor.prototype.remove = function remove(css, result) {
        var _this2 = this;

        // At-rules
        var resolution = this.prefixes.remove['@resolution'];

        css.walkAtRules(function (rule, i) {
            if (_this2.prefixes.remove['@' + rule.name]) {
                if (!_this2.disabled(rule, result)) {
                    rule.parent.removeChild(i);
                }
            } else if (rule.name === 'media' && rule.params.indexOf('-resolution') !== -1 && resolution) {
                resolution.clean(rule);
            }
        });

        // Selectors

        var _loop = function _loop(checker) {
            css.walkRules(function (rule, i) {
                if (checker.check(rule)) {
                    if (!_this2.disabled(rule, result)) {
                        rule.parent.removeChild(i);
                    }
                }
            });
        };

        for (var _iterator2 = this.prefixes.remove.selectors, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var checker = _ref2;

            _loop(checker);
        }

        return css.walkDecls(function (decl, i) {
            if (_this2.disabled(decl, result)) return;

            var rule = decl.parent;
            var unprefixed = _this2.prefixes.unprefixed(decl.prop);

            // Transition
            if (decl.prop === 'transition' || decl.prop === 'transition-property') {
                _this2.prefixes.transition.remove(decl);
            }

            // Properties
            if (_this2.prefixes.remove[decl.prop] && _this2.prefixes.remove[decl.prop].remove) {
                var notHack = _this2.prefixes.group(decl).down(function (other) {
                    return _this2.prefixes.normalize(other.prop) === unprefixed;
                });

                if (unprefixed === 'flex-flow') {
                    notHack = true;
                }

                if (notHack && !_this2.withHackValue(decl)) {
                    if (decl.raw('before').indexOf('\n') > -1) {
                        _this2.reduceSpaces(decl);
                    }
                    rule.removeChild(i);
                    return;
                }
            }

            // Values
            for (var _iterator3 = _this2.prefixes.values('remove', unprefixed), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                var _ref3;

                if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                }

                var checker = _ref3;

                if (!checker.check(decl.value)) {
                    continue;
                }

                unprefixed = checker.unprefixed;
                var _notHack = _this2.prefixes.group(decl).down(function (other) {
                    return other.value.indexOf(unprefixed) !== -1;
                });

                if (_notHack) {
                    rule.removeChild(i);
                    return;
                }
            }
        });
    };

    /**
     * Some rare old values, which is not in standard
     */


    Processor.prototype.withHackValue = function withHackValue(decl) {
        return decl.prop === '-webkit-background-clip' && decl.value === 'text';
    };

    /**
     * Check for grid/flexbox options.
     */


    Processor.prototype.disabledValue = function disabledValue(node, result) {
        if (this.prefixes.options.grid === false && node.type === 'decl') {
            if (node.prop === 'display' && node.value.indexOf('grid') !== -1) {
                return true;
            }
        }
        if (this.prefixes.options.flexbox === false && node.type === 'decl') {
            if (node.prop === 'display' && node.value.indexOf('flex') !== -1) {
                return true;
            }
        }

        return this.disabled(node, result);
    };

    /**
     * Check for grid/flexbox options.
     */


    Processor.prototype.disabledDecl = function disabledDecl(node, result) {
        if (this.prefixes.options.grid === false && node.type === 'decl') {
            if (node.prop.indexOf('grid') !== -1 || node.prop === 'justify-items') {
                return true;
            }
        }
        if (this.prefixes.options.flexbox === false && node.type === 'decl') {
            var other = ['order', 'justify-content', 'align-items', 'align-content'];
            if (node.prop.indexOf('flex') !== -1 || other.indexOf(node.prop) !== -1) {
                return true;
            }
        }

        return this.disabled(node, result);
    };

    /**
     * Check for control comment and global options
     */


    Processor.prototype.disabled = function disabled(node, result) {
        if (!node) return false;
        if (node._autoprefixerDisabled !== undefined) {
            return node._autoprefixerDisabled;
        }

        if (node.nodes) {
            var status = undefined;
            node.each(function (i) {
                if (i.type !== 'comment') return;
                if (/(!\s*)?autoprefixer:\s*(off|on)/i.test(i.text)) {
                    if (typeof status !== 'undefined') {
                        result.warn('Second Autoprefixer control comment ' + 'was ignored. Autoprefixer applies control ' + 'comment to whole block, not to next rules.', { node: i });
                    } else {
                        status = /on/i.test(i.text);
                    }
                }
            });

            var value = false;
            if (status !== undefined) {
                value = !status;
            } else if (node.parent) {
                value = this.disabled(node.parent, result);
            }

            node._autoprefixerDisabled = value;
            return node._autoprefixerDisabled;
        } else {
            node._autoprefixerDisabled = this.disabled(node.parent, result);
            return node._autoprefixerDisabled;
        }
    };

    /**
     * Normalize spaces in cascade declaration group
     */


    Processor.prototype.reduceSpaces = function reduceSpaces(decl) {
        var stop = false;
        this.prefixes.group(decl).up(function () {
            stop = true;
            return true;
        });
        if (stop) {
            return;
        }

        var parts = decl.raw('before').split('\n');
        var prevMin = parts[parts.length - 1].length;
        var diff = false;

        this.prefixes.group(decl).down(function (other) {
            parts = other.raw('before').split('\n');
            var last = parts.length - 1;

            if (parts[last].length > prevMin) {
                if (diff === false) {
                    diff = parts[last].length - prevMin;
                }

                parts[last] = parts[last].slice(0, -diff);
                other.raws.before = parts.join('\n');
            }
        });
    };

    /**
     * Is it flebox or grid rule
     */


    Processor.prototype.displayType = function displayType(decl) {
        for (var _iterator4 = decl.parent.nodes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
            }

            var i = _ref4;

            if (i.prop !== 'display') {
                continue;
            }

            if (i.value.indexOf('flex') !== -1) {
                return 'flex';
            }

            if (i.value.indexOf('grid') !== -1) {
                return 'grid';
            }
        }

        return false;
    };

    return Processor;
}();

var processor$2 = Processor$2;

var _typeof$5 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var last$1 = function last(array) {
    return array[array.length - 1];
};

var brackets$2 = {

    /**
     * Parse string to nodes tree
     */
    parse: function parse(str) {
        var current = [''];
        var stack = [current];

        for (var i = 0; i < str.length; i++) {
            var sym = str[i];
            if (sym === '(') {
                current = [''];
                last$1(stack).push(current);
                stack.push(current);
                continue;
            }

            if (sym === ')') {
                stack.pop();
                current = last$1(stack);
                current.push('');
                continue;
            }

            current[current.length - 1] += sym;
        }

        return stack[0];
    },


    /**
     * Generate output string by nodes tree
     */
    stringify: function stringify(ast) {
        var result = '';
        for (var _iterator = ast, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var i = _ref;

            if ((typeof i === 'undefined' ? 'undefined' : _typeof$5(i)) === 'object') {
                result += '(' + brackets$2.stringify(i) + ')';
                continue;
            }

            result += i;
        }
        return result;
    }
};

var brackets_1$2 = brackets$2;

var _typeof$4 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck$64(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }








var supported$3 = [];
var data$1 = unpacker.feature(cssFeaturequeries);
for (var browser$1 in data$1.stats) {
    var versions$3 = data$1.stats[browser$1];
    for (var version$1 in versions$3) {
        var support$1 = versions$3[version$1];
        if (/y/.test(support$1)) {
            supported$3.push(browser$1 + ' ' + version$1);
        }
    }
}

var Supports$2 = function () {
    function Supports(Prefixes, all) {
        _classCallCheck$64(this, Supports);

        this.Prefixes = Prefixes;
        this.all = all;
    }

    /**
     * Return prefixer only with @supports supported browsers
     */


    Supports.prototype.prefixer = function prefixer() {
        if (this.prefixerCache) {
            return this.prefixerCache;
        }

        var filtered = this.all.browsers.selected.filter(function (i) {
            return supported$3.indexOf(i) !== -1;
        });

        var browsers = new browsers$5(this.all.browsers.data, filtered, this.all.options);
        this.prefixerCache = new this.Prefixes(this.all.data, browsers, this.all.options);
        return this.prefixerCache;
    };

    /**
     * Parse string into declaration property and value
     */


    Supports.prototype.parse = function parse(str) {
        var _str$split = str.split(':'),
            prop = _str$split[0],
            value = _str$split[1];

        if (!value) value = '';
        return [prop.trim(), value.trim()];
    };

    /**
     * Create virtual rule to process it by prefixer
     */


    Supports.prototype.virtual = function virtual(str) {
        var _parse = this.parse(str),
            prop = _parse[0],
            value = _parse[1];

        var rule = postcss.parse('a{}').first;
        rule.append({ prop: prop, value: value, raws: { before: '' } });
        return rule;
    };

    /**
     * Return array of Declaration with all necessary prefixes
     */


    Supports.prototype.prefixed = function prefixed(str) {
        var rule = this.virtual(str);
        if (this.disabled(rule.first)) {
            return rule.nodes;
        }

        var prefixer = this.prefixer().add[rule.first.prop];
        prefixer && prefixer.process && prefixer.process(rule.first);

        for (var _iterator = rule.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var decl = _ref;

            for (var _iterator2 = this.prefixer().values('add', rule.first.prop), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var value = _ref2;

                value.process(decl);
            }
            value$2.save(this.all, decl);
        }

        return rule.nodes;
    };

    /**
     * Return true if brackets node is "not" word
     */


    Supports.prototype.isNot = function isNot(node) {
        return typeof node === 'string' && /not\s*/i.test(node);
    };

    /**
     * Return true if brackets node is "or" word
     */


    Supports.prototype.isOr = function isOr(node) {
        return typeof node === 'string' && /\s*or\s*/i.test(node);
    };

    /**
     * Return true if brackets node is (prop: value)
     */


    Supports.prototype.isProp = function isProp(node) {
        return (typeof node === 'undefined' ? 'undefined' : _typeof$4(node)) === 'object' && node.length === 1 && typeof node[0] === 'string';
    };

    /**
     * Return true if prefixed property has no unprefixed
     */


    Supports.prototype.isHack = function isHack(all, unprefixed) {
        var check = new RegExp('(\\(|\\s)' + utils$3.escapeRegexp(unprefixed) + ':');
        return !check.test(all);
    };

    /**
     * Return true if we need to remove node
     */


    Supports.prototype.toRemove = function toRemove(str, all) {
        var _parse2 = this.parse(str),
            prop = _parse2[0],
            value = _parse2[1];

        var unprefixed = this.all.unprefixed(prop);

        var cleaner = this.all.cleaner();

        if (cleaner.remove[prop] && cleaner.remove[prop].remove && !this.isHack(all, unprefixed)) {
            return true;
        }

        for (var _iterator3 = cleaner.values('remove', unprefixed), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
            } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
            }

            var checker = _ref3;

            if (checker.check(value)) {
                return true;
            }
        }

        return false;
    };

    /**
     * Remove all unnecessary prefixes
     */


    Supports.prototype.remove = function remove(nodes, all) {
        var i = 0;
        while (i < nodes.length) {
            if (!this.isNot(nodes[i - 1]) && this.isProp(nodes[i]) && this.isOr(nodes[i + 1])) {
                if (this.toRemove(nodes[i][0], all)) {
                    nodes.splice(i, 2);
                    continue;
                }

                i += 2;
                continue;
            }

            if (_typeof$4(nodes[i]) === 'object') {
                nodes[i] = this.remove(nodes[i], all);
            }

            i += 1;
        }
        return nodes;
    };

    /**
     * Clean brackets with one child
     */


    Supports.prototype.cleanBrackets = function cleanBrackets(nodes) {
        var _this = this;

        return nodes.map(function (i) {
            if ((typeof i === 'undefined' ? 'undefined' : _typeof$4(i)) !== 'object') {
                return i;
            }

            if (i.length === 1 && _typeof$4(i[0]) === 'object') {
                return _this.cleanBrackets(i[0]);
            }

            return _this.cleanBrackets(i);
        });
    };

    /**
     * Add " or " between properties and convert it to brackets format
     */


    Supports.prototype.convert = function convert(progress) {
        var result = [''];
        for (var _iterator4 = progress, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
            }

            var i = _ref4;

            result.push([i.prop + ': ' + i.value]);
            result.push(' or ');
        }
        result[result.length - 1] = '';
        return result;
    };

    /**
     * Compress value functions into a string nodes
     */


    Supports.prototype.normalize = function normalize(nodes) {
        var _this2 = this;

        if ((typeof nodes === 'undefined' ? 'undefined' : _typeof$4(nodes)) !== 'object') {
            return nodes;
        }

        nodes = nodes.filter(function (i) {
            return i !== '';
        });
        if (typeof nodes[0] === 'string' && nodes[0].indexOf(':') !== -1) {
            return [brackets_1$2.stringify(nodes)];
        }

        return nodes.map(function (i) {
            return _this2.normalize(i);
        });
    };

    /**
     * Add prefixes
     */


    Supports.prototype.add = function add(nodes, all) {
        var _this3 = this;

        return nodes.map(function (i) {
            if (_this3.isProp(i)) {
                var prefixed = _this3.prefixed(i[0]);
                if (prefixed.length > 1) {
                    return _this3.convert(prefixed);
                }

                return i;
            }

            if ((typeof i === 'undefined' ? 'undefined' : _typeof$4(i)) === 'object') {
                return _this3.add(i, all);
            }

            return i;
        });
    };

    /**
     * Add prefixed declaration
     */


    Supports.prototype.process = function process(rule) {
        var ast = brackets_1$2.parse(rule.params);
        ast = this.normalize(ast);
        ast = this.remove(ast, rule.params);
        ast = this.add(ast, rule.params);
        ast = this.cleanBrackets(ast);
        rule.params = brackets_1$2.stringify(ast);
    };

    /**
     * Check global options
     */


    Supports.prototype.disabled = function disabled(node) {
        if (!this.all.options.grid) {
            if (node.prop === 'display' && node.value.indexOf('grid') !== -1) {
                return true;
            }
            if (node.prop.indexOf('grid') !== -1 || node.prop === 'justify-items') {
                return true;
            }
        }

        if (this.all.options.flexbox === false) {
            if (node.prop === 'display' && node.value.indexOf('flex') !== -1) {
                return true;
            }
            var other = ['order', 'justify-content', 'align-items', 'align-content'];
            if (node.prop.indexOf('flex') !== -1 || other.indexOf(node.prop) !== -1) {
                return true;
            }
        }

        return false;
    };

    return Supports;
}();

var supports$2 = Supports$2;

function _classCallCheck$66(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OldSelector$2 = function () {
    function OldSelector(selector, prefix) {
        _classCallCheck$66(this, OldSelector);

        this.prefix = prefix;
        this.prefixed = selector.prefixed(this.prefix);
        this.regexp = selector.regexp(this.prefix);

        this.prefixeds = selector.possible().map(function (x) {
            return [selector.prefixed(x), selector.regexp(x)];
        });

        this.unprefixed = selector.name;
        this.nameRegexp = selector.regexp();
    }

    /**
     * Is rule a hack without unprefixed version bottom
     */


    OldSelector.prototype.isHack = function isHack(rule) {
        var index = rule.parent.index(rule) + 1;
        var rules = rule.parent.nodes;

        while (index < rules.length) {
            var before = rules[index].selector;
            if (!before) {
                return true;
            }

            if (before.indexOf(this.unprefixed) !== -1 && before.match(this.nameRegexp)) {
                return false;
            }

            var some = false;
            for (var _iterator = this.prefixeds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref2 = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref2 = _i.value;
                }

                var _ref = _ref2;
                var string = _ref[0];
                var regexp = _ref[1];

                if (before.indexOf(string) !== -1 && before.match(regexp)) {
                    some = true;
                    break;
                }
            }

            if (!some) {
                return true;
            }

            index += 1;
        }

        return true;
    };

    /**
     * Does rule contain an unnecessary prefixed selector
     */


    OldSelector.prototype.check = function check(rule) {
        if (rule.selector.indexOf(this.prefixed) === -1) {
            return false;
        }
        if (!rule.selector.match(this.regexp)) {
            return false;
        }
        if (this.isHack(rule)) {
            return false;
        }
        return true;
    };

    return OldSelector;
}();

var oldSelector$2 = OldSelector$2;

function _defaults$3(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$65(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$50(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$50(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$3(subClass, superClass); }






var Selector$2 = function (_Prefixer) {
    _inherits$50(Selector, _Prefixer);

    function Selector(name, prefixes, all) {
        _classCallCheck$65(this, Selector);

        var _this = _possibleConstructorReturn$50(this, _Prefixer.call(this, name, prefixes, all));

        _this.regexpCache = {};
        return _this;
    }

    /**
     * Is rule selectors need to be prefixed
     */


    Selector.prototype.check = function check(rule) {
        if (rule.selector.indexOf(this.name) !== -1) {
            return !!rule.selector.match(this.regexp());
        }

        return false;
    };

    /**
     * Return prefixed version of selector
     */


    Selector.prototype.prefixed = function prefixed(prefix) {
        return this.name.replace(/^([^\w]*)/, '$1' + prefix);
    };

    /**
     * Lazy loadRegExp for name
     */


    Selector.prototype.regexp = function regexp(prefix) {
        if (this.regexpCache[prefix]) {
            return this.regexpCache[prefix];
        }

        var name = prefix ? this.prefixed(prefix) : this.name;
        this.regexpCache[prefix] = new RegExp('(^|[^:"\'=])' + utils$3.escapeRegexp(name), 'gi');
        return this.regexpCache[prefix];
    };

    /**
     * All possible prefixes
     */


    Selector.prototype.possible = function possible() {
        return browsers$5.prefixes();
    };

    /**
     * Return all possible selector prefixes
     */


    Selector.prototype.prefixeds = function prefixeds(rule) {
        if (rule._autoprefixerPrefixeds) {
            return rule._autoprefixerPrefixeds;
        }

        var prefixeds = {};
        for (var _iterator = this.possible(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var prefix = _ref;

            prefixeds[prefix] = this.replace(rule.selector, prefix);
        }

        rule._autoprefixerPrefixeds = prefixeds;
        return rule._autoprefixerPrefixeds;
    };

    /**
     * Is rule already prefixed before
     */


    Selector.prototype.already = function already(rule, prefixeds, prefix) {
        var index = rule.parent.index(rule) - 1;

        while (index >= 0) {
            var before = rule.parent.nodes[index];

            if (before.type !== 'rule') {
                return false;
            }

            var some = false;
            for (var key in prefixeds) {
                var prefixed = prefixeds[key];
                if (before.selector === prefixed) {
                    if (prefix === key) {
                        return true;
                    } else {
                        some = true;
                        break;
                    }
                }
            }
            if (!some) {
                return false;
            }

            index -= 1;
        }

        return false;
    };

    /**
     * Replace selectors by prefixed one
     */


    Selector.prototype.replace = function replace(selector, prefix) {
        return selector.replace(this.regexp(), '$1' + this.prefixed(prefix));
    };

    /**
     * Clone and add prefixes for at-rule
     */


    Selector.prototype.add = function add(rule, prefix) {
        var prefixeds = this.prefixeds(rule);

        if (this.already(rule, prefixeds, prefix)) {
            return;
        }

        var cloned = this.clone(rule, { selector: prefixeds[prefix] });
        rule.parent.insertBefore(rule, cloned);
    };

    /**
     * Return function to fast find prefixed selector
     */


    Selector.prototype.old = function old(prefix) {
        return new oldSelector$2(this, prefix);
    };

    return Selector;
}(prefixer$2);

var selector$2 = Selector$2;

function _defaults$4(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$67(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$51(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$51(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$4(subClass, superClass); }



var AtRule$2 = function (_Prefixer) {
    _inherits$51(AtRule, _Prefixer);

    function AtRule() {
        _classCallCheck$67(this, AtRule);

        return _possibleConstructorReturn$51(this, _Prefixer.apply(this, arguments));
    }

    /**
     * Clone and add prefixes for at-rule
     */
    AtRule.prototype.add = function add(rule, prefix) {
        var prefixed = prefix + rule.name;

        var already = rule.parent.some(function (i) {
            return i.name === prefixed && i.params === rule.params;
        });
        if (already) {
            return undefined;
        }

        var cloned = this.clone(rule, { name: prefixed });
        return rule.parent.insertBefore(rule, cloned);
    };

    /**
     * Clone node with prefixes
     */


    AtRule.prototype.process = function process(node) {
        var parent = this.parentPrefix(node);

        for (var _iterator = this.prefixes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var prefix = _ref;

            if (!parent || parent === prefix) {
                this.add(node, prefix);
            }
        }
    };

    return AtRule;
}(prefixer$2);

var atRule$2 = AtRule$2;

function _defaults$5(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$68(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$52(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$52(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$5(subClass, superClass); }



var Fullscreen$1 = function (_Selector) {
    _inherits$52(Fullscreen, _Selector);

    function Fullscreen() {
        _classCallCheck$68(this, Fullscreen);

        return _possibleConstructorReturn$52(this, _Selector.apply(this, arguments));
    }

    /**
     * Return different selectors depend on prefix
     */
    Fullscreen.prototype.prefixed = function prefixed(prefix) {
        if (prefix === '-webkit-') {
            return ':-webkit-full-screen';
        } else if (prefix === '-moz-') {
            return ':-moz-full-screen';
        } else {
            return ':' + prefix + 'fullscreen';
        }
    };

    return Fullscreen;
}(selector$2);

Object.defineProperty(Fullscreen$1, 'names', {
    enumerable: true,
    writable: true,
    value: [':fullscreen']
});


var fullscreen$5 = Fullscreen$1;

function _defaults$6(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$69(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$53(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$53(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$6(subClass, superClass); }



var Placeholder$1 = function (_Selector) {
    _inherits$53(Placeholder, _Selector);

    function Placeholder() {
        _classCallCheck$69(this, Placeholder);

        return _possibleConstructorReturn$53(this, _Selector.apply(this, arguments));
    }

    /**
     * Add old mozilla to possible prefixes
     */
    Placeholder.prototype.possible = function possible() {
        return _Selector.prototype.possible.call(this).concat(['-moz- old', '-ms- old']);
    };

    /**
     * Return different selectors depend on prefix
     */


    Placeholder.prototype.prefixed = function prefixed(prefix) {
        if (prefix === '-webkit-') {
            return '::-webkit-input-placeholder';
        } else if (prefix === '-ms-') {
            return '::-ms-input-placeholder';
        } else if (prefix === '-ms- old') {
            return ':-ms-input-placeholder';
        } else if (prefix === '-moz- old') {
            return ':-moz-placeholder';
        } else {
            return '::' + prefix + 'placeholder';
        }
    };

    return Placeholder;
}(selector$2);

Object.defineProperty(Placeholder$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['::placeholder']
});


var placeholder$2 = Placeholder$1;

/**
 * Return flexbox spec versions by prefix
 */
var flexSpec$3 = function (prefix) {
    var spec = void 0;
    if (prefix === '-webkit- 2009' || prefix === '-moz-') {
        spec = 2009;
    } else if (prefix === '-ms-') {
        spec = 2012;
    } else if (prefix === '-webkit-') {
        spec = 'final';
    }

    if (prefix === '-webkit- 2009') {
        prefix = '-webkit-';
    }

    return [spec, prefix];
};

function _defaults$7(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$70(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$54(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$54(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$7(subClass, superClass); }




var list$4 = postcss.list;

var Flex$2 = function (_Declaration) {
    _inherits$54(Flex, _Declaration);

    function Flex() {
        _classCallCheck$70(this, Flex);

        return _possibleConstructorReturn$54(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 spec
     */
    Flex.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-flex';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    Flex.prototype.normalize = function normalize() {
        return 'flex';
    };

    /**
     * Spec 2009 supports only first argument
     * Spec 2012 disallows unitless basis
     */


    Flex.prototype.set = function set(decl, prefix) {
        var spec = flexSpec$3(prefix)[0];
        if (spec === 2009) {
            decl.value = list$4.space(decl.value)[0];
            decl.value = Flex.oldValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else if (spec === 2012) {
            var components = list$4.space(decl.value);
            if (components.length === 3 && components[2] === '0') {
                decl.value = components.slice(0, 2).concat('0px').join(' ');
            }
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return Flex;
}(declaration$2);

Object.defineProperty(Flex$2, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex', 'box-flex']
});
Object.defineProperty(Flex$2, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        auto: '1',
        none: '0'
    }
});


var flex$2 = Flex$2;

function _defaults$8(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$71(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$55(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$55(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$8(subClass, superClass); }




var Order$1 = function (_Declaration) {
    _inherits$55(Order, _Declaration);

    function Order() {
        _classCallCheck$71(this, Order);

        return _possibleConstructorReturn$55(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    Order.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-ordinal-group';
        } else if (spec === 2012) {
            return prefix + 'flex-order';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    Order.prototype.normalize = function normalize() {
        return 'order';
    };

    /**
     * Fix value for 2009 spec
     */


    Order.prototype.set = function set(decl, prefix) {
        var spec = flexSpec$3(prefix)[0];
        if (spec === 2009 && /\d/.test(decl.value)) {
            decl.value = (parseInt(decl.value) + 1).toString();
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
    };

    return Order;
}(declaration$2);

Object.defineProperty(Order$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['order', 'flex-order', 'box-ordinal-group']
});


var order$2 = Order$1;

function _defaults$9(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$72(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$56(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$56(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$9(subClass, superClass); }



var Filter$1 = function (_Declaration) {
    _inherits$56(Filter, _Declaration);

    function Filter() {
        _classCallCheck$72(this, Filter);

        return _possibleConstructorReturn$56(this, _Declaration.apply(this, arguments));
    }

    /**
     * Check is it Internet Explorer filter
     */
    Filter.prototype.check = function check(decl) {
        var v = decl.value;
        return v.toLowerCase().indexOf('alpha(') === -1 && v.indexOf('DXImageTransform.Microsoft') === -1 && v.indexOf('data:image/svg+xml') === -1;
    };

    return Filter;
}(declaration$2);

Object.defineProperty(Filter$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['filter']
});


var filter$2 = Filter$1;

function _defaults$10(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$73(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$57(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$57(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$10(subClass, superClass); }



var GridEnd$1 = function (_Declaration) {
    _inherits$57(GridEnd, _Declaration);

    function GridEnd() {
        _classCallCheck$73(this, GridEnd);

        return _possibleConstructorReturn$57(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefix for unsupported value in IE
     */
    GridEnd.prototype.check = function check(decl) {
        return decl.value.indexOf('span') !== -1;
    };

    /**
     * Return a final spec property
     */


    GridEnd.prototype.normalize = function normalize(prop) {
        return prop.replace(/(-span|-end)/, '');
    };

    /**
     * Change property name for IE
     */


    GridEnd.prototype.prefixed = function prefixed(prop, prefix) {
        var result = _Declaration.prototype.prefixed.call(this, prop, prefix);
        if (prefix === '-ms-') {
            result = result.replace('-end', '-span');
        }
        return result;
    };

    /**
     * Change repeating syntax for IE
     */


    GridEnd.prototype.set = function set(decl, prefix) {
        if (prefix === '-ms-') {
            decl.value = decl.value.replace(/span\s/i, '');
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return GridEnd;
}(declaration$2);

Object.defineProperty(GridEnd$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-row-end', 'grid-column-end', 'grid-row-span', 'grid-column-span']
});


var gridEnd$2 = GridEnd$1;

function _defaults$11(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$74(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$58(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$58(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$11(subClass, superClass); }



var Animation = function (_Declaration) {
    _inherits$58(Animation, _Declaration);

    function Animation() {
        _classCallCheck$74(this, Animation);

        return _possibleConstructorReturn$58(this, _Declaration.apply(this, arguments));
    }

    /**
     * Don’t add prefixes for modern values.
     */
    Animation.prototype.check = function check(decl) {
        return !decl.value.split(/\s+/).some(function (i) {
            var lower = i.toLowerCase();
            return lower === 'reverse' || lower === 'alternate-reverse';
        });
    };

    return Animation;
}(declaration$2);

Object.defineProperty(Animation, 'names', {
    enumerable: true,
    writable: true,
    value: ['animation', 'animation-direction']
});


var animation = Animation;

function _defaults$12(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$75(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$59(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$59(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$12(subClass, superClass); }




var FlexFlow$1 = function (_Declaration) {
    _inherits$59(FlexFlow, _Declaration);

    function FlexFlow() {
        _classCallCheck$75(this, FlexFlow);

        return _possibleConstructorReturn$59(this, _Declaration.apply(this, arguments));
    }

    /**
     * Use two properties for 2009 spec
     */
    FlexFlow.prototype.insert = function insert(decl, prefix, prefixes) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec !== 2009) {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        } else {
            var values = decl.value.split(/\s+/).filter(function (i) {
                return i !== 'wrap' && i !== 'nowrap' && 'wrap-reverse';
            });
            if (values.length === 0) {
                return undefined;
            }

            var already = decl.parent.some(function (i) {
                return i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction';
            });
            if (already) {
                return undefined;
            }

            var value = values[0];
            var orient = value.indexOf('row') !== -1 ? 'horizontal' : 'vertical';
            var dir = value.indexOf('reverse') !== -1 ? 'reverse' : 'normal';

            var cloned = this.clone(decl);
            cloned.prop = prefix + 'box-orient';
            cloned.value = orient;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            decl.parent.insertBefore(decl, cloned);

            cloned = this.clone(decl);
            cloned.prop = prefix + 'box-direction';
            cloned.value = dir;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            return decl.parent.insertBefore(decl, cloned);
        }
    };

    return FlexFlow;
}(declaration$2);

Object.defineProperty(FlexFlow$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-flow', 'box-direction', 'box-orient']
});


var flexFlow$2 = FlexFlow$1;

function _defaults$13(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$76(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$60(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$60(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$13(subClass, superClass); }




var Flex$3 = function (_Declaration) {
    _inherits$60(Flex, _Declaration);

    function Flex() {
        _classCallCheck$76(this, Flex);

        return _possibleConstructorReturn$60(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    Flex.prototype.normalize = function normalize() {
        return 'flex';
    };

    /**
     * Return flex property for 2009 and 2012 specs
     */


    Flex.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-flex';
        } else if (spec === 2012) {
            return prefix + 'flex-positive';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    return Flex;
}(declaration$2);

Object.defineProperty(Flex$3, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-grow', 'flex-positive']
});


var flexGrow$2 = Flex$3;

function _defaults$14(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$77(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$61(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$61(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$14(subClass, superClass); }




var FlexWrap$1 = function (_Declaration) {
    _inherits$61(FlexWrap, _Declaration);

    function FlexWrap() {
        _classCallCheck$77(this, FlexWrap);

        return _possibleConstructorReturn$61(this, _Declaration.apply(this, arguments));
    }

    /**
     * Don't add prefix for 2009 spec
     */
    FlexWrap.prototype.set = function set(decl, prefix) {
        var spec = flexSpec$3(prefix)[0];
        if (spec !== 2009) {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return FlexWrap;
}(declaration$2);

Object.defineProperty(FlexWrap$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-wrap']
});


var flexWrap$2 = FlexWrap$1;

function convert(value) {
    if (value && value.length === 2 && value[0] === 'span' && parseInt(value[1], 10) > 0) {
        return [false, parseInt(value[1], 10)];
    }

    if (value && value.length === 1 && parseInt(value[0], 10) > 0) {
        return [parseInt(value[0], 10), false];
    }

    return [false, false];
}

function translate(values, startIndex, endIndex) {
    var startValue = values[startIndex];
    var endValue = values[endIndex];

    if (!startValue) {
        return [false, false];
    }

    var _convert = convert(startValue),
        start = _convert[0],
        spanStart = _convert[1];

    var _convert2 = convert(endValue),
        end = _convert2[0],
        spanEnd = _convert2[1];

    if (start && !endValue) {
        return [start, false];
    }

    if (spanStart && end) {
        return [end - spanStart, spanStart];
    }

    if (start && spanEnd) {
        return [start, spanEnd];
    }

    if (start && end) {
        return [start, end - start];
    }

    return [false, false];
}

function parse$4(decl) {
    var node = lib(decl.value);

    var values = [];
    var current = 0;
    values[current] = [];

    for (var _iterator = node.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var i = _ref;

        if (i.type === 'div') {
            current += 1;
            values[current] = [];
        } else if (i.type === 'word') {
            values[current].push(i.value);
        }
    }

    return values;
}

function parseTemplateShortcut(decl) {
    var node = lib(decl.value, { loose: true });

    var values = [];
    var current = 0;
    values[current] = [];

    for (var _iterator2 = node.nodes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
        } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
        }

        var i = _ref2;

        if (i.type === 'div') {
            current += 1;
            values[current] = [];
        } else {
            values[current].push(lib.stringify(i));
        }
    }

    return values;
}

function walkRepeat(node) {
    var fixed = [];
    for (var _iterator3 = node.nodes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray3) {
            if (_i3 >= _iterator3.length) break;
            _ref3 = _iterator3[_i3++];
        } else {
            _i3 = _iterator3.next();
            if (_i3.done) break;
            _ref3 = _i3.value;
        }

        var i = _ref3;

        if (i.nodes) {
            walkRepeat(i);
        }
        fixed.push(i);
        if (i.type === 'function' && i.value === 'repeat') {
            var first = i.nodes.shift();
            if (first) {
                var count = first.value;
                i.nodes.shift();
                i.value = '';
                fixed.push({ type: 'word', value: '[' + count + ']' });
            }
        }
    }
    node.nodes = fixed;
}

function changeRepeat(value) {
    var ast = lib(value);
    walkRepeat(ast);
    return ast.toString();
}

var gridShorthand = {
    parse: parse$4,
    translate: translate,
    changeRepeat: changeRepeat,
    parseTemplateShortcut: parseTemplateShortcut
};

function _defaults$15(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$78(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$62(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$62(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$15(subClass, superClass); }




var GridArea = function (_Declaration) {
    _inherits$62(GridArea, _Declaration);

    function GridArea() {
        _classCallCheck$78(this, GridArea);

        return _possibleConstructorReturn$62(this, _Declaration.apply(this, arguments));
    }

    /**
     * Translate grid-area to separate -ms- prefixed properties
     */
    GridArea.prototype.insert = function insert(decl, prefix, prefixes) {
        if (prefix !== '-ms-') return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);

        if (decl.parent.some(function (i) {
            return i.prop === '-ms-grid-row';
        })) {
            return undefined;
        }

        var values = gridShorthand.parse(decl);

        var _shorthand$translate = gridShorthand.translate(values, 0, 2),
            rowStart = _shorthand$translate[0],
            rowSpan = _shorthand$translate[1];

        var _shorthand$translate2 = gridShorthand.translate(values, 1, 3),
            columnStart = _shorthand$translate2[0],
            columnSpan = _shorthand$translate2[1];

        if (rowStart) {
            decl.cloneBefore({
                prop: '-ms-grid-row',
                value: rowStart.toString()
            });
        }

        if (rowSpan) {
            decl.cloneBefore({
                prop: '-ms-grid-row-span',
                value: rowSpan.toString()
            });
        }

        if (columnStart) {
            decl.cloneBefore({
                prop: '-ms-grid-column',
                value: columnStart.toString()
            });
        }

        if (columnSpan) {
            decl.cloneBefore({
                prop: '-ms-grid-column-span',
                value: columnSpan.toString()
            });
        }

        return undefined;
    };

    return GridArea;
}(declaration$2);

Object.defineProperty(GridArea, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-area']
});


var gridArea = GridArea;

function _defaults$16(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$79(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$63(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$63(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$16(subClass, superClass); }



var GridStart$1 = function (_Declaration) {
    _inherits$63(GridStart, _Declaration);

    function GridStart() {
        _classCallCheck$79(this, GridStart);

        return _possibleConstructorReturn$63(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefix for unsupported value in IE
     */
    GridStart.prototype.check = function check(decl) {
        var value = decl.value;
        return value.indexOf('/') === -1 || value.indexOf('span') !== -1;
    };

    /**
     * Return a final spec property
     */


    GridStart.prototype.normalize = function normalize(prop) {
        return prop.replace('-start', '');
    };

    /**
     * Change property name for IE
     */


    GridStart.prototype.prefixed = function prefixed(prop, prefix) {
        var result = _Declaration.prototype.prefixed.call(this, prop, prefix);
        if (prefix === '-ms-') {
            result = result.replace('-start', '');
        }
        return result;
    };

    return GridStart;
}(declaration$2);

Object.defineProperty(GridStart$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-row-start', 'grid-column-start']
});


var gridStart$2 = GridStart$1;

function _defaults$17(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$80(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$64(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$64(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$17(subClass, superClass); }




var AlignSelf$1 = function (_Declaration) {
    _inherits$64(AlignSelf, _Declaration);

    function AlignSelf() {
        _classCallCheck$80(this, AlignSelf);

        return _possibleConstructorReturn$64(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2012 specs
     */
    AlignSelf.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-item-align';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    AlignSelf.prototype.normalize = function normalize() {
        return 'align-self';
    };

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */


    AlignSelf.prototype.set = function set(decl, prefix) {
        var spec = flexSpec$3(prefix)[0];
        if (spec === 2012) {
            decl.value = AlignSelf.oldValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else if (spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return AlignSelf;
}(declaration$2);

Object.defineProperty(AlignSelf$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['align-self', 'flex-item-align']
});
Object.defineProperty(AlignSelf$1, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start'
    }
});


var alignSelf$2 = AlignSelf$1;

function _defaults$18(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$81(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$65(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$65(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$18(subClass, superClass); }




var Appearance$1 = function (_Declaration) {
    _inherits$65(Appearance, _Declaration);

    function Appearance(name, prefixes, all) {
        _classCallCheck$81(this, Appearance);

        var _this = _possibleConstructorReturn$65(this, _Declaration.call(this, name, prefixes, all));

        if (_this.prefixes) {
            _this.prefixes = utils$3.uniq(_this.prefixes.map(function (i) {
                if (i === '-ms-') {
                    return '-webkit-';
                } else {
                    return i;
                }
            }));
        }
        return _this;
    }

    return Appearance;
}(declaration$2);

Object.defineProperty(Appearance$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['appearance']
});


var appearance$3 = Appearance$1;

function _defaults$19(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$82(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$66(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$66(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$19(subClass, superClass); }




var FlexBasis$1 = function (_Declaration) {
    _inherits$66(FlexBasis, _Declaration);

    function FlexBasis() {
        _classCallCheck$82(this, FlexBasis);

        return _possibleConstructorReturn$66(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    FlexBasis.prototype.normalize = function normalize() {
        return 'flex-basis';
    };

    /**
     * Return flex property for 2012 spec
     */


    FlexBasis.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-preferred-size';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Ignore 2009 spec and use flex property for 2012
     */


    FlexBasis.prototype.set = function set(decl, prefix) {
        var spec = void 0;

        var _flexSpec2 = flexSpec$3(prefix);

        spec = _flexSpec2[0];
        prefix = _flexSpec2[1];

        if (spec === 2012 || spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return FlexBasis;
}(declaration$2);

Object.defineProperty(FlexBasis$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-basis', 'flex-preferred-size']
});


var flexBasis$2 = FlexBasis$1;

function _defaults$20(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$83(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$67(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$67(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$20(subClass, superClass); }



var MaskBorder$1 = function (_Declaration) {
    _inherits$67(MaskBorder, _Declaration);

    function MaskBorder() {
        _classCallCheck$83(this, MaskBorder);

        return _possibleConstructorReturn$67(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    MaskBorder.prototype.normalize = function normalize() {
        return this.name.replace('box-image', 'border');
    };

    /**
     * Return flex property for 2012 spec
     */


    MaskBorder.prototype.prefixed = function prefixed(prop, prefix) {
        var result = _Declaration.prototype.prefixed.call(this, prop, prefix);
        if (prefix === '-webkit-') {
            result = result.replace('border', 'box-image');
        }
        return result;
    };

    return MaskBorder;
}(declaration$2);

Object.defineProperty(MaskBorder$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['mask-border', 'mask-border-source', 'mask-border-slice', 'mask-border-width', 'mask-border-outset', 'mask-border-repeat', 'mask-box-image', 'mask-box-image-source', 'mask-box-image-slice', 'mask-box-image-width', 'mask-box-image-outset', 'mask-box-image-repeat']
});


var maskBorder$2 = MaskBorder$1;

function _defaults$21(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$84(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$68(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$68(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$21(subClass, superClass); }




var AlignItems$1 = function (_Declaration) {
    _inherits$68(AlignItems, _Declaration);

    function AlignItems() {
        _classCallCheck$84(this, AlignItems);

        return _possibleConstructorReturn$68(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    AlignItems.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-align';
        } else if (spec === 2012) {
            return prefix + 'flex-align';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    AlignItems.prototype.normalize = function normalize() {
        return 'align-items';
    };

    /**
     * Change value for 2009 and 2012 specs
     */


    AlignItems.prototype.set = function set(decl, prefix) {
        var spec = flexSpec$3(prefix)[0];
        if (spec === 2009 || spec === 2012) {
            decl.value = AlignItems.oldValues[decl.value] || decl.value;
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return AlignItems;
}(declaration$2);

Object.defineProperty(AlignItems$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['align-items', 'flex-align', 'box-align']
});
Object.defineProperty(AlignItems$1, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start'
    }
});


var alignItems$2 = AlignItems$1;

function _defaults$22(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$85(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$69(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$69(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$22(subClass, superClass); }




var FlexShrink$1 = function (_Declaration) {
    _inherits$69(FlexShrink, _Declaration);

    function FlexShrink() {
        _classCallCheck$85(this, FlexShrink);

        return _possibleConstructorReturn$69(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    FlexShrink.prototype.normalize = function normalize() {
        return 'flex-shrink';
    };

    /**
     * Return flex property for 2012 spec
     */


    FlexShrink.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-negative';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Ignore 2009 spec and use flex property for 2012
     */


    FlexShrink.prototype.set = function set(decl, prefix) {
        var spec = void 0;

        var _flexSpec2 = flexSpec$3(prefix);

        spec = _flexSpec2[0];
        prefix = _flexSpec2[1];

        if (spec === 2012 || spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return FlexShrink;
}(declaration$2);

Object.defineProperty(FlexShrink$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-shrink', 'flex-negative']
});


var flexShrink$2 = FlexShrink$1;

function _defaults$23(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$86(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$70(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$70(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$23(subClass, superClass); }



var BreakProps$1 = function (_Declaration) {
    _inherits$70(BreakProps, _Declaration);

    function BreakProps() {
        _classCallCheck$86(this, BreakProps);

        return _possibleConstructorReturn$70(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change name for -webkit- and -moz- prefix
     */
    BreakProps.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-moz-') {
            return 'page-' + prop;
        } else {
            return prefix + 'column-' + prop;
        }
    };

    /**
     * Return property name by final spec
     */


    BreakProps.prototype.normalize = function normalize(prop) {
        if (prop.indexOf('inside') !== -1) {
            return 'break-inside';
        } else if (prop.indexOf('before') !== -1) {
            return 'break-before';
        } else {
            return 'break-after';
        }
    };

    /**
     * Change prefixed value for avoid-column and avoid-page
     */


    BreakProps.prototype.set = function set(decl, prefix) {
        if (decl.prop === 'break-inside' && decl.value === 'avoid-column' || decl.value === 'avoid-page') {
            decl.value = 'avoid';
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    /**
     * Don’t prefix some values
     */


    BreakProps.prototype.insert = function insert(decl, prefix, prefixes) {
        if (decl.prop !== 'break-inside') {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        } else if (decl.value === 'avoid-region') {
            return undefined;
        } else if (decl.value === 'avoid-page' && prefix === '-webkit-') {
            return undefined;
        } else {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        }
    };

    return BreakProps;
}(declaration$2);

Object.defineProperty(BreakProps$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['break-inside', 'page-break-inside', 'column-break-inside', 'break-before', 'page-break-before', 'column-break-before', 'break-after', 'page-break-after', 'column-break-after']
});


var breakProps$2 = BreakProps$1;

function _defaults$24(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$87(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$71(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$71(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$24(subClass, superClass); }



var WritingMode$1 = function (_Declaration) {
    _inherits$71(WritingMode, _Declaration);

    function WritingMode() {
        _classCallCheck$87(this, WritingMode);

        return _possibleConstructorReturn$71(this, _Declaration.apply(this, arguments));
    }

    WritingMode.prototype.set = function set(decl, prefix) {
        if (prefix === '-ms-') {
            decl.value = WritingMode.msValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
    };

    return WritingMode;
}(declaration$2);

Object.defineProperty(WritingMode$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['writing-mode']
});
Object.defineProperty(WritingMode$1, 'msValues', {
    enumerable: true,
    writable: true,
    value: {
        'horizontal-tb': 'lr-tb',
        'vertical-rl': 'tb-rl',
        'vertical-lr': 'tb-lr'
    }
});


var writingMode$3 = WritingMode$1;

function _defaults$25(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$88(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$72(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$72(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$25(subClass, superClass); }



var BorderImage$1 = function (_Declaration) {
    _inherits$72(BorderImage, _Declaration);

    function BorderImage() {
        _classCallCheck$88(this, BorderImage);

        return _possibleConstructorReturn$72(this, _Declaration.apply(this, arguments));
    }

    /**
     * Remove fill parameter for prefixed declarations
     */
    BorderImage.prototype.set = function set(decl, prefix) {
        decl.value = decl.value.replace(/\s+fill(\s)/, '$1');
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return BorderImage;
}(declaration$2);

Object.defineProperty(BorderImage$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-image']
});


var borderImage$4 = BorderImage$1;

function _defaults$26(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$89(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$73(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$73(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$26(subClass, superClass); }




var AlignContent$1 = function (_Declaration) {
    _inherits$73(AlignContent, _Declaration);

    function AlignContent() {
        _classCallCheck$89(this, AlignContent);

        return _possibleConstructorReturn$73(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2012 spec
     */
    AlignContent.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2012) {
            return prefix + 'flex-line-pack';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    AlignContent.prototype.normalize = function normalize() {
        return 'align-content';
    };

    /**
     * Change value for 2012 spec and ignore prefix for 2009
     */


    AlignContent.prototype.set = function set(decl, prefix) {
        var spec = flexSpec$3(prefix)[0];
        if (spec === 2012) {
            decl.value = AlignContent.oldValues[decl.value] || decl.value;
            return _Declaration.prototype.set.call(this, decl, prefix);
        } else if (spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return AlignContent;
}(declaration$2);

Object.defineProperty(AlignContent$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['align-content', 'flex-line-pack']
});
Object.defineProperty(AlignContent$1, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start',
        'space-between': 'justify',
        'space-around': 'distribute'
    }
});


var alignContent$2 = AlignContent$1;

function _defaults$27(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$90(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$74(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$74(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$27(subClass, superClass); }



var BorderRadius$1 = function (_Declaration) {
    _inherits$74(BorderRadius, _Declaration);

    function BorderRadius() {
        _classCallCheck$90(this, BorderRadius);

        return _possibleConstructorReturn$74(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change syntax, when add Mozilla prefix
     */
    BorderRadius.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-moz-') {
            return prefix + (BorderRadius.toMozilla[prop] || prop);
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return unprefixed version of property
     */


    BorderRadius.prototype.normalize = function normalize(prop) {
        return BorderRadius.toNormal[prop] || prop;
    };

    return BorderRadius;
}(declaration$2);

Object.defineProperty(BorderRadius$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-radius']
});
Object.defineProperty(BorderRadius$1, 'toMozilla', {
    enumerable: true,
    writable: true,
    value: {}
});
Object.defineProperty(BorderRadius$1, 'toNormal', {
    enumerable: true,
    writable: true,
    value: {}
});
var _arr$1 = ['top', 'bottom'];


for (var _i$1 = 0; _i$1 < _arr$1.length; _i$1++) {
    var ver$1 = _arr$1[_i$1];var _arr2$1 = ['left', 'right'];

    for (var _i2$1 = 0; _i2$1 < _arr2$1.length; _i2$1++) {
        var hor$1 = _arr2$1[_i2$1];
        var normal$1 = 'border-' + ver$1 + '-' + hor$1 + '-radius';
        var mozilla$1 = 'border-radius-' + ver$1 + hor$1;

        BorderRadius$1.names.push(normal$1);
        BorderRadius$1.names.push(mozilla$1);

        BorderRadius$1.toMozilla[normal$1] = mozilla$1;
        BorderRadius$1.toNormal[mozilla$1] = normal$1;
    }
}

var borderRadius$4 = BorderRadius$1;

function _defaults$28(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$91(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$75(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$75(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$28(subClass, superClass); }



var BlockLogical$1 = function (_Declaration) {
    _inherits$75(BlockLogical, _Declaration);

    function BlockLogical() {
        _classCallCheck$91(this, BlockLogical);

        return _possibleConstructorReturn$75(this, _Declaration.apply(this, arguments));
    }

    /**
     * Use old syntax for -moz- and -webkit-
     */
    BlockLogical.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + (prop.indexOf('-start') !== -1 ? prop.replace('-block-start', '-before') : prop.replace('-block-end', '-after'));
    };

    /**
     * Return property name by spec
     */


    BlockLogical.prototype.normalize = function normalize(prop) {
        if (prop.indexOf('-before') !== -1) {
            return prop.replace('-before', '-block-start');
        } else {
            return prop.replace('-after', '-block-end');
        }
    };

    return BlockLogical;
}(declaration$2);

Object.defineProperty(BlockLogical$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-block-start', 'border-block-end', 'margin-block-start', 'margin-block-end', 'padding-block-start', 'padding-block-end', 'border-before', 'border-after', 'margin-before', 'margin-after', 'padding-before', 'padding-after']
});


var blockLogical$2 = BlockLogical$1;

function _defaults$29(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$92(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$76(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$76(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$29(subClass, superClass); }




var GridTemplate$1 = function (_Declaration) {
    _inherits$76(GridTemplate, _Declaration);

    function GridTemplate() {
        _classCallCheck$92(this, GridTemplate);

        return _possibleConstructorReturn$76(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefix for unsupported value in IE
     */
    GridTemplate.prototype.check = function check(decl) {
        return decl.value.includes('/') && !decl.value.includes('[') && !decl.value.includes('"') && !decl.value.includes('\'');
    };

    /**
     * Translate grid-template to separate -ms- prefixed properties
     */


    GridTemplate.prototype.insert = function insert(decl, prefix, prefixes) {
        if (prefix !== '-ms-') return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);

        if (decl.parent.some(function (i) {
            return i.prop === '-ms-grid-rows';
        })) {
            return undefined;
        }

        var _shorthand$parseTempl = gridShorthand.parseTemplateShortcut(decl),
            templateRows = _shorthand$parseTempl[0],
            templateColumns = _shorthand$parseTempl[1];

        if (templateRows) {
            decl.cloneBefore({
                prop: '-ms-grid-rows',
                value: gridShorthand.changeRepeat(templateRows.join(''))
            });
        }

        if (templateColumns) {
            decl.cloneBefore({
                prop: '-ms-grid-columns',
                value: gridShorthand.changeRepeat(templateColumns.join(''))
            });
        }

        return decl;
    };

    return GridTemplate;
}(declaration$2);

Object.defineProperty(GridTemplate$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-template']
});


var gridTemplate$2 = GridTemplate$1;

function _defaults$30(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$93(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$77(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$77(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$30(subClass, superClass); }



var InlineLogical$1 = function (_Declaration) {
    _inherits$77(InlineLogical, _Declaration);

    function InlineLogical() {
        _classCallCheck$93(this, InlineLogical);

        return _possibleConstructorReturn$77(this, _Declaration.apply(this, arguments));
    }

    /**
     * Use old syntax for -moz- and -webkit-
     */
    InlineLogical.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + prop.replace('-inline', '');
    };

    /**
     * Return property name by spec
     */


    InlineLogical.prototype.normalize = function normalize(prop) {
        return prop.replace(/(margin|padding|border)-(start|end)/, '$1-inline-$2');
    };

    return InlineLogical;
}(declaration$2);

Object.defineProperty(InlineLogical$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['border-inline-start', 'border-inline-end', 'margin-inline-start', 'margin-inline-end', 'padding-inline-start', 'padding-inline-end', 'border-start', 'border-end', 'margin-start', 'margin-end', 'padding-start', 'padding-end']
});


var inlineLogical$2 = InlineLogical$1;

function _defaults$31(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$94(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$78(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$78(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$31(subClass, superClass); }



var GridRowAlign$1 = function (_Declaration) {
    _inherits$78(GridRowAlign, _Declaration);

    function GridRowAlign() {
        _classCallCheck$94(this, GridRowAlign);

        return _possibleConstructorReturn$78(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not prefix flexbox values
     */
    GridRowAlign.prototype.check = function check(decl) {
        return decl.value.indexOf('flex-') === -1 && decl.value !== 'baseline';
    };

    /**
     * Change property name for IE
     */


    GridRowAlign.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + 'grid-row-align';
    };

    /**
     * Change IE property back
     */


    GridRowAlign.prototype.normalize = function normalize() {
        return 'align-self';
    };

    return GridRowAlign;
}(declaration$2);

Object.defineProperty(GridRowAlign$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-row-align']
});


var gridRowAlign$2 = GridRowAlign$1;

function _defaults$32(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$95(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$79(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$79(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$32(subClass, superClass); }



var TransformDecl$1 = function (_Declaration) {
    _inherits$79(TransformDecl, _Declaration);

    function TransformDecl() {
        _classCallCheck$95(this, TransformDecl);

        return _possibleConstructorReturn$79(this, _Declaration.apply(this, arguments));
    }

    /**
     * Recursively check all parents for @keyframes
     */
    TransformDecl.prototype.keyframeParents = function keyframeParents(decl) {
        var parent = decl.parent;

        while (parent) {
            if (parent.type === 'atrule' && parent.name === 'keyframes') {
                return true;
            }
            var _parent = parent;
            parent = _parent.parent;
        }
        return false;
    };

    /**
     * Is transform contain 3D commands
     */


    TransformDecl.prototype.contain3d = function contain3d(decl) {
        if (decl.prop === 'transform-origin') {
            return false;
        }

        for (var _iterator = TransformDecl.functions3d, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var func = _ref;

            if (decl.value.indexOf(func + '(') !== -1) {
                return true;
            }
        }

        return false;
    };

    /**
     * Replace rotateZ to rotate for IE 9
     */


    TransformDecl.prototype.set = function set(decl, prefix) {
        decl = _Declaration.prototype.set.call(this, decl, prefix);
        if (prefix === '-ms-') {
            decl.value = decl.value.replace(/rotateZ/gi, 'rotate');
        }
        return decl;
    };

    /**
     * Don't add prefix for IE in keyframes
     */


    TransformDecl.prototype.insert = function insert(decl, prefix, prefixes) {
        if (prefix === '-ms-') {
            if (!this.contain3d(decl) && !this.keyframeParents(decl)) {
                return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
            }
        } else if (prefix === '-o-') {
            if (!this.contain3d(decl)) {
                return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
            }
        } else {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        }
        return undefined;
    };

    return TransformDecl;
}(declaration$2);

Object.defineProperty(TransformDecl$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['transform', 'transform-origin']
});
Object.defineProperty(TransformDecl$1, 'functions3d', {
    enumerable: true,
    writable: true,
    value: ['matrix3d', 'translate3d', 'translateZ', 'scale3d', 'scaleZ', 'rotate3d', 'rotateX', 'rotateY', 'perspective']
});


var transformDecl$2 = TransformDecl$1;

function _defaults$33(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$96(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$80(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$80(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$33(subClass, superClass); }




var FlexDirection$1 = function (_Declaration) {
    _inherits$80(FlexDirection, _Declaration);

    function FlexDirection() {
        _classCallCheck$96(this, FlexDirection);

        return _possibleConstructorReturn$80(this, _Declaration.apply(this, arguments));
    }

    /**
     * Return property name by final spec
     */
    FlexDirection.prototype.normalize = function normalize() {
        return 'flex-direction';
    };

    /**
     * Use two properties for 2009 spec
     */


    FlexDirection.prototype.insert = function insert(decl, prefix, prefixes) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec !== 2009) {
            return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);
        } else {
            var already = decl.parent.some(function (i) {
                return i.prop === prefix + 'box-orient' || i.prop === prefix + 'box-direction';
            });
            if (already) {
                return undefined;
            }

            var v = decl.value;
            var orient = void 0,
                dir = void 0;
            if (v === 'inherit' || v === 'initial' || v === 'unset') {
                orient = v;
                dir = v;
            } else {
                orient = v.indexOf('row') !== -1 ? 'horizontal' : 'vertical';
                dir = v.indexOf('reverse') !== -1 ? 'reverse' : 'normal';
            }

            var cloned = this.clone(decl);
            cloned.prop = prefix + 'box-orient';
            cloned.value = orient;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            decl.parent.insertBefore(decl, cloned);

            cloned = this.clone(decl);
            cloned.prop = prefix + 'box-direction';
            cloned.value = dir;
            if (this.needCascade(decl)) {
                cloned.raws.before = this.calcBefore(prefixes, decl, prefix);
            }
            return decl.parent.insertBefore(decl, cloned);
        }
    };

    /**
     * Clean two properties for 2009 spec
     */


    FlexDirection.prototype.old = function old(prop, prefix) {
        var spec = void 0;

        var _flexSpec2 = flexSpec$3(prefix);

        spec = _flexSpec2[0];
        prefix = _flexSpec2[1];

        if (spec === 2009) {
            return [prefix + 'box-orient', prefix + 'box-direction'];
        } else {
            return _Declaration.prototype.old.call(this, prop, prefix);
        }
    };

    return FlexDirection;
}(declaration$2);

Object.defineProperty(FlexDirection$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['flex-direction', 'box-direction', 'box-orient']
});


var flexDirection$2 = FlexDirection$1;

function _defaults$34(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$97(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$81(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$81(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$34(subClass, superClass); }



var ImageRendering$1 = function (_Declaration) {
    _inherits$81(ImageRendering, _Declaration);

    function ImageRendering() {
        _classCallCheck$97(this, ImageRendering);

        return _possibleConstructorReturn$81(this, _Declaration.apply(this, arguments));
    }

    /**
     * Add hack only for crisp-edges
     */
    ImageRendering.prototype.check = function check(decl) {
        return decl.value === 'pixelated';
    };

    /**
     * Change property name for IE
     */


    ImageRendering.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-ms-') {
            return '-ms-interpolation-mode';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Change property and value for IE
     */


    ImageRendering.prototype.set = function set(decl, prefix) {
        if (prefix !== '-ms-') return _Declaration.prototype.set.call(this, decl, prefix);
        decl.prop = '-ms-interpolation-mode';
        decl.value = 'nearest-neighbor';
        return decl;
    };

    /**
     * Return property name by spec
     */


    ImageRendering.prototype.normalize = function normalize() {
        return 'image-rendering';
    };

    /**
     * Warn on old value
     */


    ImageRendering.prototype.process = function process(node, result) {
        return _Declaration.prototype.process.call(this, node, result);
    };

    return ImageRendering;
}(declaration$2);

Object.defineProperty(ImageRendering$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['image-rendering', 'interpolation-mode']
});


var imageRendering$2 = ImageRendering$1;

function _defaults$35(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$98(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$82(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$82(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$35(subClass, superClass); }



var BASIC$1 = ['none', 'underline', 'overline', 'line-through', 'blink', 'inherit', 'initial', 'unset'];

var TextDecoration$1 = function (_Declaration) {
    _inherits$82(TextDecoration, _Declaration);

    function TextDecoration() {
        _classCallCheck$98(this, TextDecoration);

        return _possibleConstructorReturn$82(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not add prefixes for basic values.
     */
    TextDecoration.prototype.check = function check(decl) {
        return decl.value.split(/\s+/).some(function (i) {
            return BASIC$1.indexOf(i) === -1;
        });
    };

    return TextDecoration;
}(declaration$2);

Object.defineProperty(TextDecoration$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['text-decoration']
});


var textDecoration$4 = TextDecoration$1;

function _defaults$36(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$99(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$83(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$83(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$36(subClass, superClass); }




var JustifyContent$1 = function (_Declaration) {
    _inherits$83(JustifyContent, _Declaration);

    function JustifyContent() {
        _classCallCheck$99(this, JustifyContent);

        return _possibleConstructorReturn$83(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for 2009 and 2012 specs
     */
    JustifyContent.prototype.prefixed = function prefixed(prop, prefix) {
        var spec = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];

        if (spec === 2009) {
            return prefix + 'box-pack';
        } else if (spec === 2012) {
            return prefix + 'flex-pack';
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Return property name by final spec
     */


    JustifyContent.prototype.normalize = function normalize() {
        return 'justify-content';
    };

    /**
     * Change value for 2009 and 2012 specs
     */


    JustifyContent.prototype.set = function set(decl, prefix) {
        var spec = flexSpec$3(prefix)[0];
        if (spec === 2009 || spec === 2012) {
            var value = JustifyContent.oldValues[decl.value] || decl.value;
            decl.value = value;
            if (spec !== 2009 || value !== 'distribute') {
                return _Declaration.prototype.set.call(this, decl, prefix);
            }
        } else if (spec === 'final') {
            return _Declaration.prototype.set.call(this, decl, prefix);
        }
        return undefined;
    };

    return JustifyContent;
}(declaration$2);

Object.defineProperty(JustifyContent$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['justify-content', 'flex-pack', 'box-pack']
});
Object.defineProperty(JustifyContent$1, 'oldValues', {
    enumerable: true,
    writable: true,
    value: {
        'flex-end': 'end',
        'flex-start': 'start',
        'space-between': 'justify',
        'space-around': 'distribute'
    }
});


var justifyContent$2 = JustifyContent$1;

function _defaults$37(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$100(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$84(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$84(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$37(subClass, superClass); }



var BackgroundSize$1 = function (_Declaration) {
    _inherits$84(BackgroundSize, _Declaration);

    function BackgroundSize() {
        _classCallCheck$100(this, BackgroundSize);

        return _possibleConstructorReturn$84(this, _Declaration.apply(this, arguments));
    }

    /**
     * Duplication parameter for -webkit- browsers
     */
    BackgroundSize.prototype.set = function set(decl, prefix) {
        var value = decl.value.toLowerCase();
        if (prefix === '-webkit-' && value.indexOf(' ') === -1 && value !== 'contain' && value !== 'cover') {
            decl.value = decl.value + ' ' + decl.value;
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return BackgroundSize;
}(declaration$2);

Object.defineProperty(BackgroundSize$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['background-size']
});


var backgroundSize$2 = BackgroundSize$1;

function _defaults$38(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$101(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$85(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$85(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$38(subClass, superClass); }




var GridRowColumn = function (_Declaration) {
    _inherits$85(GridRowColumn, _Declaration);

    function GridRowColumn() {
        _classCallCheck$101(this, GridRowColumn);

        return _possibleConstructorReturn$85(this, _Declaration.apply(this, arguments));
    }

    /**
     * Translate grid-row / grid-column to separate -ms- prefixed properties
     */
    GridRowColumn.prototype.insert = function insert(decl, prefix, prefixes) {
        if (prefix !== '-ms-') return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);

        var values = gridShorthand.parse(decl);

        var _shorthand$translate = gridShorthand.translate(values, 0, 1),
            start = _shorthand$translate[0],
            span = _shorthand$translate[1];

        if (start) {
            decl.cloneBefore({
                prop: '-ms-' + decl.prop,
                value: start.toString()
            });
        }

        if (span) {
            decl.cloneBefore({
                prop: '-ms-' + decl.prop + '-span',
                value: span.toString()
            });
        }

        return undefined;
    };

    return GridRowColumn;
}(declaration$2);

Object.defineProperty(GridRowColumn, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-row', 'grid-column']
});


var gridRowColumn = GridRowColumn;

function _defaults$39(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$102(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$86(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$86(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$39(subClass, superClass); }




var GridRowsColumns = function (_Declaration) {
    _inherits$86(GridRowsColumns, _Declaration);

    function GridRowsColumns() {
        _classCallCheck$102(this, GridRowsColumns);

        return _possibleConstructorReturn$86(this, _Declaration.apply(this, arguments));
    }

    /**
     * Change property name for IE
     */
    GridRowsColumns.prototype.prefixed = function prefixed(prop, prefix) {
        if (prefix === '-ms-') {
            return prefix + prop.replace('template-', '');
        } else {
            return _Declaration.prototype.prefixed.call(this, prop, prefix);
        }
    };

    /**
     * Change IE property back
     */


    GridRowsColumns.prototype.normalize = function normalize(prop) {
        return prop.replace(/^grid-(rows|columns)/, 'grid-template-$1');
    };

    /**
     * Change repeating syntax for IE
     */


    GridRowsColumns.prototype.set = function set(decl, prefix) {
        if (prefix === '-ms-' && decl.value.indexOf('repeat(') !== -1) {
            decl.value = gridShorthand.changeRepeat(decl.value);
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return GridRowsColumns;
}(declaration$2);

Object.defineProperty(GridRowsColumns, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-template-rows', 'grid-template-columns', 'grid-rows', 'grid-columns']
});


var gridRowsColumns = GridRowsColumns;

function _defaults$40(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$103(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$87(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$87(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$40(subClass, superClass); }



var GridColumnAlign$1 = function (_Declaration) {
    _inherits$87(GridColumnAlign, _Declaration);

    function GridColumnAlign() {
        _classCallCheck$103(this, GridColumnAlign);

        return _possibleConstructorReturn$87(this, _Declaration.apply(this, arguments));
    }

    /**
     * Do not prefix flexbox values
     */
    GridColumnAlign.prototype.check = function check(decl) {
        return decl.value.indexOf('flex-') === -1 && decl.value !== 'baseline';
    };

    /**
     * Change property name for IE
     */


    GridColumnAlign.prototype.prefixed = function prefixed(prop, prefix) {
        return prefix + 'grid-column-align';
    };

    /**
     * Change IE property back
     */


    GridColumnAlign.prototype.normalize = function normalize() {
        return 'justify-self';
    };

    return GridColumnAlign;
}(declaration$2);

Object.defineProperty(GridColumnAlign$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-column-align']
});


var gridColumnAlign$2 = GridColumnAlign$1;

function _defaults$41(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$104(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$88(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$88(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$41(subClass, superClass); }



var DOTS = /^\.+$/;

function track(start, end) {
    return { start: start, end: end, span: end - start };
}

function getRows(tpl) {
    return tpl.trim().slice(1, -1).split(/['"]\s*['"]?/g);
}

function getColumns(line) {
    return line.trim().split(/\s+/g);
}

function parseGridAreas(tpl) {
    return getRows(tpl).reduce(function (areas, line, rowIndex) {
        if (line.trim() === '') return areas;
        getColumns(line).forEach(function (area, columnIndex) {
            if (DOTS.test(area)) return;
            if (typeof areas[area] === 'undefined') {
                areas[area] = {
                    column: track(columnIndex + 1, columnIndex + 2),
                    row: track(rowIndex + 1, rowIndex + 2)
                };
            } else {
                var _areas$area = areas[area],
                    column = _areas$area.column,
                    row = _areas$area.row;


                column.start = Math.min(column.start, columnIndex + 1);
                column.end = Math.max(column.end, columnIndex + 2);
                column.span = column.end - column.start;

                row.start = Math.min(row.start, rowIndex + 1);
                row.end = Math.max(row.end, rowIndex + 2);
                row.span = row.end - row.start;
            }
        });
        return areas;
    }, {});
}

var GridTemplateAreas = function (_Declaration) {
    _inherits$88(GridTemplateAreas, _Declaration);

    function GridTemplateAreas() {
        _classCallCheck$104(this, GridTemplateAreas);

        return _possibleConstructorReturn$88(this, _Declaration.apply(this, arguments));
    }

    GridTemplateAreas.prototype.getRoot = function getRoot(parent) {
        if (parent.type === 'atrule' || !parent.parent) {
            return parent;
        }
        return this.getRoot(parent.parent);
    };

    /**
     * Translate grid-template-areas to separate -ms- prefixed properties
     */


    GridTemplateAreas.prototype.insert = function insert(decl, prefix, prefixes, result) {
        if (prefix !== '-ms-') return _Declaration.prototype.insert.call(this, decl, prefix, prefixes);

        var areas = parseGridAreas(decl.value);
        var missed = Object.keys(areas);

        this.getRoot(decl.parent).walkDecls('grid-area', function (gridArea) {
            var value = gridArea.value;
            var area = areas[value];

            missed = missed.filter(function (e) {
                return e !== value;
            });

            if (area) {
                gridArea.parent.walkDecls(/-ms-grid-(row|column)/, function (d) {
                    d.remove();
                });

                gridArea.cloneBefore({
                    prop: '-ms-grid-row',
                    value: String(area.row.start)
                });
                if (area.row.span > 1) {
                    gridArea.cloneBefore({
                        prop: '-ms-grid-row-span',
                        value: String(area.row.span)
                    });
                }
                gridArea.cloneBefore({
                    prop: '-ms-grid-column',
                    value: String(area.column.start)
                });
                if (area.column.span > 1) {
                    gridArea.cloneBefore({
                        prop: '-ms-grid-column-span',
                        value: String(area.column.span)
                    });
                }
            }
            return undefined;
        });

        if (missed.length > 0) {
            decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));
        }

        return decl;
    };

    return GridTemplateAreas;
}(declaration$2);

Object.defineProperty(GridTemplateAreas, 'names', {
    enumerable: true,
    writable: true,
    value: ['grid-template-areas']
});


var gridTemplateAreas = GridTemplateAreas;

function _defaults$42(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$105(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$89(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$89(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$42(subClass, superClass); }



var TextEmphasisPosition$1 = function (_Declaration) {
    _inherits$89(TextEmphasisPosition, _Declaration);

    function TextEmphasisPosition() {
        _classCallCheck$105(this, TextEmphasisPosition);

        return _possibleConstructorReturn$89(this, _Declaration.apply(this, arguments));
    }

    TextEmphasisPosition.prototype.set = function set(decl, prefix) {
        if (prefix === '-webkit-') {
            decl.value = decl.value.replace(/\s*(right|left)\s*/i, '');
        }
        return _Declaration.prototype.set.call(this, decl, prefix);
    };

    return TextEmphasisPosition;
}(declaration$2);

Object.defineProperty(TextEmphasisPosition$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['text-emphasis-position']
});


var textEmphasisPosition$2 = TextEmphasisPosition$1;

function _defaults$43(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$106(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$90(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$90(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$43(subClass, superClass); }








var isDirection$1 = /top|left|right|bottom/gi;

var Gradient$1 = function (_Value) {
    _inherits$90(Gradient, _Value);

    function Gradient() {
        var _temp, _this, _ret;

        _classCallCheck$106(this, Gradient);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn$90(this, _Value.call.apply(_Value, [this].concat(args))), _this), Object.defineProperty(_this, 'directions', {
            enumerable: true,
            writable: true,
            value: {
                top: 'bottom',
                left: 'right',
                bottom: 'top',
                right: 'left'
            }
        }), Object.defineProperty(_this, 'oldDirections', {
            enumerable: true,
            writable: true,
            value: {
                'top': 'left bottom, left top',
                'left': 'right top, left top',
                'bottom': 'left top, left bottom',
                'right': 'left top, right top',

                'top right': 'left bottom, right top',
                'top left': 'right bottom, left top',
                'right top': 'left bottom, right top',
                'right bottom': 'left top, right bottom',
                'bottom right': 'left top, right bottom',
                'bottom left': 'right top, left bottom',
                'left top': 'right bottom, left top',
                'left bottom': 'right top, left bottom'
            }
        }), _temp), _possibleConstructorReturn$90(_this, _ret);
    }

    // Direction to replace


    // Direction to replace


    /**
     * Change degrees for webkit prefix
     */
    Gradient.prototype.replace = function replace(string, prefix) {
        var ast = lib(string);
        for (var _iterator = ast.nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var node = _ref;

            if (node.type === 'function' && node.value === this.name) {
                node.nodes = this.newDirection(node.nodes);
                node.nodes = this.normalize(node.nodes);
                if (prefix === '-webkit- old') {
                    var changes = this.oldWebkit(node);
                    if (!changes) {
                        return false;
                    }
                } else {
                    node.nodes = this.convertDirection(node.nodes);
                    node.value = prefix + node.value;
                }
            }
        }
        return ast.toString();
    };

    /**
     * Replace first token
     */


    Gradient.prototype.replaceFirst = function replaceFirst(params) {
        for (var _len2 = arguments.length, words = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            words[_key2 - 1] = arguments[_key2];
        }

        var prefix = words.map(function (i) {
            if (i === ' ') {
                return { type: 'space', value: i };
            } else {
                return { type: 'word', value: i };
            }
        });
        return prefix.concat(params.slice(1));
    };

    /**
     * Convert angle unit to deg
     */


    Gradient.prototype.normalizeUnit = function normalizeUnit(str, full) {
        var num = parseFloat(str);
        var deg = num / full * 360;
        return deg + 'deg';
    };

    /**
     * Normalize angle
     */


    Gradient.prototype.normalize = function normalize(nodes) {
        if (!nodes[0]) return nodes;

        if (/-?\d+(.\d+)?grad/.test(nodes[0].value)) {
            nodes[0].value = this.normalizeUnit(nodes[0].value, 400);
        } else if (/-?\d+(.\d+)?rad/.test(nodes[0].value)) {
            nodes[0].value = this.normalizeUnit(nodes[0].value, 2 * Math.PI);
        } else if (/-?\d+(.\d+)?turn/.test(nodes[0].value)) {
            nodes[0].value = this.normalizeUnit(nodes[0].value, 1);
        } else if (nodes[0].value.indexOf('deg') !== -1) {
            var num = parseFloat(nodes[0].value);
            num = _normalizeRange_0_1_2_normalizeRange.wrap(0, 360, num);
            nodes[0].value = num + 'deg';
        }

        if (nodes[0].value === '0deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'top');
        } else if (nodes[0].value === '90deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'right');
        } else if (nodes[0].value === '180deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'bottom');
        } else if (nodes[0].value === '270deg') {
            nodes = this.replaceFirst(nodes, 'to', ' ', 'left');
        }

        return nodes;
    };

    /**
     * Replace old direction to new
     */


    Gradient.prototype.newDirection = function newDirection(params) {
        if (params[0].value === 'to') {
            return params;
        }
        isDirection$1.lastIndex = 0; // reset search index of global regexp
        if (!isDirection$1.test(params[0].value)) {
            return params;
        }

        params.unshift({
            type: 'word',
            value: 'to'
        }, {
            type: 'space',
            value: ' '
        });

        for (var i = 2; i < params.length; i++) {
            if (params[i].type === 'div') {
                break;
            }
            if (params[i].type === 'word') {
                params[i].value = this.revertDirection(params[i].value);
            }
        }

        return params;
    };

    /**
     * Change new direction to old
     */


    Gradient.prototype.convertDirection = function convertDirection(params) {
        if (params.length > 0) {
            if (params[0].value === 'to') {
                this.fixDirection(params);
            } else if (params[0].value.indexOf('deg') !== -1) {
                this.fixAngle(params);
            } else if (params[2] && params[2].value === 'at') {
                this.fixRadial(params);
            }
        }
        return params;
    };

    /**
     * Replace `to top left` to `bottom right`
     */


    Gradient.prototype.fixDirection = function fixDirection(params) {
        params.splice(0, 2);

        for (var _iterator2 = params, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var param = _ref2;

            if (param.type === 'div') {
                break;
            }
            if (param.type === 'word') {
                param.value = this.revertDirection(param.value);
            }
        }
    };

    /**
     * Add 90 degrees
     */


    Gradient.prototype.fixAngle = function fixAngle(params) {
        var first = params[0].value;
        first = parseFloat(first);
        first = Math.abs(450 - first) % 360;
        first = this.roundFloat(first, 3);
        params[0].value = first + 'deg';
    };

    /**
     * Fix radial direction syntax
     */


    Gradient.prototype.fixRadial = function fixRadial(params) {
        var first = params[0];
        var second = [];
        var i = void 0;

        var div = void 0;
        for (i = 4; i < params.length; i++) {
            if (params[i].type === 'div') {
                div = params[i];
                break;
            } else {
                second.push(params[i]);
            }
        }

        params.splice.apply(params, [0, i].concat(second, [div, first]));
    };

    Gradient.prototype.revertDirection = function revertDirection(word) {
        return this.directions[word.toLowerCase()] || word;
    };

    /**
     * Round float and save digits under dot
     */


    Gradient.prototype.roundFloat = function roundFloat(float, digits) {
        return parseFloat(float.toFixed(digits));
    };

    /**
     * Convert to old webkit syntax
     */


    Gradient.prototype.oldWebkit = function oldWebkit(node) {
        var nodes = node.nodes;

        var string = lib.stringify(node.nodes);

        if (this.name !== 'linear-gradient') {
            return false;
        }
        if (nodes[0] && nodes[0].value.indexOf('deg') !== -1) {
            return false;
        }
        if (string.indexOf('px') !== -1 || string.indexOf('-corner') !== -1 || string.indexOf('-side') !== -1) {
            return false;
        }

        var params = [[]];
        for (var _iterator3 = nodes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
            } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
            }

            var i = _ref3;

            params[params.length - 1].push(i);
            if (i.type === 'div' && i.value === ',') {
                params.push([]);
            }
        }

        this.oldDirection(params);
        this.colorStops(params);

        node.nodes = [];
        for (var _iterator4 = params, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
            var _ref4;

            if (_isArray4) {
                if (_i4 >= _iterator4.length) break;
                _ref4 = _iterator4[_i4++];
            } else {
                _i4 = _iterator4.next();
                if (_i4.done) break;
                _ref4 = _i4.value;
            }

            var param = _ref4;

            node.nodes = node.nodes.concat(param);
        }

        node.nodes.unshift({ type: 'word', value: 'linear' }, this.cloneDiv(node.nodes));
        node.value = '-webkit-gradient';

        return true;
    };

    /**
     * Change direction syntax to old webkit
     */


    Gradient.prototype.oldDirection = function oldDirection(params) {
        var div = this.cloneDiv(params[0]);

        if (params[0][0].value !== 'to') {
            return params.unshift([{ type: 'word', value: this.oldDirections.bottom }, div]);
        } else {
            var _words = [];
            for (var _iterator5 = params[0].slice(2), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                var _ref5;

                if (_isArray5) {
                    if (_i5 >= _iterator5.length) break;
                    _ref5 = _iterator5[_i5++];
                } else {
                    _i5 = _iterator5.next();
                    if (_i5.done) break;
                    _ref5 = _i5.value;
                }

                var node = _ref5;

                if (node.type === 'word') {
                    _words.push(node.value.toLowerCase());
                }
            }

            _words = _words.join(' ');
            var old = this.oldDirections[_words] || _words;

            params[0] = [{ type: 'word', value: old }, div];
            return params[0];
        }
    };

    /**
     * Get div token from exists parameters
     */


    Gradient.prototype.cloneDiv = function cloneDiv(params) {
        for (var _iterator6 = params, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
            var _ref6;

            if (_isArray6) {
                if (_i6 >= _iterator6.length) break;
                _ref6 = _iterator6[_i6++];
            } else {
                _i6 = _iterator6.next();
                if (_i6.done) break;
                _ref6 = _i6.value;
            }

            var i = _ref6;

            if (i.type === 'div' && i.value === ',') {
                return i;
            }
        }
        return { type: 'div', value: ',', after: ' ' };
    };

    /**
     * Change colors syntax to old webkit
     */


    Gradient.prototype.colorStops = function colorStops(params) {
        var result = [];
        for (var i = 0; i < params.length; i++) {
            var pos = void 0;
            var param = params[i];
            var item = void 0;
            if (i === 0) {
                continue;
            }

            var color = lib.stringify(param[0]);
            if (param[1] && param[1].type === 'word') {
                pos = param[1].value;
            } else if (param[2] && param[2].type === 'word') {
                pos = param[2].value;
            }

            var stop = void 0;
            if (i === 1 && (!pos || pos === '0%')) {
                stop = 'from(' + color + ')';
            } else if (i === params.length - 1 && (!pos || pos === '100%')) {
                stop = 'to(' + color + ')';
            } else if (pos) {
                stop = 'color-stop(' + pos + ', ' + color + ')';
            } else {
                stop = 'color-stop(' + color + ')';
            }

            var div = param[param.length - 1];
            params[i] = [{ type: 'word', value: stop }];
            if (div.type === 'div' && div.value === ',') {
                item = params[i].push(div);
            }
            result.push(item);
        }
        return result;
    };

    /**
     * Remove old WebKit gradient too
     */


    Gradient.prototype.old = function old(prefix) {
        if (prefix === '-webkit-') {
            var type = this.name === 'linear-gradient' ? 'linear' : 'radial';
            var string = '-gradient';
            var regexp = utils$3.regexp('-webkit-(' + type + '-gradient|gradient\\(\\s*' + type + ')', false);

            return new oldValue$2(this.name, prefix + this.name, string, regexp);
        } else {
            return _Value.prototype.old.call(this, prefix);
        }
    };

    /**
     * Do not add non-webkit prefixes for list-style and object
     */


    Gradient.prototype.add = function add(decl, prefix) {
        var p = decl.prop;
        if (p.indexOf('mask') !== -1) {
            if (prefix === '-webkit-' || prefix === '-webkit- old') {
                return _Value.prototype.add.call(this, decl, prefix);
            }
        } else if (p === 'list-style' || p === 'list-style-image' || p === 'content') {
            if (prefix === '-webkit-' || prefix === '-webkit- old') {
                return _Value.prototype.add.call(this, decl, prefix);
            }
        } else {
            return _Value.prototype.add.call(this, decl, prefix);
        }
        return undefined;
    };

    return Gradient;
}(value$2);

Object.defineProperty(Gradient$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient']
});


var gradient$2 = Gradient$1;

function _defaults$44(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$107(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$91(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$91(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$44(subClass, superClass); }




function _regexp$1(name) {
    return new RegExp('(^|[\\s,(])(' + name + '($|[\\s),]))', 'gi');
}

var Intrinsic$1 = function (_Value) {
    _inherits$91(Intrinsic, _Value);

    function Intrinsic() {
        _classCallCheck$107(this, Intrinsic);

        return _possibleConstructorReturn$91(this, _Value.apply(this, arguments));
    }

    Intrinsic.prototype.regexp = function regexp() {
        if (!this.regexpCache) this.regexpCache = _regexp$1(this.name);
        return this.regexpCache;
    };

    Intrinsic.prototype.isStretch = function isStretch() {
        return this.name === 'stretch' || this.name === 'fill' || this.name === 'fill-available';
    };

    Intrinsic.prototype.replace = function replace(string, prefix) {
        if (prefix === '-moz-' && this.isStretch()) {
            return string.replace(this.regexp(), '$1-moz-available$3');
        } else if (prefix === '-webkit-' && this.isStretch()) {
            return string.replace(this.regexp(), '$1-webkit-fill-available$3');
        } else {
            return _Value.prototype.replace.call(this, string, prefix);
        }
    };

    Intrinsic.prototype.old = function old(prefix) {
        var prefixed = prefix + this.name;
        if (this.isStretch()) {
            if (prefix === '-moz-') {
                prefixed = '-moz-available';
            } else if (prefix === '-webkit-') {
                prefixed = '-webkit-fill-available';
            }
        }
        return new oldValue$2(this.name, prefixed, prefixed, _regexp$1(prefixed));
    };

    Intrinsic.prototype.add = function add(decl, prefix) {
        if (decl.prop.indexOf('grid') !== -1 && prefix !== '-webkit-') {
            return undefined;
        }
        return _Value.prototype.add.call(this, decl, prefix);
    };

    return Intrinsic;
}(value$2);

Object.defineProperty(Intrinsic$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['max-content', 'min-content', 'fit-content', 'fill', 'fill-available', 'stretch']
});


var intrinsic$2 = Intrinsic$1;

function _defaults$45(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$108(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$92(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$92(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$45(subClass, superClass); }




var Pixelated$1 = function (_Value) {
    _inherits$92(Pixelated, _Value);

    function Pixelated() {
        _classCallCheck$108(this, Pixelated);

        return _possibleConstructorReturn$92(this, _Value.apply(this, arguments));
    }

    /**
     * Use non-standard name for WebKit and Firefox
     */
    Pixelated.prototype.replace = function replace(string, prefix) {
        if (prefix === '-webkit-') {
            return string.replace(this.regexp(), '$1-webkit-optimize-contrast');
        } else if (prefix === '-moz-') {
            return string.replace(this.regexp(), '$1-moz-crisp-edges');
        } else {
            return _Value.prototype.replace.call(this, string, prefix);
        }
    };

    /**
     * Different name for WebKit and Firefox
     */


    Pixelated.prototype.old = function old(prefix) {
        if (prefix === '-webkit-') {
            return new oldValue$2(this.name, '-webkit-optimize-contrast');
        } else if (prefix === '-moz-') {
            return new oldValue$2(this.name, '-moz-crisp-edges');
        } else {
            return _Value.prototype.old.call(this, prefix);
        }
    };

    return Pixelated;
}(value$2);

Object.defineProperty(Pixelated$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['pixelated']
});


var pixelated$2 = Pixelated$1;

function _defaults$46(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$109(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$93(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$93(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$46(subClass, superClass); }



var ImageSet$1 = function (_Value) {
    _inherits$93(ImageSet, _Value);

    function ImageSet() {
        _classCallCheck$109(this, ImageSet);

        return _possibleConstructorReturn$93(this, _Value.apply(this, arguments));
    }

    /**
     * Use non-standard name for WebKit and Firefox
     */
    ImageSet.prototype.replace = function replace(string, prefix) {
        var fixed = _Value.prototype.replace.call(this, string, prefix);
        if (prefix === '-webkit-') {
            fixed = fixed.replace(/("[^"]+"|'[^']+')(\s+\d+\w)/gi, 'url($1)$2');
        }
        return fixed;
    };

    return ImageSet;
}(value$2);

Object.defineProperty(ImageSet$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['image-set']
});


var imageSet$2 = ImageSet$1;

function _defaults$47(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$110(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$94(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$94(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$47(subClass, superClass); }


var list$5 = postcss.list;

var CrossFade$1 = function (_Value) {
    _inherits$94(CrossFade, _Value);

    function CrossFade() {
        _classCallCheck$110(this, CrossFade);

        return _possibleConstructorReturn$94(this, _Value.apply(this, arguments));
    }

    CrossFade.prototype.replace = function replace(string, prefix) {
        var _this2 = this;

        return list$5.space(string).map(function (value) {
            if (value.slice(0, +_this2.name.length + 1) !== _this2.name + '(') {
                return value;
            }

            var close = value.lastIndexOf(')');
            var after = value.slice(close + 1);
            var args = value.slice(_this2.name.length + 1, close);

            if (prefix === '-webkit-') {
                var match = args.match(/\d*.?\d+%?/);
                if (match) {
                    args = args.slice(match[0].length).trim();
                    args += ', ' + match[0];
                } else {
                    args += ', 0.5';
                }
            }
            return prefix + _this2.name + '(' + args + ')' + after;
        }).join(' ');
    };

    return CrossFade;
}(value$2);

Object.defineProperty(CrossFade$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['cross-fade']
});


var crossFade$2 = CrossFade$1;

function _defaults$48(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$111(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$95(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$95(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$48(subClass, superClass); }





var DisplayFlex$1 = function (_Value) {
    _inherits$95(DisplayFlex, _Value);

    function DisplayFlex(name, prefixes) {
        _classCallCheck$111(this, DisplayFlex);

        var _this = _possibleConstructorReturn$95(this, _Value.call(this, name, prefixes));

        if (name === 'display-flex') {
            _this.name = 'flex';
        }
        return _this;
    }

    /**
     * Faster check for flex value
     */


    DisplayFlex.prototype.check = function check(decl) {
        return decl.prop === 'display' && decl.value === this.name;
    };

    /**
     * Return value by spec
     */


    DisplayFlex.prototype.prefixed = function prefixed(prefix) {
        var spec = void 0,
            value = void 0;

        var _flexSpec = flexSpec$3(prefix);

        spec = _flexSpec[0];
        prefix = _flexSpec[1];


        if (spec === 2009) {
            if (this.name === 'flex') {
                value = 'box';
            } else {
                value = 'inline-box';
            }
        } else if (spec === 2012) {
            if (this.name === 'flex') {
                value = 'flexbox';
            } else {
                value = 'inline-flexbox';
            }
        } else if (spec === 'final') {
            value = this.name;
        }

        return prefix + value;
    };

    /**
     * Add prefix to value depend on flebox spec version
     */


    DisplayFlex.prototype.replace = function replace(string, prefix) {
        return this.prefixed(prefix);
    };

    /**
     * Change value for old specs
     */


    DisplayFlex.prototype.old = function old(prefix) {
        var prefixed = this.prefixed(prefix);
        if (!prefixed) return undefined;
        return new oldValue$2(this.name, prefixed);
    };

    return DisplayFlex;
}(value$2);

Object.defineProperty(DisplayFlex$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['display-flex', 'inline-flex']
});


var displayFlex$2 = DisplayFlex$1;

function _defaults$49(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$112(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$96(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$96(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$49(subClass, superClass); }



var DisplayGrid$1 = function (_Value) {
    _inherits$96(DisplayGrid, _Value);

    function DisplayGrid(name, prefixes) {
        _classCallCheck$112(this, DisplayGrid);

        var _this = _possibleConstructorReturn$96(this, _Value.call(this, name, prefixes));

        if (name === 'display-grid') {
            _this.name = 'grid';
        }
        return _this;
    }

    /**
     * Faster check for flex value
     */


    DisplayGrid.prototype.check = function check(decl) {
        return decl.prop === 'display' && decl.value === this.name;
    };

    return DisplayGrid;
}(value$2);

Object.defineProperty(DisplayGrid$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['display-grid', 'inline-grid']
});


var displayGrid$2 = DisplayGrid$1;

function _defaults$50(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _classCallCheck$113(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn$97(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits$97(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults$50(subClass, superClass); }



var FilterValue$1 = function (_Value) {
    _inherits$97(FilterValue, _Value);

    function FilterValue(name, prefixes) {
        _classCallCheck$113(this, FilterValue);

        var _this = _possibleConstructorReturn$97(this, _Value.call(this, name, prefixes));

        if (name === 'filter-function') {
            _this.name = 'filter';
        }
        return _this;
    }

    return FilterValue;
}(value$2);

Object.defineProperty(FilterValue$1, 'names', {
    enumerable: true,
    writable: true,
    value: ['filter', 'filter-function']
});


var filterValue$2 = FilterValue$1;

function _classCallCheck$56(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }












var vendor$2 = postcss.vendor;

selector$2.hack(fullscreen$5);
selector$2.hack(placeholder$2);

declaration$2.hack(flex$2);
declaration$2.hack(order$2);
declaration$2.hack(filter$2);
declaration$2.hack(gridEnd$2);
declaration$2.hack(animation);
declaration$2.hack(flexFlow$2);
declaration$2.hack(flexGrow$2);
declaration$2.hack(flexWrap$2);
declaration$2.hack(gridArea);
declaration$2.hack(gridStart$2);
declaration$2.hack(alignSelf$2);
declaration$2.hack(appearance$3);
declaration$2.hack(flexBasis$2);
declaration$2.hack(maskBorder$2);
declaration$2.hack(alignItems$2);
declaration$2.hack(flexShrink$2);
declaration$2.hack(breakProps$2);
declaration$2.hack(writingMode$3);
declaration$2.hack(borderImage$4);
declaration$2.hack(alignContent$2);
declaration$2.hack(borderRadius$4);
declaration$2.hack(blockLogical$2);
declaration$2.hack(gridTemplate$2);
declaration$2.hack(inlineLogical$2);
declaration$2.hack(gridRowAlign$2);
declaration$2.hack(transformDecl$2);
declaration$2.hack(flexDirection$2);
declaration$2.hack(imageRendering$2);
declaration$2.hack(textDecoration$4);
declaration$2.hack(justifyContent$2);
declaration$2.hack(backgroundSize$2);
declaration$2.hack(gridRowColumn);
declaration$2.hack(gridRowsColumns);
declaration$2.hack(gridColumnAlign$2);
declaration$2.hack(gridTemplateAreas);
declaration$2.hack(textEmphasisPosition$2);

value$2.hack(gradient$2);
value$2.hack(intrinsic$2);
value$2.hack(pixelated$2);
value$2.hack(imageSet$2);
value$2.hack(crossFade$2);
value$2.hack(displayFlex$2);
value$2.hack(displayGrid$2);
value$2.hack(filterValue$2);

var declsCache$1 = {};

var Prefixes$2 = function () {
    function Prefixes(data, browsers) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        _classCallCheck$56(this, Prefixes);

        this.data = data;
        this.browsers = browsers;
        this.options = options;

        var _preprocess = this.preprocess(this.select(this.data));

        this.add = _preprocess[0];
        this.remove = _preprocess[1];

        this.transition = new transition$2(this);
        this.processor = new processor$2(this);
    }

    /**
     * Return clone instance to remove all prefixes
     */


    Prefixes.prototype.cleaner = function cleaner() {
        if (this.cleanerCache) {
            return this.cleanerCache;
        }

        if (this.browsers.selected.length) {
            var empty = new browsers$5(this.browsers.data, []);
            this.cleanerCache = new Prefixes(this.data, empty, this.options);
        } else {
            return this;
        }

        return this.cleanerCache;
    };

    /**
     * Select prefixes from data, which is necessary for selected browsers
     */


    Prefixes.prototype.select = function select(list) {
        var _this = this;

        var selected = { add: {}, remove: {} };

        var _loop = function _loop(name) {
            var data = list[name];
            var add = data.browsers.map(function (i) {
                var params = i.split(' ');
                return {
                    browser: params[0] + ' ' + params[1],
                    note: params[2]
                };
            });

            var notes = add.filter(function (i) {
                return i.note;
            }).map(function (i) {
                return _this.browsers.prefix(i.browser) + ' ' + i.note;
            });
            notes = utils$3.uniq(notes);

            add = add.filter(function (i) {
                return _this.browsers.isSelected(i.browser);
            }).map(function (i) {
                var prefix = _this.browsers.prefix(i.browser);
                if (i.note) {
                    return prefix + ' ' + i.note;
                } else {
                    return prefix;
                }
            });
            add = _this.sort(utils$3.uniq(add));

            if (_this.options.flexbox === 'no-2009') {
                add = add.filter(function (i) {
                    return i.indexOf('2009') === -1;
                });
            }

            var all = data.browsers.map(function (i) {
                return _this.browsers.prefix(i);
            });
            if (data.mistakes) {
                all = all.concat(data.mistakes);
            }
            all = all.concat(notes);
            all = utils$3.uniq(all);

            if (add.length) {
                selected.add[name] = add;
                if (add.length < all.length) {
                    selected.remove[name] = all.filter(function (i) {
                        return add.indexOf(i) === -1;
                    });
                }
            } else {
                selected.remove[name] = all;
            }
        };

        for (var name in list) {
            _loop(name);
        }

        return selected;
    };

    /**
     * Sort vendor prefixes
     */


    Prefixes.prototype.sort = function sort(prefixes) {
        return prefixes.sort(function (a, b) {
            var aLength = utils$3.removeNote(a).length;
            var bLength = utils$3.removeNote(b).length;

            if (aLength === bLength) {
                return b.length - a.length;
            } else {
                return bLength - aLength;
            }
        });
    };

    /**
     * Cache prefixes data to fast CSS processing
     */


    Prefixes.prototype.preprocess = function preprocess(selected) {
        var add = {
            'selectors': [],
            '@supports': new supports$2(Prefixes, this)
        };
        for (var name in selected.add) {
            var prefixes = selected.add[name];
            if (name === '@keyframes' || name === '@viewport') {
                add[name] = new atRule$2(name, prefixes, this);
            } else if (name === '@resolution') {
                add[name] = new resolution$2(name, prefixes, this);
            } else if (this.data[name].selector) {
                add.selectors.push(selector$2.load(name, prefixes, this));
            } else {
                var props = this.data[name].props;

                if (props) {
                    var value = value$2.load(name, prefixes, this);
                    for (var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var prop = _ref;

                        if (!add[prop]) {
                            add[prop] = { values: [] };
                        }
                        add[prop].values.push(value);
                    }
                } else {
                    var values = add[name] && add[name].values || [];
                    add[name] = declaration$2.load(name, prefixes, this);
                    add[name].values = values;
                }
            }
        }

        var remove = { selectors: [] };
        for (var _name in selected.remove) {
            var _prefixes = selected.remove[_name];
            if (this.data[_name].selector) {
                var selector = selector$2.load(_name, _prefixes);
                for (var _iterator2 = _prefixes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                    var _ref2;

                    if (_isArray2) {
                        if (_i2 >= _iterator2.length) break;
                        _ref2 = _iterator2[_i2++];
                    } else {
                        _i2 = _iterator2.next();
                        if (_i2.done) break;
                        _ref2 = _i2.value;
                    }

                    var prefix = _ref2;

                    remove.selectors.push(selector.old(prefix));
                }
            } else if (_name === '@keyframes' || _name === '@viewport') {
                for (var _iterator3 = _prefixes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var _prefix = _ref3;

                    var prefixed = '@' + _prefix + _name.slice(1);
                    remove[prefixed] = { remove: true };
                }
            } else if (_name === '@resolution') {
                remove[_name] = new resolution$2(_name, _prefixes, this);
            } else {
                var _props = this.data[_name].props;
                if (_props) {
                    var _value = value$2.load(_name, [], this);
                    for (var _iterator4 = _prefixes, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                        var _ref4;

                        if (_isArray4) {
                            if (_i4 >= _iterator4.length) break;
                            _ref4 = _iterator4[_i4++];
                        } else {
                            _i4 = _iterator4.next();
                            if (_i4.done) break;
                            _ref4 = _i4.value;
                        }

                        var _prefix2 = _ref4;

                        var old = _value.old(_prefix2);
                        if (old) {
                            for (var _iterator5 = _props, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                                var _ref5;

                                if (_isArray5) {
                                    if (_i5 >= _iterator5.length) break;
                                    _ref5 = _iterator5[_i5++];
                                } else {
                                    _i5 = _iterator5.next();
                                    if (_i5.done) break;
                                    _ref5 = _i5.value;
                                }

                                var _prop = _ref5;

                                if (!remove[_prop]) {
                                    remove[_prop] = {};
                                }
                                if (!remove[_prop].values) {
                                    remove[_prop].values = [];
                                }
                                remove[_prop].values.push(old);
                            }
                        }
                    }
                } else {
                    for (var _iterator6 = _prefixes, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
                        var _ref6;

                        if (_isArray6) {
                            if (_i6 >= _iterator6.length) break;
                            _ref6 = _iterator6[_i6++];
                        } else {
                            _i6 = _iterator6.next();
                            if (_i6.done) break;
                            _ref6 = _i6.value;
                        }

                        var _prefix3 = _ref6;

                        var olds = this.decl(_name).old(_name, _prefix3);
                        if (_name === 'align-self') {
                            var a = add[_name] && add[_name].prefixes;
                            if (a) {
                                if (_prefix3 === '-webkit- 2009' && a.indexOf('-webkit-') !== -1) {
                                    continue;
                                } else if (_prefix3 === '-webkit-' && a.indexOf('-webkit- 2009') !== -1) {
                                    continue;
                                }
                            }
                        }
                        for (var _iterator7 = olds, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
                            var _ref7;

                            if (_isArray7) {
                                if (_i7 >= _iterator7.length) break;
                                _ref7 = _iterator7[_i7++];
                            } else {
                                _i7 = _iterator7.next();
                                if (_i7.done) break;
                                _ref7 = _i7.value;
                            }

                            var _prefixed = _ref7;

                            if (!remove[_prefixed]) {
                                remove[_prefixed] = {};
                            }
                            remove[_prefixed].remove = true;
                        }
                    }
                }
            }
        }

        return [add, remove];
    };

    /**
     * Declaration loader with caching
     */


    Prefixes.prototype.decl = function decl(prop) {
        var decl = declsCache$1[prop];

        if (decl) {
            return decl;
        } else {
            declsCache$1[prop] = declaration$2.load(prop);
            return declsCache$1[prop];
        }
    };

    /**
     * Return unprefixed version of property
     */


    Prefixes.prototype.unprefixed = function unprefixed(prop) {
        var value = this.normalize(vendor$2.unprefixed(prop));
        if (value === 'flex-direction') {
            value = 'flex-flow';
        }
        return value;
    };

    /**
     * Normalize prefix for remover
     */


    Prefixes.prototype.normalize = function normalize(prop) {
        return this.decl(prop).normalize(prop);
    };

    /**
     * Return prefixed version of property
     */


    Prefixes.prototype.prefixed = function prefixed(prop, prefix) {
        prop = vendor$2.unprefixed(prop);
        return this.decl(prop).prefixed(prop, prefix);
    };

    /**
     * Return values, which must be prefixed in selected property
     */


    Prefixes.prototype.values = function values(type, prop) {
        var data = this[type];

        var global = data['*'] && data['*'].values;
        var values = data[prop] && data[prop].values;

        if (global && values) {
            return utils$3.uniq(global.concat(values));
        } else {
            return global || values || [];
        }
    };

    /**
     * Group declaration by unprefixed property to check them
     */


    Prefixes.prototype.group = function group(decl) {
        var _this2 = this;

        var rule = decl.parent;
        var index = rule.index(decl);
        var length = rule.nodes.length;

        var unprefixed = this.unprefixed(decl.prop);

        var checker = function checker(step, callback) {
            index += step;
            while (index >= 0 && index < length) {
                var other = rule.nodes[index];
                if (other.type === 'decl') {

                    if (step === -1 && other.prop === unprefixed) {
                        if (!browsers$5.withPrefix(other.value)) {
                            break;
                        }
                    }

                    if (_this2.unprefixed(other.prop) !== unprefixed) {
                        break;
                    } else if (callback(other) === true) {
                        return true;
                    }

                    if (step === +1 && other.prop === unprefixed) {
                        if (!browsers$5.withPrefix(other.value)) {
                            break;
                        }
                    }
                }

                index += step;
            }
            return false;
        };

        return {
            up: function up(callback) {
                return checker(-1, callback);
            },
            down: function down(callback) {
                return checker(+1, callback);
            }
        };
    };

    return Prefixes;
}();

var prefixes$4 = Prefixes$2;

function capitalize$1(str) {
    return str.slice(0, 1).toUpperCase() + str.slice(1);
}

var names$1 = {
    ie: 'IE',
    ie_mob: 'IE Mobile',
    ios_saf: 'iOS',
    op_mini: 'Opera Mini',
    op_mob: 'Opera Mobile',
    and_chr: 'Chrome for Android',
    and_ff: 'Firefox for Android',
    and_uc: 'UC for Android'
};

var prefix$2 = function prefix(name, prefixes) {
    var out = '  ' + name + ': ';
    out += prefixes.map(function (i) {
        return i.replace(/^-(.*)-$/g, '$1');
    }).join(', ');
    out += '\n';
    return out;
};

var info$2 = function (prefixes) {
    if (prefixes.browsers.selected.length === 0) {
        return 'No browsers selected';
    }

    var versions = {};
    for (var _iterator = prefixes.browsers.selected, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var browser = _ref;

        var _browser$split = browser.split(' '),
            name = _browser$split[0],
            version = _browser$split[1];

        name = names$1[name] || capitalize$1(name);
        if (versions[name]) {
            versions[name].push(version);
        } else {
            versions[name] = [version];
        }
    }

    var out = 'Browsers:\n';
    for (var _browser in versions) {
        var list = versions[_browser];
        list = list.sort(function (a, b) {
            return parseFloat(b) - parseFloat(a);
        });
        out += '  ' + _browser + ': ' + list.join(', ') + '\n';
    }

    var coverage = _browserslist_2_11_3_browserslist.coverage(prefixes.browsers.selected);
    var round = Math.round(coverage * 100) / 100.0;
    out += '\nThese browsers account for ' + round + '% of all users globally\n';

    var atrules = '';
    for (var name in prefixes.add) {
        var data = prefixes.add[name];
        if (name[0] === '@' && data.prefixes) {
            atrules += prefix$2(name, data.prefixes);
        }
    }
    if (atrules !== '') {
        out += '\nAt-Rules:\n' + atrules;
    }

    var selectors = '';
    for (var _iterator2 = prefixes.add.selectors, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref2 = _iterator2[_i2++];
        } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref2 = _i2.value;
        }

        var selector = _ref2;

        if (selector.prefixes) {
            selectors += prefix$2(selector.name, selector.prefixes);
        }
    }
    if (selectors !== '') {
        out += '\nSelectors:\n' + selectors;
    }

    var values = '';
    var props = '';
    for (var _name in prefixes.add) {
        var _data = prefixes.add[_name];
        if (_name[0] !== '@' && _data.prefixes) {
            props += prefix$2(_name, _data.prefixes);
        }

        if (!_data.values) {
            continue;
        }
        for (var _iterator3 = _data.values, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
            var _ref3;

            if (_isArray3) {
                if (_i3 >= _iterator3.length) break;
                _ref3 = _iterator3[_i3++];
            } else {
                _i3 = _iterator3.next();
                if (_i3.done) break;
                _ref3 = _i3.value;
            }

            var value = _ref3;

            var string = prefix$2(value.name, value.prefixes);
            if (values.indexOf(string) === -1) {
                values += string;
            }
        }
    }

    if (props !== '') {
        out += '\nProperties:\n' + props;
    }
    if (values !== '') {
        out += '\nValues:\n' + values;
    }

    if (atrules === '' && selectors === '' && props === '' && values === '') {
        out += '\nAwesome! Your browsers don\'t require any vendor prefixes.' + '\nNow you can remove Autoprefixer from build steps.';
    }

    return out;
};

var unpack$1 = unpacker.feature;

var browsersSort$1 = function browsersSort(a, b) {
    a = a.split(' ');
    b = b.split(' ');
    if (a[0] > b[0]) {
        return 1;
    } else if (a[0] < b[0]) {
        return -1;
    } else {
        return Math.sign(parseFloat(a[1]) - parseFloat(b[1]));
    }
};

// Convert Can I Use data
function f$1(data, opts, callback) {
    data = unpack$1(data);

    if (!callback) {
        var _ref = [opts, {}];
        callback = _ref[0];
        opts = _ref[1];
    }

    var match = opts.match || /\sx($|\s)/;
    var need = [];

    for (var browser in data.stats) {
        var versions = data.stats[browser];
        for (var version in versions) {
            var support = versions[version];
            if (support.match(match)) {
                need.push(browser + ' ' + version);
            }
        }
    }

    callback(need.sort(browsersSort$1));
}

// Add data for all properties
var result$1 = {};

var prefix$3 = function prefix(names, data) {
    for (var _iterator = names, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref2;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref2 = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref2 = _i.value;
        }

        var name = _ref2;

        result$1[name] = Object.assign({}, data);
    }
};

var add$1 = function add(names, data) {
    for (var _iterator2 = names, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
        var _ref3;

        if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref3 = _iterator2[_i2++];
        } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref3 = _i2.value;
        }

        var name = _ref3;

        result$1[name].browsers = result$1[name].browsers.concat(data.browsers).sort(browsersSort$1);
    }
};

var prefixes$6 = result$1;

// Border Radius
f$1(borderRadius, function (browsers) {
    return prefix$3(['border-radius', 'border-top-left-radius', 'border-top-right-radius', 'border-bottom-right-radius', 'border-bottom-left-radius'], {
        mistakes: ['-khtml-', '-ms-', '-o-'],
        feature: 'border-radius',
        browsers: browsers
    });
});

// Box Shadow
f$1(cssBoxshadow, function (browsers) {
    return prefix$3(['box-shadow'], {
        mistakes: ['-khtml-'],
        feature: 'css-boxshadow',
        browsers: browsers
    });
});

// Animation
f$1(cssAnimation, function (browsers) {
    return prefix$3(['animation', 'animation-name', 'animation-duration', 'animation-delay', 'animation-direction', 'animation-fill-mode', 'animation-iteration-count', 'animation-play-state', 'animation-timing-function', '@keyframes'], {
        mistakes: ['-khtml-', '-ms-'],
        feature: 'css-animation',
        browsers: browsers
    });
});

// Transition
f$1(cssTransitions, function (browsers) {
    return prefix$3(['transition', 'transition-property', 'transition-duration', 'transition-delay', 'transition-timing-function'], {
        mistakes: ['-khtml-', '-ms-'],
        browsers: browsers,
        feature: 'css-transitions'
    });
});

// Transform 2D
f$1(transforms2d, function (browsers) {
    return prefix$3(['transform', 'transform-origin'], {
        feature: 'transforms2d',
        browsers: browsers
    });
});

// Transform 3D


f$1(transforms3d, function (browsers) {
    prefix$3(['perspective', 'perspective-origin'], {
        feature: 'transforms3d',
        browsers: browsers
    });
    return prefix$3(['transform-style'], {
        mistakes: ['-ms-', '-o-'],
        browsers: browsers,
        feature: 'transforms3d'
    });
});

f$1(transforms3d, { match: /y\sx|y\s#2/ }, function (browsers) {
    return prefix$3(['backface-visibility'], {
        mistakes: ['-ms-', '-o-'],
        feature: 'transforms3d',
        browsers: browsers
    });
});

// Gradients


f$1(cssGradients, { match: /y\sx/ }, function (browsers) {
    return prefix$3(['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        mistakes: ['-ms-'],
        feature: 'css-gradients',
        browsers: browsers
    });
});

f$1(cssGradients, { match: /a\sx/ }, function (browsers) {
    browsers = browsers.map(function (i) {
        if (/op/.test(i)) {
            return i;
        } else {
            return i + ' old';
        }
    });
    return add$1(['linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient'], {
        feature: 'css-gradients',
        browsers: browsers
    });
});

// Box sizing
f$1(css3Boxsizing, function (browsers) {
    return prefix$3(['box-sizing'], {
        feature: 'css3-boxsizing',
        browsers: browsers
    });
});

// Filter Effects
f$1(cssFilters, function (browsers) {
    return prefix$3(['filter'], {
        feature: 'css-filters',
        browsers: browsers
    });
});

// filter() function
f$1(cssFilterFunction, function (browsers) {
    return prefix$3(['filter-function'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        feature: 'css-filter-function',
        browsers: browsers
    });
});

// Backdrop-filter
f$1(cssBackdropFilter, function (browsers) {
    return prefix$3(['backdrop-filter'], {
        feature: 'css-backdrop-filter',
        browsers: browsers
    });
});

// element() function
f$1(cssElementFunction, function (browsers) {
    return prefix$3(['element'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        feature: 'css-element-function',
        browsers: browsers
    });
});

// Multicolumns
f$1(multicolumn, function (browsers) {
    prefix$3(['columns', 'column-width', 'column-gap', 'column-rule', 'column-rule-color', 'column-rule-width'], {
        feature: 'multicolumn',
        browsers: browsers
    });

    prefix$3(['column-count', 'column-rule-style', 'column-span', 'column-fill', 'break-before', 'break-after', 'break-inside'], {
        feature: 'multicolumn',
        browsers: browsers
    });
});

// User select
f$1(userSelectNone, function (browsers) {
    return prefix$3(['user-select'], {
        mistakes: ['-khtml-'],
        feature: 'user-select-none',
        browsers: browsers
    });
});

// Flexible Box Layout

f$1(flexbox, { match: /a\sx/ }, function (browsers) {
    browsers = browsers.map(function (i) {
        if (/ie|firefox/.test(i)) {
            return i;
        } else {
            return i + ' 2009';
        }
    });
    prefix$3(['display-flex', 'inline-flex'], {
        props: ['display'],
        feature: 'flexbox',
        browsers: browsers
    });
    prefix$3(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
        feature: 'flexbox',
        browsers: browsers
    });
    prefix$3(['flex-direction', 'flex-wrap', 'flex-flow', 'justify-content', 'order', 'align-items', 'align-self', 'align-content'], {
        feature: 'flexbox',
        browsers: browsers
    });
});

f$1(flexbox, { match: /y\sx/ }, function (browsers) {
    add$1(['display-flex', 'inline-flex'], {
        feature: 'flexbox',
        browsers: browsers
    });
    add$1(['flex', 'flex-grow', 'flex-shrink', 'flex-basis'], {
        feature: 'flexbox',
        browsers: browsers
    });
    add$1(['flex-direction', 'flex-wrap', 'flex-flow', 'justify-content', 'order', 'align-items', 'align-self', 'align-content'], {
        feature: 'flexbox',
        browsers: browsers
    });
});

// calc() unit
f$1(calc, function (browsers) {
    return prefix$3(['calc'], {
        props: ['*'],
        feature: 'calc',
        browsers: browsers
    });
});

// Background options
f$1(backgroundImgOpts, function (browsers) {
    return prefix$3(['background-clip', 'background-origin', 'background-size'], {
        feature: 'background-img-opts',
        browsers: browsers
    });
});

// Font feature settings
f$1(fontFeature, function (browsers) {
    return prefix$3(['font-feature-settings', 'font-variant-ligatures', 'font-language-override'], {
        feature: 'font-feature',
        browsers: browsers
    });
});

// CSS font-kerning property
f$1(fontKerning, function (browsers) {
    return prefix$3(['font-kerning'], {
        feature: 'font-kerning',
        browsers: browsers
    });
});

// Border image
f$1(borderImage, function (browsers) {
    return prefix$3(['border-image'], {
        feature: 'border-image',
        browsers: browsers
    });
});

// Selection selector
f$1(cssSelection, function (browsers) {
    return prefix$3(['::selection'], {
        selector: true,
        feature: 'css-selection',
        browsers: browsers
    });
});

// Placeholder selector
f$1(cssPlaceholder, function (browsers) {
    browsers = browsers.map(function (i) {
        var _i$split = i.split(' '),
            name = _i$split[0],
            version = _i$split[1];

        if (name === 'firefox' && parseFloat(version) <= 18) {
            return i + ' old';
        } else if (name === 'ie') {
            return i + ' old';
        } else {
            return i;
        }
    });

    prefix$3(['::placeholder'], {
        selector: true,
        feature: 'css-placeholder',
        browsers: browsers
    });
});

// Hyphenation
f$1(cssHyphens, function (browsers) {
    return prefix$3(['hyphens'], {
        feature: 'css-hyphens',
        browsers: browsers
    });
});

// Fullscreen selector


f$1(fullscreen, function (browsers) {
    return prefix$3([':fullscreen'], {
        selector: true,
        feature: 'fullscreen',
        browsers: browsers
    });
});

f$1(fullscreen, { match: /x(\s#2|$)/ }, function (browsers) {
    return prefix$3(['::backdrop'], {
        selector: true,
        feature: 'fullscreen',
        browsers: browsers
    });
});

// Tab size
f$1(css3Tabsize, function (browsers) {
    return prefix$3(['tab-size'], {
        feature: 'css3-tabsize',
        browsers: browsers
    });
});

// Intrinsic & extrinsic sizing
f$1(intrinsicWidth, function (browsers) {
    return prefix$3(['max-content', 'min-content', 'fit-content', 'fill', 'fill-available', 'stretch'], {
        props: ['width', 'min-width', 'max-width', 'height', 'min-height', 'max-height', 'inline-size', 'min-inline-size', 'max-inline-size', 'block-size', 'min-block-size', 'max-block-size', 'grid', 'grid-template', 'grid-template-rows', 'grid-template-columns', 'grid-auto-columns', 'grid-auto-rows'],
        feature: 'intrinsic-width',
        browsers: browsers
    });
});

// Zoom cursors
f$1(css3CursorsNewer, function (browsers) {
    return prefix$3(['zoom-in', 'zoom-out'], {
        props: ['cursor'],
        feature: 'css3-cursors-newer',
        browsers: browsers
    });
});

// Grab cursors
f$1(css3CursorsGrab, function (browsers) {
    return prefix$3(['grab', 'grabbing'], {
        props: ['cursor'],
        feature: 'css3-cursors-grab',
        browsers: browsers
    });
});

// Sticky position
f$1(cssSticky, function (browsers) {
    return prefix$3(['sticky'], {
        props: ['position'],
        feature: 'css-sticky',
        browsers: browsers
    });
});

// Pointer Events
f$1(pointer, function (browsers) {
    return prefix$3(['touch-action'], {
        feature: 'pointer',
        browsers: browsers
    });
});

// Text decoration


f$1(textDecoration, function (browsers) {
    return prefix$3(['text-decoration-style', 'text-decoration-color', 'text-decoration-line', 'text-decoration'], {
        feature: 'text-decoration',
        browsers: browsers
    });
});

f$1(textDecoration, { match: /x.*#[23]/ }, function (browsers) {
    return prefix$3(['text-decoration-skip'], {
        feature: 'text-decoration',
        browsers: browsers
    });
});

// Text Size Adjust
f$1(textSizeAdjust, function (browsers) {
    return prefix$3(['text-size-adjust'], {
        feature: 'text-size-adjust',
        browsers: browsers
    });
});

// CSS Masks
f$1(cssMasks, function (browsers) {
    prefix$3(['mask-clip', 'mask-composite', 'mask-image', 'mask-origin', 'mask-repeat', 'mask-border-repeat', 'mask-border-source'], {
        feature: 'css-masks',
        browsers: browsers
    });
    prefix$3(['mask', 'mask-position', 'mask-size', 'mask-border', 'mask-border-outset', 'mask-border-width', 'mask-border-slice'], {
        feature: 'css-masks',
        browsers: browsers
    });
});

// CSS clip-path property
f$1(cssClipPath, function (browsers) {
    return prefix$3(['clip-path'], {
        feature: 'css-clip-path',
        browsers: browsers
    });
});

// Fragmented Borders and Backgrounds
f$1(cssBoxdecorationbreak, function (browsers) {
    return prefix$3(['box-decoration-break'], {
        feature: 'css-boxdecorationbreak',
        browsers: browsers
    });
});

// CSS3 object-fit/object-position
f$1(objectFit, function (browsers) {
    return prefix$3(['object-fit', 'object-position'], {
        feature: 'object-fit',
        browsers: browsers
    });
});

// CSS Shapes
f$1(cssShapes, function (browsers) {
    return prefix$3(['shape-margin', 'shape-outside', 'shape-image-threshold'], {
        feature: 'css-shapes',
        browsers: browsers
    });
});

// CSS3 text-overflow
f$1(textOverflow, function (browsers) {
    return prefix$3(['text-overflow'], {
        feature: 'text-overflow',
        browsers: browsers
    });
});

// Viewport at-rule
f$1(cssDeviceadaptation, function (browsers) {
    return prefix$3(['@viewport'], {
        feature: 'css-deviceadaptation',
        browsers: browsers
    });
});

// Resolution Media Queries

f$1(cssMediaResolution, { match: /( x($| )|a #3)/ }, function (browsers) {
    return prefix$3(['@resolution'], {
        feature: 'css-media-resolution',
        browsers: browsers
    });
});

// CSS text-align-last
f$1(cssTextAlignLast, function (browsers) {
    return prefix$3(['text-align-last'], {
        feature: 'css-text-align-last',
        browsers: browsers
    });
});

// Crisp Edges Image Rendering Algorithm


f$1(cssCrispEdges, { match: /y x|a x #1/ }, function (browsers) {
    return prefix$3(['pixelated'], {
        props: ['image-rendering'],
        feature: 'css-crisp-edges',
        browsers: browsers
    });
});

f$1(cssCrispEdges, { match: /a x #2/ }, function (browsers) {
    return prefix$3(['image-rendering'], {
        feature: 'css-crisp-edges',
        browsers: browsers
    });
});

// Logical Properties


f$1(cssLogicalProps, function (browsers) {
    return prefix$3(['border-inline-start', 'border-inline-end', 'margin-inline-start', 'margin-inline-end', 'padding-inline-start', 'padding-inline-end'], {
        feature: 'css-logical-props',
        browsers: browsers
    });
});

f$1(cssLogicalProps, { match: /x\s#2/ }, function (browsers) {
    return prefix$3(['border-block-start', 'border-block-end', 'margin-block-start', 'margin-block-end', 'padding-block-start', 'padding-block-end'], {
        feature: 'css-logical-props',
        browsers: browsers
    });
});

// CSS appearance

f$1(cssAppearance, { match: /#2|x/ }, function (browsers) {
    return prefix$3(['appearance'], {
        feature: 'css-appearance',
        browsers: browsers
    });
});

// CSS Scroll snap points
f$1(cssSnappoints, function (browsers) {
    return prefix$3(['scroll-snap-type', 'scroll-snap-coordinate', 'scroll-snap-destination', 'scroll-snap-points-x', 'scroll-snap-points-y'], {
        feature: 'css-snappoints',
        browsers: browsers
    });
});

// CSS Regions
f$1(cssRegions, function (browsers) {
    return prefix$3(['flow-into', 'flow-from', 'region-fragment'], {
        feature: 'css-regions',
        browsers: browsers
    });
});

// CSS image-set
f$1(cssImageSet, function (browsers) {
    return prefix$3(['image-set'], {
        props: ['background', 'background-image', 'border-image', 'cursor', 'mask', 'mask-image', 'list-style', 'list-style-image', 'content'],
        feature: 'css-image-set',
        browsers: browsers
    });
});

// Writing Mode

f$1(cssWritingMode, { match: /a|x/ }, function (browsers) {
    return prefix$3(['writing-mode'], {
        feature: 'css-writing-mode',
        browsers: browsers
    });
});

// Cross-Fade Function
f$1(cssCrossFade, function (browsers) {
    return prefix$3(['cross-fade'], {
        props: ['background', 'background-image', 'border-image', 'mask', 'list-style', 'list-style-image', 'content', 'mask-image'],
        feature: 'css-cross-fade',
        browsers: browsers
    });
});

// Read Only selector
f$1(cssReadOnlyWrite, function (browsers) {
    return prefix$3([':read-only', ':read-write'], {
        selector: true,
        feature: 'css-read-only-write',
        browsers: browsers
    });
});

// Text Emphasize
f$1(textEmphasis, function (browsers) {
    return prefix$3(['text-emphasis', 'text-emphasis-position', 'text-emphasis-style', 'text-emphasis-color'], {
        feature: 'text-emphasis',
        browsers: browsers
    });
});

// CSS Grid Layout


f$1(cssGrid, function (browsers) {
    prefix$3(['display-grid', 'inline-grid'], {
        props: ['display'],
        feature: 'css-grid',
        browsers: browsers
    });
    prefix$3(['grid-template-columns', 'grid-template-rows', 'grid-row-start', 'grid-column-start', 'grid-row-end', 'grid-column-end', 'grid-row', 'grid-column', 'grid-area', 'grid-template', 'grid-template-areas'], {
        feature: 'css-grid',
        browsers: browsers
    });
});

f$1(cssGrid, { match: /a x/ }, function (browsers) {
    return prefix$3(['grid-column-align', 'grid-row-align'], {
        feature: 'css-grid',
        browsers: browsers
    });
});

// CSS text-spacing
f$1(cssTextSpacing, function (browsers) {
    return prefix$3(['text-spacing'], {
        feature: 'css-text-spacing',
        browsers: browsers
    });
});

// :any-link selector
f$1(cssAnyLink, function (browsers) {
    return prefix$3([':any-link'], {
        selector: true,
        feature: 'css-any-link',
        browsers: browsers
    });
});

// unicode-bidi


f$1(cssUnicodeBidi, function (browsers) {
    return prefix$3(['isolate'], {
        props: ['unicode-bidi'],
        feature: 'css-unicode-bidi',
        browsers: browsers
    });
});

f$1(cssUnicodeBidi, { match: /y x|a x #2/ }, function (browsers) {
    return prefix$3(['plaintext'], {
        props: ['unicode-bidi'],
        feature: 'css-unicode-bidi',
        browsers: browsers
    });
});

f$1(cssUnicodeBidi, { match: /y x/ }, function (browsers) {
    return prefix$3(['isolate-override'], {
        props: ['unicode-bidi'],
        feature: 'css-unicode-bidi',
        browsers: browsers
    });
});

var autoprefixer$2 = createCommonjsModule(function (module) {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };







function isPlainObject(obj) {
    return Object.prototype.toString.apply(obj) === '[object Object]';
}

var cache = {};

function timeCapsule(result, prefixes) {
    if (prefixes.browsers.selected.length === 0) {
        return;
    }
    if (prefixes.add.selectors.length > 0) {
        return;
    }
    if (Object.keys(prefixes.add).length > 2) {
        return;
    }

    /* istanbul ignore next */
    result.warn('Greetings, time traveller. ' + 'We are in the golden age of prefix-less CSS, ' + 'where Autoprefixer is no longer needed for your stylesheet.');
}

module.exports = postcss.plugin('autoprefixer', function () {
    for (var _len = arguments.length, reqs = Array(_len), _key = 0; _key < _len; _key++) {
        reqs[_key] = arguments[_key];
    }

    var options = void 0;
    if (reqs.length === 1 && isPlainObject(reqs[0])) {
        options = reqs[0];
        reqs = undefined;
    } else if (reqs.length === 0 || reqs.length === 1 && !reqs[0]) {
        reqs = undefined;
    } else if (reqs.length <= 2 && (reqs[0] instanceof Array || !reqs[0])) {
        options = reqs[1];
        reqs = reqs[0];
    } else if (_typeof(reqs[reqs.length - 1]) === 'object') {
        options = reqs.pop();
    }

    if (!options) {
        options = {};
    }

    if (options.browser) {
        throw new Error('Change `browser` option to `browsers` in Autoprefixer');
    } else if (options.browserslist) {
        throw new Error('Change `browserslist` option to `browsers` in Autoprefixer');
    }

    if (options.browsers) {
        reqs = options.browsers;
    }

    if (typeof options.grid === 'undefined') {
        options.grid = false;
    }

    var loadPrefixes = function loadPrefixes(opts) {
        var data = module.exports.data;
        var browsers = new browsers$5(data.browsers, reqs, opts, options.stats);
        var key = browsers.selected.join(', ') + JSON.stringify(options);

        if (!cache[key]) {
            cache[key] = new prefixes$4(data.prefixes, browsers, options);
        }

        return cache[key];
    };

    var plugin = function plugin(css, result) {
        var prefixes = loadPrefixes({
            from: css.source && css.source.input.file,
            env: options.env
        });
        timeCapsule(result, prefixes);
        if (options.remove !== false) {
            prefixes.processor.remove(css, result);
        }
        if (options.add !== false) {
            prefixes.processor.add(css, result);
        }
    };

    plugin.options = options;

    plugin.browsers = reqs;

    plugin.info = function (opts) {
        opts = opts || {};
        opts.from = opts.from || process.cwd();

        return info$2(loadPrefixes(opts));
    };

    return plugin;
});

/**
 * Autoprefixer data
 */
module.exports.data = {
    browsers: unpacker.agents,
    prefixes: prefixes$6
};

/**
 * Autoprefixer default browsers
 */
module.exports.defaults = _browserslist_2_11_3_browserslist.defaults;

/**
 * Inspect with default Autoprefixer
 */
module.exports.info = function () {
    return module.exports().info();
};
});

var _rucksackCss_1_0_2_rucksackCss = createCommonjsModule(function (module) {
'use strict';



const PLUGINS = [
    {
      option: 'alias',
      module: _postcssAlias_2_0_0_postcssAlias
    },
    {
      option: 'responsiveType',
      module: _postcssResponsiveType_1_0_0_postcssResponsiveType
    },
    {
      option: 'shorthandPosition',
      module: _postcssPosition_1_0_0_postcssPosition
    },
    {
      option: 'quantityQueries',
      module: _postcssQuantityQueries_0_5_0_postcssQuantityQueries
    },
    {
      option: 'inputPseudo',
      module: _postcssInputStyle_1_0_0_postcssInputStyle
    },
    {
      option: 'clearFix',
      module: _postcssClearfix_2_0_1_postcssClearfix
    },
    {
      option: 'fontPath',
      module: _postcssFontpath_1_0_0_postcssFontpath
    },
    {
      option: 'hexRGBA',
      module: _postcssHexrgba_1_0_0_postcssHexrgba
    },
    {
      option: 'easings',
      module: _postcssEasings_1_0_1_postcssEasings
    },
    {
      option: 'fallbacks',
      module: _laggard_2_0_1_laggard
    },
    {
      option: 'autoprefixer',
      module: autoprefixer$2
    },
    {
      option: 'reporter',
      module: _postcssReporter_5_0_0_postcssReporter
    }
  ],
  DEFAULTS = {
    alias: true,
    responsiveType: true,
    shorthandPosition: true,
    quantityQueries: true,
    inputPseudo: true,
    clearFix: true,
    fontPath: true,
    hexRGBA: true,
    easings: true,
    autoprefixer: false,
    fallbacks: false,
    reporter: false
  };

// Export plugin bundle
module.exports = postcss.plugin('rucksack', opts => {
  opts = opts || {};

  let config = Object.assign({}, DEFAULTS, opts),
    bundle = postcss();

  PLUGINS.forEach(plugin => {
    config[plugin.option] && bundle.use(plugin.module);
  });

  return bundle;
});
});

/**
 * css模块规则（暂时针对dva）
 *
 * @since 0.0.1
 * @category core 
 * @method commonPlugin 
 * @param {object} [options={ paths: { appSrc:'src/index.ejs' }}]
 * appSrc：'源文件路径'
 * @return {object} css对象
 * @example
 *
 * import { CSSRules, getPaths } from '@dndc/webpack-dndc'
 *
 * const paths = getPaths(process.cwd());
 * const resultCSS = CSSRules({ paths });
 * 
 * //resultCSS.rules css模块规则
 * //resultCSS.CSSPlugin css插件
 * 
 */

function CSSRules(_ref) {
  var paths = _ref.paths;

  var getModifyVars = {
    '@text-color': '#000',
    '@primary-color': '#c90028',
    '@brand-primary': '#c90028'
  };

  var rules = [{
    test: /\.css$/,
    include: paths.appSrc,
    use: ['style', {
      loader: 'css',
      options: {
        sourceMap: true,
        modules: true,
        localIdentName: '[local]___[hash:base64:5]'
      }
    }, {
      loader: 'postcss',
      options: {
        sourceMap: true,
        ident: 'postcss',
        plugins: function plugins() {
          return [_rucksackCss_1_0_2_rucksackCss(), autoprefixer({
            browsers: ['last 2 versions', 'Firefox ESR', '> 1%', 'ie >= 8', 'iOS >= 8', 'Android >= 4']
          }), pxtorem({
            rootValue: 100,
            propWhiteList: []
          })];
        }
      }
    }]

  }, {
    test: /\.less$/,
    include: paths.appSrc,
    use: ['style', {
      loader: 'css',
      options: {
        sourceMap: true,
        modules: true,
        localIdentName: '[local]___[hash:base64:5]'
      }
    }, {
      loader: 'postcss',
      options: {
        sourceMap: true,
        ident: 'postcss',
        plugins: function plugins() {
          return [_rucksackCss_1_0_2_rucksackCss(), autoprefixer({
            browsers: ['last 2 versions', 'Firefox ESR', '> 1%', 'ie >= 8', 'iOS >= 8', 'Android >= 4']
          }), pxtorem({
            rootValue: 100,
            propWhiteList: []
          })];
        }
      }
    }, {
      loader: 'less',
      options: {
        sourceMap: true,
        modifyVars: getModifyVars
      }
    }]
  }];
  rules.forEach(function (rule) {
    rule.use = ExtractTextPlugin.extract({
      fallback: 'style',
      use: rule.use.slice(1)
    });
  });

  // 样式抽取
  var CSSPlugin = new ExtractTextPlugin({
    filename: '[name].[contenthash:8].css',
    disable: false,
    allChunks: true
  });

  return {
    rules: rules,
    CSSPlugin: CSSPlugin
  };
}

var defaults = {
  htmlWebpackPluginOps: {
    template: 'src/index.ejs',
    favicon: './favicon.ico'
  }
};

/**
 * 公用插件(公共代码提取、进度条、生成HTML)
 *
 * @since 0.0.1
 * @category core 
 * @method commonPlugin 
 * @param {object} [options={ htmlWebpackPluginOps: { template:''src/index.ejs', favicon:'./favicon.ico' }}]
 * template：'模板'，favicon：图标
 * @return {array} 公用插件
 * @example
 *
 * import { commonPlugin } from '@dndc/webpack-dndc'
 *
 * const htmlWebpackPluginOps = {
 *   "template": "src/index.ejs",
 *   "favicon": "./favicon.ico"
 * }
 * commonPlugin({ htmlWebpackPluginOps })
 * 
 */

function commonPlugin() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults,
      _ref$htmlWebpackPlugi = _ref.htmlWebpackPluginOps,
      htmlWebpackPluginOps = _ref$htmlWebpackPlugi === undefined ? defaults.htmlWebpackPluginOps : _ref$htmlWebpackPlugi;

  return [
  // 公共代码提取
  new webpack.optimize.CommonsChunkPlugin({
    name: 'common',
    filename: 'common.[hash].js'
  }),
  // 进度条
  new ProgressBarPlugin({
    format: '\uD83C\uDFC3 :msg [:bar] ' + chalk.green.bold(':percent') + ' (:elapsed seconds)',
    clear: false
  }), new HtmlWebpackPlugin({
    template: htmlWebpackPluginOps.template,
    cdn: spanner.getCdnHost(),
    favicon: htmlWebpackPluginOps.favicon,
    hash: true,
    env: spanner.isProduction() ? 'production' : 'development'
  })];
}

/**
 * 生产公共插件(生产切换生产环境、减少大小、js&css混淆压缩)
 *
 * @since 0.0.1
 * @category core 
 * @method proCommonPlugin 
 * @return {array} 插件
 * @example
 *
 * import { proCommonPlugin } from '@dndc/webpack-dndc'
 * 
 * proCommonPlugin()
 * 
 */

function proCommonPlugin() {
  return [new webpack.DefinePlugin({
    'process.env': {
      NODE_ENV: JSON.stringify('production')
    }
  }),
  // 通过模块调用次数给模块分配ids，常用的ids就会分配更短的id，使ids可预测，减小文件大小
  new webpack.optimize.OccurrenceOrderPlugin(),
  // JS与CSS的压缩混淆
  new webpack.optimize.UglifyJsPlugin()];
}

var webpackDndc = {
  firstRules: firstRules,
  getPaths: getPaths,
  CSSRules: CSSRules,
  commonPlugin: commonPlugin,
  proCommonPlugin: proCommonPlugin
};


/**
 * @module webpackDndc
 */

/**
 * 公用插件(公共代码提取、进度条、生成HTML)
 *
 * @since 0.0.1
 * @category core 
 * @method commonPlugin 
 * @param {object} [options={ htmlWebpackPluginOps: { template:''src/index.ejs', favicon:'./favicon.ico' }}]
 * template：'模板'，favicon：图标
 * @return {array} 公用插件
 * @example
 *
 * import { commonPlugin } from '@dndc/webpack-dndc'
 *
 * const htmlWebpackPluginOps = {
 *   "template": "src/index.ejs",
 *   "favicon": "./favicon.ico"
 * }
 * commonPlugin({ htmlWebpackPluginOps })
 * 
 */

/**
 * css模块规则（暂时针对dva）
 *
 * @since 0.0.1
 * @category core 
 * @method commonPlugin 
 * @param {object} [options={ paths: { appSrc:''src/index.ejs' }}]
 * appSrc：'源文件路径'
 * @return {object} css规则
 * @example
 *
 * import { CSSRules, getPaths } from '@dndc/webpack-dndc'
 *
 * const paths = getPaths(process.cwd());
 * const resultCSS = CSSRules({ paths });
 * 
 * //resultCSS.rules css规则
 * //resultCSS.CSSPlugin css插件
 * 
 */

/**
 * 模块规则（js、html、esj、图片规则）
 *
 * @since 0.0.1
 * @category core 
 * @method firstRules 
 * @param {object} [options={ paths: { appNodeModules:'node_modules' },babelOptions: { presets:['env','react','stage-0'],plugins:['transform-runtime'] }}]
 * appNodeModules：'node模块'，babelOptions：babel配置
 * @return {object} 公共模块匹配规则
 * @example
 *
 * import { firstRules } from '@dndc/webpack-dndc'
 *
 * const paths = getPaths(process.cwd());
 * const babelOptions = {
 *   presets: [
 *    "env",
 *    "react",
 *    "stage-0",
 *   ]
 *   plugins:[
 *     "transform-runtime"
 *   ]
 * }
 * firstRules({ paths, babelOptions })
 * 
 */

/**
 * 获取路径
 *
 * @since 0.0.1
 * @category core 
 * @method getPaths 
 * @param {object} [options={ cwd:process.cwd() }]
 * appNodeModules：'node模块'，babelOptions：babel配置
 * @return {object} 路径
 * @example
 *
 * import { getPaths } from '@dndc/webpack-dndc'
 *
 * const paths = getPaths(process.cwd());
 * 
 */

/**
 * 生产公共插件(生产切换生产环境、减少大小、js&css混淆压缩)
 *
 * @since 0.0.1
 * @category core 
 * @method proCommonPlugin 
 * @return {array} 插件
 * @example
 *
 * import { proCommonPlugin } from '@dndc/webpack-dndc'
 * 
 * proCommonPlugin()
 * 
 */

module.exports = webpackDndc;
